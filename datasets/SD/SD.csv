"Key","Item Type","Publication Year","Author","Title","Publication Title","ISBN","ISSN","DOI","Url","Abstract Note","Date","Date Added","Date Modified","Access Date","Pages","Num Pages","Issue","Volume","Number Of Volumes","Journal Abbreviation","Short Title","Series","Series Number","Series Text","Series Title","Publisher","Place","Language","Rights","Type","Archive","Archive Location","Library Catalog","Call Number","Extra","Notes","File Attachments","Link Attachments","Manual Tags","Automatic Tags","Editor","Series Editor","Translator","Contributor","Attorney Agent","Book Author","Cast Member","Commenter","Composer","Cosponsor","Counsel","Interviewer","Producer","Recipient","Reviewed Author","Scriptwriter","Words By","Guest","Number","Edition","Running Time","Scale","Medium","Artwork Size","Filing Date","Application Number","Assignee","Issuing Authority","Country","Meeting Name","Conference Name","Court","References","Reporter","Legal Status","Priority Numbers","Programming Language","Version","System","Code","Code Number","Section","Session","Committee","History","Legislative Body"
"AN64EYK7","journalArticle","2020","Anderson, Joshua A.; Glaser, Jens; Glotzer, Sharon C.","HOOMD-blue: A Python package for high-performance molecular dynamics and hard particle Monte Carlo simulations","Computational Materials Science","","0927-0256","10.1016/j.commatsci.2019.109363","http://www.sciencedirect.com/science/article/pii/S0927025619306627","HOOMD-blue is a particle simulation engine designed for nano- and colloidal-scale molecular dynamics and hard particle Monte Carlo simulations. It has been actively developed since March 2007 and available open source since August 2008. HOOMD-blue is a Python package with a high performance C++/CUDA backend that we built from the ground up for GPU acceleration. The Python interface allows users to combine HOOMD-blue with other packages in the Python ecosystem to create simulation and analysis workflows. We employ software engineering practices to develop, test, maintain, and expand the code.","2020-02-15","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:46","109363","","","173","","Computational Materials Science","HOOMD-blue","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/SBXDKM37/S0927025619306627.html; /Users/Pablo/Zotero/storage/37JTIVNX/Anderson et al. - 2020 - HOOMD-blue A Python package for high-performance .pdf","","","CUDA; GPU; Molecular dynamics; Molecular simulation; Monte Carlo; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"F64X887B","journalArticle","2020","Lima, Felipe Souza; Alves, Victor Manuel Cunha; Araujo, Antonio Carlos Brandao","Metacontrol: A Python based application for self-optimizing control using metamodels","Computers & Chemical Engineering","","0098-1354","10.1016/j.compchemeng.2020.106979","http://www.sciencedirect.com/science/article/pii/S0098135420303355","In this contribution, a detailed description of a Python based application tool that enables fast implementation of the Self-Optimizing Control (SOC) technology with the help of surrogate models is presented. The paper also outlines the potential uses of the Metacontrol (from Metamodel-based self-optimizing control) software through case studies of representative test-bed industrial processes. As a result, an in-depth analysis of Metacontrol from a plantwide control perspective is discussed, together with recommendations for use. The data, examples, and the Metacontrol source code are available for download at https://github.com/feslima/metacontrol.","2020-09-02","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:46","106979","","","140","","Computers & Chemical Engineering","Metacontrol","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/3T7YKWML/S0098135420303355.html","","","Kriging; Plantwide control; Python; Self-Optimizing control; Software","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"VMY9CIQQ","journalArticle","2020","Puoliväli, Tuomas; Palva, Satu; Palva, J. Matias","Influence of multiple hypothesis testing on reproducibility in neuroimaging research: A simulation study and Python-based software","Journal of Neuroscience Methods","","0165-0270","10.1016/j.jneumeth.2020.108654","http://www.sciencedirect.com/science/article/pii/S0165027020300765","Background Reproducibility of research findings has been recently questioned in many fields of science, including psychology and neurosciences. One factor influencing reproducibility is the simultaneous testing of multiple hypotheses, which entails false positive findings unless the analyzed p-values are carefully corrected. While this multiple testing problem is well known and studied, it continues to be both a theoretical and practical problem. New method Here we assess reproducibility in simulated experiments in the context of multiple testing. We consider methods that control either the family-wise error rate (FWER) or false discovery rate (FDR), including techniques based on random field theory (RFT), cluster-mass based permutation testing, and adaptive FDR. Several classical methods are also considered. The performance of these methods is investigated under two different models. Results We found that permutation testing is the most powerful method among the considered approaches to multiple testing, and that grouping hypotheses based on prior knowledge can improve power. We also found that emphasizing primary and follow-up studies equally produced most reproducible outcomes. Comparison with existing method(s) We have extended the use of two-group and separate-classes models for analyzing reproducibility and provide a new open-source software “MultiPy” for multiple hypothesis testing. Conclusions Our simulations suggest that performing strict corrections for multiple testing is not sufficient to improve reproducibility of neuroimaging experiments. The methods are freely available as a Python toolkit “MultiPy” and we aim this study to help in improving statistical data analysis practices and to assist in conducting power and reproducibility analyses for new experiments.","2020-05-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","108654","","","337","","Journal of Neuroscience Methods","Influence of multiple hypothesis testing on reproducibility in neuroimaging research","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/TA4ZAU44/S0165027020300765.html","","","False discovery rate; Family-wise error rate; Multiple hypothesis testing; Neurophysiological data; Python; Reproducibility","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"D3W7SPGN","journalArticle","2019","Pham, Ly Ly; Watford, Sean; Friedman, Katie Paul; Wignall, Jessica; Shapiro, Andrew J.","Python BMDS: A Python interface library and web application for the canonical EPA dose-response modeling software","Reproductive Toxicology","","0890-6238","10.1016/j.reprotox.2019.07.013","http://www.sciencedirect.com/science/article/pii/S0890623819300875","Several primary sources of publicly available, quantitative dose-response data from traditional toxicology study designs relevant to predictive toxicology applications are now available, including the redeveloped U.S. Environmental Protection Agency’s Toxicity Reference Database (ToxRefDB v2.0), the Health Assessment Workspace Collaborative (HAWC), and the National Toxicology Program’s Chemical Program’s Chemical Effects in Biological Systems (CEBS). These resources provide effect level information but modeling these data to a curve may be more informative for predictive toxicology applications. Benchmark Dose Software (BMDS) has been recognized broadly and used for regulatory applications at multiple agencies. However, the current BMDS software was not amenable to modeling large datasets. Herein we describe development and use of a Python package that implements a wrapper around BMDS, a software that requires manual input in the dose-response modeling process (i.e., best-fitting model-selection, reporting, and dose-dropping). In the Python BMDS, users can select the BMDS version, customize model recommendation logic, and export summaries of the resultant BMDS output. Further, using the Python interface, a web-based application programming interface (API) has been developed for easy integration into other software systems, pipelines, or databases. Software utility was demonstrated via modeling nearly 28,000 datasets in ToxRefDB v2.0, re-creation of an existing, published large-scale analysis, and demonstration of usage in software such as CEBS and HAWC. Python BMDS enables rapid-batch processing of dose-response datasets using a modeling software with broad acceptance in the toxicology community, thereby providing an important tool for leveraging the publicly available quantitative toxicology data in a reproducible manner.","2019-12-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","102-108","","","90","","Reproductive Toxicology","Python BMDS","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/EKHBWH7I/S0890623819300875.html","","","Benchmark dose modeling; Dose-Response; Software; Systematic review; toxicology","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"ZNSGD5P8","journalArticle","2020","Valderrama-Gómez, Miguel Á.; Schomer, Rebecca A.; Savageau, Michael A.; Parales, Rebecca E.","TaxisPy: A Python-based software for the quantitative analysis of bacterial chemotaxis","Journal of Microbiological Methods","","0167-7012","10.1016/j.mimet.2020.105918","http://www.sciencedirect.com/science/article/pii/S0167701220300865","Several species of bacteria are able to modify their swimming behavior in response to chemical attractants or repellents. Methods for the quantitative analysis of bacterial chemotaxis such as quantitative capillary assays are tedious and time-consuming. Computer-based video analysis of swimming bacteria represents a valuable method to directly assess their chemotactic response. Even though multiple studies have used this approach to elucidate various aspects of bacterial chemotaxis, to date, no computer software for such analyses is freely available. Here, we introduce TaxisPy, a Python-based software for the quantitative analysis of bacterial chemotaxis. The software comes with an intuitive graphical user interface and can be accessed easily through Docker on any operating system. Using a video of freely swimming cells as input, TaxisPy estimates the culture's average tumbling frequency over time. We demonstrate the utility of the software by assessing the effect of different concentrations of the attractant shikimate on the swimming behavior of Pseudomonas putida F1 and by capturing the adaptation process that Escherichia coli undergoes after being exposed to l-aspartate.","2020-08-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","105918","","","175","","Journal of Microbiological Methods","TaxisPy","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/GRZ9MVCN/S0167701220300865.html; /Users/Pablo/Zotero/storage/9EJFM6NV/Valderrama-Gómez et al. - 2020 - TaxisPy A Python-based software for the quantitat.pdf","","","Cell tracking software; Quantitative chemotaxis; Video analysis software","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"QFBHNG9E","journalArticle","2018","Chen, Zhifei; Chen, Lin; Ma, Wanwangying; Zhou, Xiaoyu; Zhou, Yuming; Xu, Baowen","Understanding metric-based detectable smells in Python software: A comparative study","Information and Software Technology","","0950-5849","10.1016/j.infsof.2017.09.011","http://www.sciencedirect.com/science/article/pii/S0950584916301690","Context Code smells are supposed to cause potential comprehension and maintenance problems in software development. Although code smells are studied in many languages, e.g. Java and C#, there is a lack of technique or tool support addressing code smells in Python. Objective Due to the great differences between Python and static languages, the goal of this study is to define and detect code smells in Python programs and to explore the effects of Python smells on software maintainability. Method In this paper, we introduced ten code smells and established a metric-based detection method with three different filtering strategies to specify metric thresholds (Experience-Based Strategy, Statistics-Based Strategy, and Tuning Machine Strategy). Then, we performed a comparative study to investigate how three detection strategies perform in detecting Python smells and how these smells affect software maintainability with different detection strategies. This study utilized a corpus of 106 Python projects with most stars on GitHub. Results The results showed that: (1) the metric-based detection approach performs well in detecting Python smells and Tuning Machine Strategy achieves the best accuracy; (2) the three detection strategies discover some different smell occurrences, and Long Parameter List and Long Method are more prevalent than other smells; (3) several kinds of code smells are more significantly related to changes or faults in Python modules. Conclusion These findings reveal the key features of Python smells and also provide a guideline for the choice of detection strategy in detecting and analyzing Python smells.","2018-02-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","14-29","","","94","","Information and Software Technology","Understanding metric-based detectable smells in Python software","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/SN7H3ACJ/S0950584916301690.html","","","Code smell; Detection strategy; Python; Software maintainability","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"RNTMF66D","journalArticle","2019","Maghsoudi, Omid Haji; Vahedipour, Annie; Hallowell, Thomas; Spence, Andrew","Open-source Python software for analysis of 3D kinematics from quadrupedal animals","Biomedical Signal Processing and Control","","1746-8094","10.1016/j.bspc.2019.02.024","http://www.sciencedirect.com/science/article/pii/S1746809419300692","Locomotion is key to survival, yet it can be disturbed by injuries, diseases, and aging. Therefore, it is important for researchers in biology, neuroscience, biomechanics, and further afield. Locomotion is frequently quantified using kinematic data, and quadrupeds including rodents are medical model animals used worldwide. Kinematics typically result from the tracking of some landmarks, often joint centers. Although commercially available systems and software exist for the analysis of these kinematic data, they are expensive, often restricted to use with a given apparatus, and may be inextensible. Therefore, there is a need for an open source tool to analyze kinematic data. We present a Python software to address this need. It uses 2D coordinates from four cameras and DLT coefficients from the calibrated volume to generates 3D coordinates [1]. A method is presented to modify the knee and elbow joint positions in 3D. Then, kinematic features are extracted, and they are sorted in a time series format to plot a summary of a study. In addition, we generate videos from the tracked points, 3D reconstruction of the points, showing joint angles for eight joints, the location of animal on the belt, and the animal's speed on the belt. The software has been evaluated by eight trials to show the importance of the work. The 3D reconstruction error, having an average of 7.36 pixels, was calculated for the markers. The presented program can be used in different fields. It will encourage the researchers to design the studies based on their needs because they can change the setup in any required conditions while they can extract the kinematic data.","2019-05-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","364-373","","","51","","Biomedical Signal Processing and Control","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/NYG6ULCW/S1746809419300692.html","","","3D Reconstruction; Biology; Biomechanics; Kinematics; Neuroscience; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"A4GP4TGB","journalArticle","2017","Jin, Yuping","Development of Word Cloud Generator Software Based on Python","Procedia Engineering","","1877-7058","10.1016/j.proeng.2017.01.223","http://www.sciencedirect.com/science/article/pii/S1877705817302230","A word cloud is a kind of weighted list to visualize language or text data, which gains increasing attention and more application opportunities as the big data time approaches. Currently, there has been some online word cloud generators available for users with simple requests, such as repeating the exact phrase, or collecting the text data from a web page. Moreover, most current word cloud generators cannot support characters other than English, which are limited in English-speaking users. There are also packages for programming languages (such as Python and R) to generate word clouds, which requires coding and is not user-friendly. This paper is focusing on developing a graphical user interface (GUI) software to generate word cloud maps with easy operations. The Python programming language is involved and some details are discussed. Finally the software is released for further application.","2017-01-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","788-792","","","174","","Procedia Engineering","","13th Global Congress on Manufacturing and Management Zhengzhou, China 28-30 November, 2016","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/V2ETDEW2/S1877705817302230.html","","","GUI software; Python; Word cloud","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"TT573GAE","journalArticle","2020","Beroiz, M.; Cabral, J. B.; Sanchez, B.","Astroalign: A Python module for astronomical image registration","Astronomy and Computing","","2213-1337","10.1016/j.ascom.2020.100384","http://www.sciencedirect.com/science/article/pii/S221313372030038X","We present an algorithm implemented in the Astroalign Python module for image registration in astronomy. Our module does not rely on WCS information and instead matches three-point asterisms (triangles) on the images to find the most accurate linear transformation between them. It is especially useful in the context of aligning images prior to stacking or performing difference image analysis. Astroalign can match images of different point-spread functions, seeing, and atmospheric conditions.","2020-07-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","100384","","","32","","Astronomy and Computing","Astroalign","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/F9RWZJRB/S221313372030038X.html; /Users/Pablo/Zotero/storage/I9IZHYZX/Beroiz et al. - 2020 - Astroalign A Python module for astronomical image.pdf","","","Astronomy; Image registration; Python package","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"LSCCBEZY","journalArticle","2020","Meunier, David; Pascarella, Annalisa; Altukhov, Dmitrii; Jas, Mainak; Combrisson, Etienne; Lajnef, Tarek; Bertrand-Dubois, Daphné; Hadid, Vanessa; Alamian, Golnoush; Alves, Jordan; Barlaam, Fanny; Saive, Anne-Lise; Dehgan, Arthur; Jerbi, Karim","NeuroPycon: An open-source python toolbox for fast multi-modal and reproducible brain connectivity pipelines","NeuroImage","","1053-8119","10.1016/j.neuroimage.2020.117020","http://www.sciencedirect.com/science/article/pii/S1053811920305061","Recent years have witnessed a massive push towards reproducible research in neuroscience. Unfortunately, this endeavor is often challenged by the large diversity of tools used, project-specific custom code and the difficulty to track all user-defined parameters. NeuroPycon is an open-source multi-modal brain data analysis toolkit which provides Python-based template pipelines for advanced multi-processing of MEG, EEG, functional and anatomical MRI data, with a focus on connectivity and graph theoretical analyses. Importantly, it provides shareable parameter files to facilitate replication of all analysis steps. NeuroPycon is based on the NiPype framework which facilitates data analyses by wrapping many commonly-used neuroimaging software tools into a common Python environment. In other words, rather than being a brain imaging software with is own implementation of standard algorithms for brain signal processing, NeuroPycon seamlessly integrates existing packages (coded in python, Matlab or other languages) into a unified python framework. Importantly, thanks to the multi-threaded processing and computational efficiency afforded by NiPype, NeuroPycon provides an easy option for fast parallel processing, which critical when handling large sets of multi-dimensional brain data. Moreover, its flexible design allows users to easily configure analysis pipelines by connecting distinct nodes to each other. Each node can be a Python-wrapped module, a user-defined function or a well-established tool (e.g. MNE-Python for MEG analysis, Radatools for graph theoretical metrics, etc.). Last but not least, the ability to use NeuroPycon parameter files to fully describe any pipeline is an important feature for reproducibility, as they can be shared and used for easy replication by others. The current implementation of NeuroPycon contains two complementary packages: The first, called ephypype, includes pipelines for electrophysiology analysis and a command-line interface for on the fly pipeline creation. Current implementations allow for MEG/EEG data import, pre-processing and cleaning by automatic removal of ocular and cardiac artefacts, in addition to sensor or source-level connectivity analyses. The second package, called graphpype, is designed to investigate functional connectivity via a wide range of graph-theoretical metrics, including modular partitions. The present article describes the philosophy, architecture, and functionalities of the toolkit and provides illustrative examples through interactive notebooks. NeuroPycon is available for download via github (https://github.com/neuropycon) and the two principal packages are documented online (https://neuropycon.github.io/ephypype/index.html, and https://neuropycon.github.io/graphpype/index.html). Future developments include fusion of multi-modal data (eg. MEG and fMRI or intracranial EEG and fMRI). We hope that the release of NeuroPycon will attract many users and new contributors, and facilitate the efforts of our community towards open source tool sharing and development, as well as scientific reproducibility.","2020-10-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","117020","","","219","","NeuroImage","NeuroPycon","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/LE72FCIJ/S1053811920305061.html; /Users/Pablo/Zotero/storage/TYC6ANGS/Meunier et al. - 2020 - NeuroPycon An open-source python toolbox for fast.pdf","","","Brain imaging; Brain networks; Electroencephalography (EEG); Electrophysiology; Functional connectivity; Graph theory; Magnetoencephalography (MEG); MNE; MRI; Multi-modality; Nipype; Pipelines; Python; Reproducible science; Source reconstruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"NTKWNVPN","journalArticle","2020","Casanova-Arenillas, S.; Rodríguez-Tovar, F. J.; Martínez-Ruiz, F.","Applied ichnology in sedimentary geology: Python scripts as a method to automatize ichnofabric analysis in marine core images","Computers & Geosciences","","0098-3004","10.1016/j.cageo.2020.104407","http://www.sciencedirect.com/science/article/pii/S0098300419310052","Image analysis has been succesfully applied in core research, especially in studies from modern deposits, to enhance the visibility of ichnological features and characterize ichnoassemblages and ichnofabrics. Its application to ichnological research provides useful information for marine core studies, hence sedimentary geology, but also for hydrocarbon exploration. Here we develop a new methodology, using Python programming language, which significantly improve the ichnological analysis. The method automatizes the process of obtaining continuous ichnological information, in this case about the percentage of bioturbation as a key aspect of the ichnofabric approach. The method affords the possibility of automatically generating continuous percentage and other index records using pixel counts in previously treated images. The resulting data sets are easy to correlate with the information usually obtained from cores (e.g., geochemical and mineralogical data). Such an integration of different proxies for to the field of sedimentary geology especially in the use of ichnological analysis, making it easier for the researcher, less time consuming, and more likely to be undertaken. The coding and sharing of open software tools allow for great flexibility, giving researchers in ichnology or related fields the option to implement new features, develop more complex tools to improve the package, and share findings with the scientific community.","2020-03-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","104407","","","136","","Computers & Geosciences","Applied ichnology in sedimentary geology","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/U3IY72ZP/S0098300419310052.html","","","Ichnology; Image analysis; Palaeoenvironment; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"KFST7QDN","journalArticle","2020","Raghavan, S.; Rai, Shanthanu S.; Rohit, M. P.; Chandrasekaran, K.","GPUPeP: Parallel Enzymatic Numerical P System simulator with a Python-based interface","Biosystems","","0303-2647","10.1016/j.biosystems.2020.104186","http://www.sciencedirect.com/science/article/pii/S0303264720300824","Membrane computing is a computational paradigm inspired by the structure and behavior of a living cell. P Systems are the computing devices that are used to realize membrane computing models. Numerous theoretical studies on many variants of P Systems have shown them to be computationally universal. There is a wide range of applications of P Systems from modeling of biological processes to image processing. Among many variants of P Systems, one of the most important is Enzymatic Numerical P System (ENPS). ENPS is a class of P System in which membranes operate on numerical values. To realize the power of ENPS there are a few simulators developed. Each and every simulator has some advantages as well as some disadvantages. Here, a GPU based simulator using Python as a user interaction language is developed. This tool is a completely parallel variant, compatible with a Python based sequential simulator (PeP) which was the first Python based work for ENPS. The developed simulator uses CUDA to interact with GPU and gives the desired speed up, while processing the membranes. There are two important case studies which show the performance of the developed tool to be far better than the other serial simulators.","2020-10-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:47","104186","","","196","","Biosystems","GPUPeP","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/HCFIPJ9S/S0303264720300824.html","","","ENPS simulator; Enzymatic Numerical P System; GPUPeP; Graphical Processing Unit (GPU); Membrane computing; Python-based interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"M5P67IRY","journalArticle","2019","Benítez-Hidalgo, Antonio; Nebro, Antonio J.; García-Nieto, José; Oregi, Izaskun; Del Ser, Javier","jMetalPy: A Python framework for multi-objective optimization with metaheuristics","Swarm and Evolutionary Computation","","2210-6502","10.1016/j.swevo.2019.100598","http://www.sciencedirect.com/science/article/pii/S2210650219301397","This paper describes jMetalPy, an object-oriented Python-based framework for multi-objective optimization with metaheuristic techniques. Building upon our experiences with the well-known jMetal framework, we have developed a new multi-objective optimization software platform aiming not only at replicating the former one in a different programming language, but also at taking advantage of the full feature set of Python, including its facilities for fast prototyping and the large amount of available libraries for data processing, data analysis, data visualization, and high-performance computing. As a result, jMetalPy provides an environment for solving multi-objective optimization problems focused not only on traditional metaheuristics, but also on techniques supporting preference articulation, constrained and dynamic problems, along with a rich set of features related to the automatic generation of statistical data from the results generated, as well as the real-time and interactive visualization of the Pareto front approximations produced by the algorithms. jMetalPy offers additionally support for parallel computing in multicore and cluster systems. We include some use cases to explore the main features of jMetalPy and to illustrate how to work with it.","2019-12-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:48","100598","","","51","","Swarm and Evolutionary Computation","jMetalPy","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/3SEBMZUE/S2210650219301397.html; /Users/Pablo/Zotero/storage/2VTV5N6J/Benítez-Hidalgo et al. - 2019 - jMetalPy A Python framework for multi-objective o.pdf","","","Metaheuristics; Multi-objective optimization; Python; Software framework; Statistical analysis; Visualization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"I6NXZ5WA","journalArticle","2020","Nigam, Yash; Singh, Ghanshyam; Prakash, Arnav","Design of Radial Turbine Parametric Modeller for Turbocharger using Python","Materials Today: Proceedings","","2214-7853","10.1016/j.matpr.2020.03.090","http://www.sciencedirect.com/science/article/pii/S2214785320318654","The time taken for CAD modelling a single component and then building the family of that component consumes a lot of time and is a rigorous task. This problem can be solved by applying parametrisation to the component and make it adapt to changes in the design inputs. The Thermodynamically valid model is based on set of numerical relations. This type of approach requires real experimental data to be legitimate. This method of applying experimental data and back-end usage of thermodynamics equations allows us to create a valid model for industrial usage. This is the objective behind designing of turbocharger turbine parametric modeller. The modeller not only gives direct control of the blade geometry but also provides valuable feedback of the design. This has allowed the user to construct a good initial design before refining it with more computationally expensive methods. The modeller is developed using the python API within the framework of the open source software FreeCAD. The approach to construct a variety of turbo machinery turbines is based partially on state-of-art parametrisation techniques and uses fundamental design variables such as Specific speed, Flow Coefficient and Fluid inlet conditions. The modeller is based on experimental results of turbocharger turbines as well as thermodynamics study of Radial turbines. The outcome of designing the modeller helped in minimizing the time of manual modelling with an automated process","2020-01-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:48","1902-1910","","","22","","Materials Today: Proceedings","","2nd International Conference on Materials Manufacturing and Modelling, ICMMM – 2019, VIT University, Vellore, 29th - 31st March 2019","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/KU9EJY5D/S2214785320318654.html","","","CAD; FCMacro; FreeCAD; Parametric Modeller; Python; Radial Turbine; Turbocharger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"K76KYRER","journalArticle","2020","Tomlinson, J. E.; Arnott, J. H.; Harou, J. J.","A water resource simulator in Python","Environmental Modelling & Software","","1364-8152","10.1016/j.envsoft.2020.104635","http://www.sciencedirect.com/science/article/pii/S1364815219307133","A new generalised water resource network modelling Python library, Pywr, is presented. Given hydrological inflows, Pywr simulates customisable water allocation and operation rules throughout complex multi-purpose managed water systems at each user-defined time-step. The model uses a low-level interface to existing linear programming solvers for fast priority-based optimisation-driven simulation. The library uses an object based system for users to provide input data and record simulation outputs. A novel multi-scenario simulation method provides an almost 4-fold improvement in model run-times and supports calculating robustness metrics across scenarios. A flexible interface to specify multi-objective optimisation formulations as part of a model’s input file is included. These features enable analysts to apply advanced water planning approaches, such as robust decision making and robust optimisation, to real systems. The library is available under the GPLv3 open source licence, includes several examples and a regression test suite.","2020-04-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:48","104635","","","126","","Environmental Modelling & Software","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/4WGJZHZI/S1364815219307133.html","","","Decision making under deep uncertainty; Multi-reservoir operations; Network optimisation; Open source; Python; Water resource simulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"MKPCQ7PS","journalArticle","2019","Cheatwood, Loren; Cote, Peter; Perygin, Donna","A python analysis of mass loss related to thermogravimetric analysis of tetrachloroethylene-methyl methacrylate copolymers","Chemical Data Collections","","2405-8300","10.1016/j.cdc.2019.100304","http://www.sciencedirect.com/science/article/pii/S2405830019301818","A tetrachloroethylene/methyl methacrylate copolymer matrix was synthesized at incremental methyl methacrylate proportions. A mass-loss event was observed when Thermogravimetric Analysis (TGA) was performed on the resulting solid polymers. A Python analysis in Jupyter Notebooks was developed to analyze each sigmoidal curve generated by thermogravimetric analysis. This algorithm selects a data range, performs a regression analysis on this range, calculates the line intercepts, finds the nearest neighbor on the mass-loss plot, then calculates the rate of mass-loss. The TGA mass-loss was observed to be inversely proportional to the concentration of methyl methacrylate.","2019-12-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:48","100304","","","24","","Chemical Data Collections","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/2ZQ7ZUED/S2405830019301818.html","","","Methyl methacrylate; Python; Tetrachloroethylene; TGA","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"AKKA829K","journalArticle","2018","Jadoul, Yannick; Thompson, Bill; de Boer, Bart","Introducing Parselmouth: A Python interface to Praat","Journal of Phonetics","","0095-4470","10.1016/j.wocn.2018.07.001","http://www.sciencedirect.com/science/article/pii/S0095447017301389","This paper introduces Parselmouth, an open-source Python library that facilitates access to core functionality of Praat in Python, in an efficient and programmer-friendly way. We introduce and motivate the package, and present simple usage examples. Specifically, we focus on applications in data visualisation, file manipulation, audio manipulation, statistical analysis, and integration of Parselmouth into a Python-based experimental design for automated, in-the-loop manipulation of acoustic data. Parselmouth is available at https://github.com/YannickJadoul/Parselmouth.","2018-11-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:48","1-15","","","71","","Journal of Phonetics","Introducing Parselmouth","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/3LL4WEYR/S0095447017301389.html; /Users/Pablo/Zotero/storage/CANA5KBN/Jadoul et al. - 2018 - Introducing Parselmouth A Python interface to Pra.pdf","","","Acoustics; Data analysis; Phonetics; Praat; Python; Software","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"FM2J5DRK","journalArticle","2019","Jaskolka, Karina; Seiler, Jürgen; Beyer, Frank; Kaup, André","A Python-based laboratory course for image and video signal processing on embedded systems","Heliyon","","2405-8440","10.1016/j.heliyon.2019.e02560","http://www.sciencedirect.com/science/article/pii/S2405844019362206","The usage of embedded systems is omnipresent in our everyday life, e.g., in smartphones, tablets, or automotive devices. These devices are able to deal with challenging image processing tasks like real-time detection of faces or high dynamic range imaging. However, the size and computational power of an embedded system is a limiting demand. To help students understanding these challenges, a new lab course ""Image and Video Signal Processing on Embedded Systems"" has been developed and is presented in this paper. The Raspberry Pi 3 Model B and the open source programming language Python have been chosen, because of low hardware cost and free availability of the programming language. In this lab course the students learn handling both hard- and software, Python as an alternative to MATLAB, the image signal processing path, and how to develop an embedded image processing system, from the idea to implementation and debugging. At the beginning of the lab course an introduction to Python and the Raspberry Pi is given. After that, various experiments like the implementation of a corner detector and creation of a panorama image are prepared in the lab course. Students participating in the lab course develop a profound understanding of embedded image and video processing algorithms which is verified by comparing questionnaires at the beginning and the end of the lab course. Moreover, compared to a peer group attending an accompanying lecture with exercises, students having participated in this lab course outperform their peer group in the exam for the lecture by 0.5 on a five-point scale.","2019-10-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:48","e02560","","10","5","","Heliyon","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/J2MNENJC/S2405844019362206.html; /Users/Pablo/Zotero/storage/NT9LSY9C/Jaskolka et al. - 2019 - A Python-based laboratory course for image and vid.pdf","","","Computer science; Education; Embedded system; Image and video signal processing; Laboratory course; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"Y7N6TZ4F","journalArticle","2019","Yilmaz, Murat","Easy pre/post-processing of finite elements with custom symbolic-objects: A self-expressive Python interface","Computers & Structures","","0045-7949","10.1016/j.compstruc.2019.07.002","http://www.sciencedirect.com/science/article/pii/S0045794918316341","This study presents an experimental object-oriented (OO) application-programming interface (API) that aims to facilitate the programming of custom pre/post-processing modules for finite element (FE) developers/researchers. The proposed API does not claim to be a full-fledged FE pre/post-processor, but aims to provide an alternative perspective in FE-software design. In this context, a variety of programming techniques are provided to enable the user to develop custom code with concise and descriptive statements. The API is presented in the form of several symbolic-objects in which the very core FE programming operations are abstracted by utilizing metaprogramming and advanced Python language features in an effort to enable the user benefit from these symbols in his/her custom pre/post-processing modules automatically. The examples given show that, this approach results in a concise and self-expressive data-representation layer that can be used flexibly in the processing of different FE discretization schemes.","2019-10-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:48","82-97","","","222","","Computers & Structures","Easy pre/post-processing of finite elements with custom symbolic-objects","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/CMFS9ZIB/S0045794918316341.html","","","Finite element; Object–oriented; Pre/post-processing; Programming; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"PF3YITHK","journalArticle","2020","Herring, Patrick; Balaji Gopal, Chirranjeevi; Aykol, Muratahan; Montoya, Joseph H.; Anapolsky, Abraham; Attia, Peter M.; Gent, William; Hummelshøj, Jens S.; Hung, Linda; Kwon, Ha-Kyung; Moore, Patrick; Schweigert, Daniel; Severson, Kristen A.; Suram, Santosh; Yang, Zi; Braatz, Richard D.; Storey, Brian D.","BEEP: A Python library for Battery Evaluation and Early Prediction","SoftwareX","","2352-7110","10.1016/j.softx.2020.100506","http://www.sciencedirect.com/science/article/pii/S2352711020300492","Battery evaluation and early prediction software package (BEEP) provides an open-source Python-based framework for the management and processing of high-throughput battery cycling data-streams. BEEPs features include file-system based organization of raw cycling data and metadata received from cell testing equipment, validation protocols that ensure the integrity of such data, parsing and structuring of data into Python-objects ready for analytics, featurization of structured cycling data to serve as input for machine-learning, and end-to-end examples that use processed data for anomaly detection and featurized data to train early-prediction models for cycle life. BEEP is developed in response to the software and expertise gap between cell-level battery testing and data-driven battery development.","2020-01-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:49","100506","","","11","","SoftwareX","BEEP","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/RLMK7X8V/S2352711020300492.html","","","Battery; Cycling experiments; Data management; Machine-learning; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"DCHGED6L","journalArticle","2020","Eschle, Jonas; Puig Navarro, Albert; Silva Coutinho, Rafael; Serra, Nicola","zfit: Scalable pythonic fitting","SoftwareX","","2352-7110","10.1016/j.softx.2020.100508","http://www.sciencedirect.com/science/article/pii/S2352711019303851","Statistical modeling is a key element in many scientific fields and especially in High-Energy Physics (HEP) analysis. The standard framework to perform this task in HEP is the C++ ROOT/RooFit toolkit; with Python bindings that are only loosely integrated into the scientific Python ecosystem. In this paper, zfit, a new alternative to RooFit written in pure Python, is presented. Most of all, zfit provides a well defined high-level API and workflow for advanced model building and fitting, together with an implementation on top of TensorFlow, allowing a transparent usage of CPUs and GPUs. It is designed to be extendable in a very simple fashion, allowing the usage of cutting-edge developments from the scientific Python ecosystem in a transparent way. The main features of zfit are introduced, and its extension to data analysis, especially in the context of HEP experiments, is discussed.","2020-01-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:49","100508","","","11","","SoftwareX","zfit","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/ZIR8LTNV/S2352711019303851.html; /Users/Pablo/Zotero/storage/D6IFP6ZY/Eschle et al. - 2020 - zfit Scalable pythonic fitting.pdf","","","Data analysis; Model fitting; Python; Statistical inference","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"ZJCL849J","journalArticle","2021","Nedelcu, Dorian; Gillich, Gilbert-Rainer","A structural health monitoring Python code to detect small changes in frequencies","Mechanical Systems and Signal Processing","","0888-3270","10.1016/j.ymssp.2020.107087","http://www.sciencedirect.com/science/article/pii/S0888327020304738","Observing the occurrence of cracks in the early stage remains a challenge, as changes in the modal parameters produced by these cracks are small. This remark is also valid for deeper cracks because in most experiments it is possible to acquire short signals, which ensure a coarse frequency resolution. Therefore, the accurate estimation of frequency by standard methods is impossible. To improve frequency readability, we designed an algorithm that we implemented in the PyFEST application, written in Python programming language. It allows a fast and accurate calculation of harmonic components of a signal. PyFEST is based on an original signal post-processing algorithm, which consists of overlapping spectra for the signal iteratively cropped. The different signal lengths ensure different positions of the spectral lines in the overlapped spectrum. Therefore, adding numerous spectral lines of different positions in the overlapped spectrum we obtain a dense spectrum with significantly increased frequency resolution. From this spectrum, we select the three magnitudes of the individual spectra found in the frequency range of interest. By interpolation, we attain the maximum that has usually an inter-line position representing the estimated frequency. To this frequency, we apply a correction term that is known a priori and so we improve the frequency estimation. To test the reliability of PyFEST, we provide examples for signals generated with known frequencies that have one or more harmonic components. For signals containing one harmonic component the exact frequency was found, while for signals with multiple components the error are less than 0.1%. The frequency change is exactly estimated for both types of signals. Because PyFEST allows observing minor frequency changes, so we succeed to localize the crack position and severity in real beams with high precision.","2021-01-15","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:49","107087","","","147","","Mechanical Systems and Signal Processing","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/AMFXCCFB/S0888327020304738.html","","","Algorithm; Damage detection; Discrete Fourier Transform; Frequency estimation; Python language","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"MJNYTCMJ","journalArticle","2020","Farrens, S.; Grigis, A.; El Gueddari, L.; Ramzi, Z.; G.r., Chaithya; Starck, S.; Sarthou, B.; Cherkaoui, H.; Ciuciu, P.; Starck, J. -L.","PySAP: Python Sparse Data Analysis Package for multidisciplinary image processing","Astronomy and Computing","","2213-1337","10.1016/j.ascom.2020.100402","http://www.sciencedirect.com/science/article/pii/S2213133720300561","We present the open-source image processing software package PySAP (Python Sparse data Analysis Package) developed for the COmpressed Sensing for Magnetic resonance Imaging and Cosmology (COSMIC) project. This package provides a set of flexible tools that can be applied to a variety of compressed sensing and image reconstruction problems in various research domains. In particular, PySAP offers fast wavelet transforms and a range of integrated optimisation algorithms. In this paper we present the features available in PySAP and provide practical demonstrations on astrophysical and magnetic resonance imaging data.","2020-07-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:49","100402","","","32","","Astronomy and Computing","PySAP","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/PX77H4SS/S2213133720300561.html; /Users/Pablo/Zotero/storage/T49THDJ7/Farrens et al. - 2020 - PySAP Python Sparse Data Analysis Package for mul.pdf","","","Convex optimisation; Image processing; Open-source software; Reconstruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"NMA5CBI9","journalArticle","2019","Volk, John M.; Turner, Matthew A.","PRMS-Python: A Python framework for programmatic PRMS modeling and access to its data structures","Environmental Modelling & Software","","1364-8152","10.1016/j.envsoft.2019.01.006","http://www.sciencedirect.com/science/article/pii/S1364815218308004","A persistent problem in numerical hydrologic modeling, is tracking provenance or how particular data came to be. With multiple modules available for individual flux parameterizations and over 100 parameters, the Precipitation-Runoff Modeling System (PRMS) is a perfect example of why it is such a challenge to track the history of input and output of complex models. We present a lightweight, object-oriented Python framework with programmatic tools for management and visualization using PRMS as an example platform. Within this framework, a modeler can write intuitive code for a myriad of basic or advanced applications. The framework also includes methods that, for example, apply systematic or stochastic parameter modifications while simultaneously saving metadata on which parameters were varied and with what improvement in performance. We include a case study that uses built in Monte Carlo parameter resampling for global sensitivity analysis of eight PRMS parameters related to estimation of shortwave solar radiation.","2019-04-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:49","152-165","","","114","","Environmental Modelling & Software","PRMS-Python","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/NHT595JA/S1364815218308004.html","","","Framework; Parameter sensitivity; PAWN; PRMS; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"3RKGW6DK","journalArticle","2019","Körber, M.; Frommel, C.","Automated Planning and Optimization of a Draping Processes Within the CATIA Environment Using a Python Software Tool","Procedia Manufacturing","","2351-9789","10.1016/j.promfg.2020.01.113","http://www.sciencedirect.com/science/article/pii/S2351978920301141","This thesis deals with the challenge of the virtual generation and optimization of complex production processes within the Computer Aided Design (CAD) environment CATIA V5. A flexible robot end-effector –(Modular Gripper) is used for automated draping process which serves as an example application. Previous experiments have shown that manually selecting all process parameters that are needed to adapt the grippers geometry is a very time consuming and inaccurate method. For this reason, a tool was developed that is able to determine or optimize the end-effector specific process parameters offline. Since all existing models are available in the CATIA environment, the goal was to perform this optimization process within the same environment. The software tool is based on a hierarchical architecture where all calculations and logic optimization processes are processed in the programming language Python. All commands in the CATIA environment are performed with the help of small, modularized CATScript programs that are able to interact with main Python algorithms. This work is intended to lead to a virtual optimization process that can be universally applied to complex manufacturing processes. Since it is based on a Python framework that is able to interact directly with the CATIA environment, it is flexible enough so that it can be adapted to further processes.","2019-01-01","2020-08-18 16:37:49","2020-08-18 16:37:49","2020-08-18 16:37:49","808-815","","","38","","Procedia Manufacturing","","29th International Conference on Flexible Automation and Intelligent Manufacturing ( FAIM 2019), June 24-28, 2019, Limerick, Ireland, Beyond Industry 4.0: Industrial Advances, Engineering Education and Intelligent Manufacturing","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/878VIRC4/S2351978920301141.html","","","automated preforming; autonomous manufacturing; digital twin; offline programming; optimization; virtual planning","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"CA3L272Z","journalArticle","2020","Presannan, Anandhu; Diwakar, Shyam","ReConvPy: Modeling Local Field Potentials of Cerebellum Granule Neurons using Repetitive Convolutions in Python","Procedia Computer Science","","1877-0509","10.1016/j.procs.2020.04.043","http://www.sciencedirect.com/science/article/pii/S1877050920310097","One of the main goals in today’s computational neuroscience laboratories is the ability to construct ensemble population responses from bottom-up reconstructions that involve computationally-detailed single neuron models. As a modeler’s tool, local field potentials are population responses that abstract information from an ensemble of neurons connecting single neuron response to a circuit function. In this paper, we have developed a new implementation of reproducing the local field potentials (LFP) using the repetitive convolution technique in Python adding on to the tool set library already developed for mathematically modeling cerebellar local field potentials. The LFP tool accurately reproduces the in vitro negative N2a, N2b waves and in vivo T and C waves generated by 200 to 700 cerebellar granule neurons and replicates pharmacological changes and induced plasticity properties.","2020-01-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:24","410-417","","","171","","Procedia Computer Science","ReConvPy","Third International Conference on Computing and Network Communications (CoCoNet'19)","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/Q3EM2YRL/S1877050920310097.html","","","cerebellum; computational neuroscience; local field potentials; neuronal biophysics; python; repetitive convolution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"LHVLY7HK","journalArticle","2020","Hadjidoukas, P. E.; Bartezzaghi, A.; Scheidegger, F.; Istrate, R.; Bekas, C.; Malossi, A. C. I.","torcpy: Supporting task parallelism in Python","SoftwareX","","2352-7110","10.1016/j.softx.2020.100517","http://www.sciencedirect.com/science/article/pii/S2352711020300091","Task-based parallelism has been established as one of the main forms of code parallelization, where asynchronous tasks are launched and distributed across the processing units of a local machine, a cluster or a supercomputer. The tasks can be either completely decoupled, corresponding to a set of independent jobs, or be part of an iterative algorithm where the task results are processed and drive the next step. Typical use cases include the application of the same function to different data, parametric searches and algorithms used in numerical optimization and Bayesian uncertainty quantification. In this work, we introduce torcpy, a platform-agnostic adaptive load balancing library that orchestrates the asynchronous execution of tasks, expressed as callables with arguments, on both shared and distributed memory platforms. The library is implemented on top of MPI and multithreading and provides lightweight support for nested loops and map functions. Experimental results using representative applications demonstrate the flexibility and efficiency of the proposed Python package.","2020-07-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:24","100517","","","12","","SoftwareX","torcpy","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/QR7X6JDT/S2352711020300091.html","","","MPI; Multithreading; Parallelism; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"E8S4STUR","journalArticle","2020","Yamanee-Nolin, Mikael; Andersson, Niklas; Nilsson, Bernt; Max-Hansen, Mark; Pajalic, Oleg","Trajectory optimization of an oscillating industrial two-stage evaporator utilizing a Python-Aspen Plus Dynamics toolchain","Chemical Engineering Research and Design","","0263-8762","10.1016/j.cherd.2019.12.015","http://www.sciencedirect.com/science/article/pii/S0263876219305908","Evaporators are integral parts of many separation processes across production industries, and they need to be well understood in order to be operated well, thereby enabling high resource-efficiency and productivity. In a previous investigation, the effects of disturbing oscillations in a two-stage evaporator system were quantified. In the current study, these oscillations were reduced through trajectory optimization using steam consumption as a temporally discretized decision variable, taking advantage of a dynamic process flowsheet model in Aspen Plus Dynamics (APD) employed as if it were a black-box model. The optimization was performed utilizing a Python-APD toolchain with the SciPy implementation of COBYLA. The optimal trajectory was able to successfully reduce the objective function value (including the product stream mass flow variance and a bang-bang penalty on the trajectory itself) to slightly less than 0.3 % of that of the nominal case, in which a time-invariant steam consumption was employed. This in turn grants opportunities to increase throughput of the process, leading to significant financial gains.","2020-03-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:24","12-17","","","155","","Chemical Engineering Research and Design","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/KKCUXRP6/S0263876219305908.html","","","Aspen Plus Dynamics; Derivative-free optimization; Dynamic optimization; Evaporator system; Oscillations; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"H6RW9Y6V","journalArticle","2019","Volk, John M.; Turner, Matthew A.","PRMS-Python: A Python framework for programmatic PRMS modeling and access to its data structures","Environmental Modelling & Software","","1364-8152","10.1016/j.envsoft.2019.01.006","http://www.sciencedirect.com/science/article/pii/S1364815218308004","A persistent problem in numerical hydrologic modeling, is tracking provenance or how particular data came to be. With multiple modules available for individual flux parameterizations and over 100 parameters, the Precipitation-Runoff Modeling System (PRMS) is a perfect example of why it is such a challenge to track the history of input and output of complex models. We present a lightweight, object-oriented Python framework with programmatic tools for management and visualization using PRMS as an example platform. Within this framework, a modeler can write intuitive code for a myriad of basic or advanced applications. The framework also includes methods that, for example, apply systematic or stochastic parameter modifications while simultaneously saving metadata on which parameters were varied and with what improvement in performance. We include a case study that uses built in Monte Carlo parameter resampling for global sensitivity analysis of eight PRMS parameters related to estimation of shortwave solar radiation.","2019-04-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:24","152-165","","","114","","Environmental Modelling & Software","PRMS-Python","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/WK7I7E5F/S1364815218308004.html","","","Framework; Parameter sensitivity; PAWN; PRMS; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"GXVUQN6W","journalArticle","2018","Knox, Stephen; Meier, Philipp; Yoon, Jim; Harou, Julien J.","A python framework for multi-agent simulation of networked resource systems","Environmental Modelling & Software","","1364-8152","10.1016/j.envsoft.2018.01.019","http://www.sciencedirect.com/science/article/pii/S1364815217312136","Modelling managed resource systems can involve the integration of multiple software modules into a single codebase. These modules are often written by non-software specialists, using heterogeneous terminologies and modelling approaches. One approach to model integration is to use a central structure to which each external module connects. This common interface acts as an agreed mode of communication for all contributors. We propose the Python Network Simulation (Pynsim) Framework, an open-source library for building simulation models of networked systems. Pynsim's central structure is a network, but it also supports non-physical entities like organisational hierarchies. We present two case studies using Pynsim which demonstrate how its use can lead to flexible and maintainable simulation models. First is a multi-agent model simulating the hydrologic and human components of Jordan's water system. The second uses a multi-objective evolutionary algorithm to identify the best locations for new run-of-river power plants in Switzerland.","2018-05-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:25","16-28","","","103","","Environmental Modelling & Software","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/QD67HG5N/S1364815217312136.html; /Users/Pablo/Zotero/storage/Q8R9Y22D/Knox et al. - 2018 - A python framework for multi-agent simulation of n.pdf","","","Modelling framework; Open source; Python; Simulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"A45C7UBP","journalArticle","2020","Zhang, Yifei; Cao, Jia","GSimPy: A Python package for measuring group similarity","SoftwareX","","2352-7110","10.1016/j.softx.2020.100526","http://www.sciencedirect.com/science/article/pii/S2352711019303590","In this paper, we present an open source Python package—GSimPy, which can measure similarity between items and groups that satisfy GIE model. GIE model is a Group–Item–Element model commonly used in many fields such as biology. GSimPy can help manage scientists’ customized data and provide a random model as a reference to evaluate similarity results. Visualization tools are also supported to make analysis results more interpretable.","2020-07-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:25","100526","","","12","","SoftwareX","GSimPy","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/R9NV9SZ2/S2352711019303590.html","","","Group similarity; Group–Item–Element Model; Python package","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"8TC745QI","journalArticle","2020","Ravasi, Matteo; Vasconcelos, Ivan","PyLops—A linear-operator Python library for scalable algebra and optimization","SoftwareX","","2352-7110","10.1016/j.softx.2019.100361","http://www.sciencedirect.com/science/article/pii/S2352711019301086","Linear operators and optimization are at the core of many algorithms used in signal and image processing, remote sensing, and inverse problems. For small to medium-scale problems, existing software packages (e.g., MATLAB, Python NumPy and SciPy) allow to explicitly build dense or sparse matrices and perform algebraic operations with syntax that closely represents their equivalent mathematical notation. However, many real-application, large-scale operators do not lend themselves to explicit matrix representations, usually forcing practitioners to forego the convenient linear-algebra syntax available for their explicit-matrix counterparts. PyLops is an open-source Python library providing a flexible framework for the creation and combination of so-called linear operators, class-based entities that represent matrices and inherit their associated syntax convenience, but do not rely on the creation of explicit matrices. We show that PyLops operators can dramatically reduce the memory load and CPU computations compared to explicit-matrix calculations, while still allowing users to seamlessly use their existing knowledge of compact matrix-based syntax that scales to any problem size because no explicit matrices are required.","2020-01-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:26","100361","","","11","","SoftwareX","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/WEHWI8QI/S2352711019301086.html; /Users/Pablo/Zotero/storage/PU2XQRE9/Ravasi and Vasconcelos - 2020 - PyLops—A linear-operator Python library for scalab.pdf","","","Inverse problems; Linear algebra; Linear operator; Optimization; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"IEQX6RCD","journalArticle","2020","Moshiri, N.","TreeSwift: A massively scalable Python tree package","SoftwareX","","2352-7110","10.1016/j.softx.2020.100436","http://www.sciencedirect.com/science/article/pii/S2352711019300767","Phylogenetic trees are essential to evolutionary biology, and numerous methods exist that attempt to extract phylogenetic information applicable to a wide range of disciplines, such as epidemiology and metagenomics. Currently, the three main Python packages for trees are Bio.Phylo, DendroPy, and the ETE Toolkit, but as dataset sizes grow, parsing and manipulating ultra-large trees becomes impractical for these tools. To address this issue, we present TreeSwift, a user-friendly and massively scalable Python package for traversing and manipulating trees that is ideal for algorithms performed on ultra-large trees.","2020-01-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:26","100436","","","11","","SoftwareX","TreeSwift","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/LMEHLRWD/S2352711019300767.html","","","Phylogenetics; Python; Scalable; Tree traversal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"D8ZKKMJH","journalArticle","2019","Shende, Ravindra; Gupta, Gourav; Macherla, Subash","Determination of an inflection point for a dosimetric analysis of unflattened beam using the first principle of derivatives by python code programming","Reports of Practical Oncology & Radiotherapy","","1507-1367","10.1016/j.rpor.2019.07.009","http://www.sciencedirect.com/science/article/pii/S1507136719300598","Background Practice of Unflattened or Flattening filter free (FFF) beam has become the high dose standard in radiotherapy (RT), such as stereotactic radio-surgery (SRS) and stereotactic radiotherapy (SRT). The removal of a flattening filter (FF) from the path of a photon beam alters the characteristics of FFF beam. Since the conventional route for dosimetric analysis of FF beam cannot be applied to FFF beam, the procedure of analyzing beam characteristics for FFF beam based on inflection points (IPs) is used. IP is a point where the concavity change observed corresponds to its change in sign (±) of the second derivative. Aim The objective of the study is to determine IPs for dosimetric analysis of the FFF beam profile. Methods and materials In this study, IPs are determined through the python code programming based on the mathematical first principle of the derivative. They are compared with IPs estimated by the conventional graphical manual method using Microsoft Excel (MS). IPs and their dependent dosimetric parameters determined by both mathematical and graphical manual methods are compared. Result Percentage differences between the IPs determined by both methods, for 6MVFFF inline and crossline beam profile are found to be 2.7% and 0.8% respectively. Similarly, the average penumbra differences for 6MVFFF inline and crossline beam profile are found to be 0.15mm and 0.9mm, respectively. However, differences in the field width between both methods are found insignificant. Conclusion Graphical manual method is very time-consuming, tedious and user dependent. However, the mathematical method through python code programming is more precise, faster and independent of individual users.","2019-09-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:26","432-442","","5","24","","Reports of Practical Oncology & Radiotherapy","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/QLPHH556/S1507136719300598.html","","","Flattening filter free beam; Inflection point; Python programming; Radiation dosimetry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"8JLH8GIN","journalArticle","2020","Brashears, J. Alex; Fokidis, H. Bobby; DeNardo, Dale F.","Fear-based aggression and its relationship to corticosterone responsiveness in three species of python","General and Comparative Endocrinology","","0016-6480","10.1016/j.ygcen.2019.113374","http://www.sciencedirect.com/science/article/pii/S0016648019302850","It has long been known that even closely related species can vary in their antipredator behavior, and in the last two decades there has been mounting interest in how these differences might relate to the hormonal stress response. We tested the relationship between fear-based aggression, a form of antipredator behavior, and plasma corticosterone levels in three species of python [Children’s Python (Antaresia childreni), Ball Python (Python regius), Bismarck Ring Python (Bothrochilus boa)]. We recorded the amount of striking in response to perturbation before and after a controlled, stressful confinement. We also measured plasma corticosterone levels prior to confinement, after confinement, and after confinement plus an adrenocorticotropin hormone (ACTH) injection, the later to induce a maximal corticosterone response. We performed among species analyses using two mixed models, and we determined between individual variance within each species to estimate repeatability. Bismarck Ring Pythons struck more than either Ball Pythons or Children’s Pythons, and Ball Pythons had a suppressed corticosterone response compared to Children’s and Bismarck Ring Pythons. Thus, mean species fear-based aggression correlated with species level differences in corticosterone profile. We also found evidence suggesting behaviors are repeatable within individuals. Our results point to a need for further exploration of aggression, anti-predator behavior, and corticosterone profile.","2020-04-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:26","113374","","","289","","General and Comparative Endocrinology","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/3BFA3PYX/S0016648019302850.html","","","Animal temperament; Defensive behavior; Glucocorticoid; Reptile; Snake; Stress coping styles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"JYQNV8RN","journalArticle","2018","Pocasangre, Carlos; Fujimitsu, Yasuhiro","A Python-based stochastic library for assessing geothermal power potential using the volumetric method in a liquid-dominated reservoir","Geothermics","","0375-6505","10.1016/j.geothermics.2018.07.009","http://www.sciencedirect.com/science/article/pii/S0375650518301135","We present a Python-based stochastic library for assessing geothermal power potential using the volumetric method in a liquid-dominated reservoir. The specific aims of this study are to use the volumetric method, “heat in place,” to estimate electrical energy production ability from a geothermal liquid-dominated reservoir, and to build a Python-based stochastic library with useful methods for running such simulations. Although licensed software is available, we selected the open-source programming language Python for this task. The Geothermal Power Potential Evaluation stochastic library (GPPeval) is structured as three essential objects including a geothermal power plant module, a Monte Carlo simulation module, and a tools module. In this study, we use hot spring data from the municipality of Nombre de Jesus, El Salvador, to demonstrate how the GPPeval can be used to assess geothermal power potential. Frequency distribution results from the stochastic simulation shows that this area could initially support a 9.16-MWe power plant for 25 years, with a possible expansion to 17.1 MWe. Further investigations into the geothermal power potential will be conducted to validate the new data.","2018-11-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:26","164-176","","","76","","Geothermics","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/DBU4G8Q8/S0375650518301135.html","","","El Salvador; Geothermal power potential; Monte Carlo; Open-source; Python; Volumetric method","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"SXVVWKIC","journalArticle","2017","Fichera, Loris; Messina, Fabrizio; Pappalardo, Giuseppe; Santoro, Corrado","A Python framework for programming autonomous robots using a declarative approach","Science of Computer Programming","","0167-6423","10.1016/j.scico.2017.01.003","http://www.sciencedirect.com/science/article/pii/S0167642317300242","This paper describes PROFETA (standing for Python RObotic Framework for dEsigning sTrAtegies), a framework for the programming of autonomous robots based on the Belief-Desire-Intention (BDI) software model. PROFETA is inspired by AgentSpeak(L), a formal language for the creation of BDI software agents. The framework is implemented in Python, and utilizes the metaprogramming capabilities offered by this language to implement the operational semantics of AgentSpeak(L). PROFETA provides a flexible environment offering both traditional object-oriented imperative constructs and declarative constructs, enabling the definition of a robot's high-level behavior in a simple, natural way. The contributions of this paper, in the area of software design and development, are: (i) a methodology, equipped with suitable technical solutions, to extend the Python programming language with AgentSpeak(L) declarative constructs; and (ii) a unified environment enabling software components for robots to be developed using a single language (Python) within a single runtime environment (the Python virtual machine). A comparison between PROFETA and other similar frameworks is provided, illustrating common aspects and key differences.","2017-06-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:26","36-55","","","139","","Science of Computer Programming","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/HYA8LFB9/S0167642317300242.html","","","AgentSpeak(L); BDI model; Operator overloading; Python; Robot programming","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"CYEJL4T9","journalArticle","2020","Höllmer, Philipp; Qin, Liang; Faulkner, Michael F.; Maggs, A. C.; Krauth, Werner","JeLLyFysh-Version1.0 — a Python application for all-atom event-chain Monte Carlo","Computer Physics Communications","","0010-4655","10.1016/j.cpc.2020.107168","http://www.sciencedirect.com/science/article/pii/S0010465520300254","We present JeLLyFysh-Version1.0, an open-source Python application for event-chain Monte Carlo (ECMC), an event-driven irreversible Markov-chain Monte Carlo algorithm for classical N-body simulations in statistical mechanics, biophysics and electrochemistry. The application’s architecture mirrors the mathematical formulation of ECMC. Local potentials, long-range Coulomb interactions and multi-body bending potentials are covered, as well as bounding potentials and cell systems including the cell-veto algorithm. Configuration files illustrate a number of specific implementations for interacting atoms, dipoles, and water molecules. Program summary Program title: JeLLyFysh-Version1.0 Program files doi: http://dx.doi.org/10.17632/srrjt9493d.1 Licensing provisions: GNU GPLv3 Programming language: Python 3 Nature of problem: Event-chain Monte Carlo (ECMC) simulations for classical N-body simulations in statistical mechanics, biophysics and electrochemistry. Solution method: Event-driven irreversible Markov-chain Monte Carlo algorithm. Additional comments: The application is complete with sample configuration files, docstrings, and unittests. The manuscript is accompanied by a frozen copy of JeLLyFysh-Version1.0 that is made publicly available on GitHub (repository https://github.com/jellyfysh/JeLLyFysh, commit hash d453d497256e7270e8babc8e04d20fb6d847dee4).","2020-08-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:27","107168","","","253","","Computer Physics Communications","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/QNBYWHAI/S0010465520300254.html; /Users/Pablo/Zotero/storage/XXT2ATKP/Höllmer et al. - 2020 - JeLLyFysh-Version1.0 — a Python application for al.pdf","","","Event-chain algorithm; Irreversible Markov chain; Long-range potentials; Monte Carlo algorithm; N-body simulation; Python application","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"25EFT8CR","journalArticle","2017","Sarradj, Ennes; Herold, Gert","A Python framework for microphone array data processing","Applied Acoustics","","0003-682X","10.1016/j.apacoust.2016.09.015","http://www.sciencedirect.com/science/article/pii/S0003682X16302808","Acoular is an open source object-oriented Python package for microphone array data processing. It supports various methods for sound source characterization and mapping. The background of these methods, which rely on synchronously captured microphone signals, is shortly introduced, and the requirements for a software that implements these methods are discussed. The object-oriented design based on Python allows for easy-to-use scripting and graphical user interfaces, the practical combination with other data handling and scientific computing libraries, and the possibility to extend the software by implementing new processing methods with minimal effort. Built-in result caching and fast C++ based parallelized implementation of core routines is explained. Together with data handling procedures that can accommodate the huge amounts of measured data needed, this makes the application of Acoular to industrial-scale problems possible. Basic examples of Acoular use and extension are given.","2017-01-15","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:27","50-58","","","116","","Applied Acoustics","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/9PW55T2J/S0003682X16302808.html","","","Beamforming; Microphone array; Python; Software","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"EX6UM7P6","journalArticle","2020","Lym, Jonathan; Wittreich, Gerhard R.; Vlachos, Dionisios G.","A Python Multiscale Thermochemistry Toolbox (pMuTT) for thermochemical and kinetic parameter estimation","Computer Physics Communications","","0010-4655","10.1016/j.cpc.2019.106864","http://www.sciencedirect.com/science/article/pii/S0010465519302516","Estimating the thermochemical properties of systems is important in many fields such as material science and catalysis. The Python multiscale thermochemistry toolbox (pMuTT) is a Python software library developed to streamline the conversion of ab-initio data to thermochemical properties using statistical mechanics, to perform thermodynamic analysis, and to create input files for kinetic modeling software. Its open-source implementation in Python leverages existing scientific codes, encourages users to write scripts for their needs, and allows the code to be expanded easily. The core classes developed include a statistical mechanical model in which energy modes can be included or excluded to suit the application, empirical models for rapid thermodynamic property estimation, and a reaction model to calculate kinetic parameters or changes in thermodynamic properties. In addition, pMuTT supports other features, such as Brønsted–Evans–Polanyi (BEP) relationships, coverage effects, and ab-initio phase diagrams. Program summary Program title: pMuTT Program files doi: http://dx.doi.org/10.17632/b7f7d28ynd.1 Licensing provisions: MIT license (MIT) Programming language: Python External routines: ASE, NumPy, Pandas, SciPy, Matplotlib, Pygal, PyMongo, dnspython Nature of problem: Conversion of ab-initio properties to thermochemical properties and rate constants is time consuming and error-prone. Solution method: Python package with a modular approach to statistical thermodynamics and rate constant estimation.","2020-02-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:27","106864","","","247","","Computer Physics Communications","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/GHM22S7R/S0010465519302516.html","","","Catalysis; Microkinetics; Rate constant; Statistical mechanics; Thermochemistry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"KKPTJH33","journalArticle","2011","Enkovaara, Jussi; Romero, Nichols A.; Shende, Sameer; Mortensen, Jens J.","GPAW - massively parallel electronic structure calculations with Python-based software","Procedia Computer Science","","1877-0509","10.1016/j.procs.2011.04.003","http://www.sciencedirect.com/science/article/pii/S1877050911000615","Electronic structure calculations are a widely used tool in materials science and large consumer of supercomputing resources. Traditionally, the software packages for these kind of simulations have been implemented in compiled languages, where Fortran in its different versions has been the most popular choice. While dynamic, interpreted languages, such as Python, can increase the effciency of programmer, they cannot compete directly with the raw performance of compiled languages. However, by using an interpreted language together with a compiled language, it is possible to have most of the productivity enhancing features together with a good numerical performance. We have used this approach in implementing an electronic structure simulation software GPAW using the combination of Python and C programming languages. While the chosen approach works well in standard workstations and Unix environments, massively parallel supercomputing systems can present some challenges in porting, debugging and profiling the software. In this paper we describe some details of the implementation and discuss the advantages and challenges of the combined Python/C approach. We show that despite the challenges it is possible to obtain good numerical performance and good parallel scalability with Python based software.","2011-01-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:27","17-25","","","4","","Procedia Computer Science","","Proceedings of the International Conference on Computational Science, ICCS 2011","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/JZVP3CBW/S1877050911000615.html","","","Density-functional theory; MPI; Numpy; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"Z68NEGF6","journalArticle","2019","Rose, Michael E.; Kitchin, John R.","pybliometrics: Scriptable bibliometrics using a Python interface to Scopus","SoftwareX","","2352-7110","10.1016/j.softx.2019.100263","http://www.sciencedirect.com/science/article/pii/S2352711019300573","We present a wrapper for the Scopus RESTful API written for Python 3. The wrapper allows users to access the Scopus database via user-friendly interfaces and can be used without prior knowledge of RESTful APIs. The package provides classes to interact with different Scopus APIs to retrieve information as diverse as citation counts, author information or document abstracts. Files are cached to speed up subsequent analysis. The package addresses all users of Scopus data, such as researchers working in Science of Science or evaluators. It facilitates reproducibility of research projects and enhances data integrity for researchers using Scopus data.","2019-07-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:27","100263","","","10","","SoftwareX","pybliometrics","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/FXTTHCXW/S2352711019300573.html","","","Bibliometrics; Python; Scientometrics; Scopus; Software","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"8MB2ZQ25","journalArticle","2020","Herath, Uthpala; Tavadze, Pedram; He, Xu; Bousquet, Eric; Singh, Sobhit; Muñoz, Francisco; Romero, Aldo H.","PyProcar: A Python library for electronic structure pre/post-processing","Computer Physics Communications","","0010-4655","10.1016/j.cpc.2019.107080","http://www.sciencedirect.com/science/article/pii/S0010465519303935","The PyProcar Python package plots the band structure and the Fermi surface as a function of site and/or s,p,d,f - projected wavefunctions obtained for each k-point in the Brillouin zone and band in an electronic structure calculation. This can be performed on top of any electronic structure code, as long as the band and projection information is written in the PROCAR format, as done by the VASP and ABINIT codes. PyProcar can be easily modified to read other formats as well. This package is particularly suitable for understanding atomic effects into the band structure, Fermi surface, spin texture, etc. PyProcar can be conveniently used in a command line mode, where each one of the parameters define a plot property. In the case of Fermi surfaces, the package is able to plot the surface with colors depending on other properties such as the electron velocity or spin projection. The mesh used to calculate the property does not need to be the same as the one used to obtain the Fermi surface. A file with a specific property evaluated for each k-point in a k−mesh and for each band can be used to project other properties such as electron–phonon mean path, Fermi velocity, electron effective mass, etc. Another existing feature refers to the band unfolding of supercell calculations into predefined unit cells. Program summary Program Title: PyProcar Program Files doi: http://dx.doi.org/10.17632/d4rrfy3dy4.1 Licensing provisions: GPLv3 Programming language: Python Nature of problem: To automate, simplify and serialize the analysis of band structure and Fermi surface, especially for high throughput calculations. Solution method: Implementation of a Python library able to handle, combine, parse, extract, plot and even repair data from density functional calculations. PyProcar uses color maps on the band structures or Fermi surfaces to give a simple representation of the relevant characteristics of the electronic structure. Additional comments: Features: PyProcar can produce high-quality figures of band structures and Fermi surfaces (2D and 3D), projection of atomic orbitals, atoms, and/or spin components. Restrictions: Only the VASP package is currently fully supported, the latest version of Abinit is partially supported (it will be fully supported in the Abinit versions 9.x). The PROCAR file format can easily be implemented within any DFT code.","2020-06-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:27","107080","","","251","","Computer Physics Communications","PyProcar","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/4DADXM3J/S0010465519303935.html; /Users/Pablo/Zotero/storage/TZ3USVJT/Herath et al. - 2020 - PyProcar A Python library for electronic structur.pdf","","","Bandstructure; Condensed matter; DFT; Electronic properties; Fermi-surface; Python; Spin texture","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"SLDR2XAH","journalArticle","2020","Ortner, Michael; Coliado Bandeira, Lucas Gabriel","Magpylib: A free Python package for magnetic field computation","SoftwareX","","2352-7110","10.1016/j.softx.2020.100466","http://www.sciencedirect.com/science/article/pii/S2352711020300170","This paper introduces Magpylib, a light-weight and free Python package used to compute magnetic fields of permanent magnets, currents and moments based on analytical models. The package features a user-friendly interface to create, manipulate, group and visualize such magnetic sources, and to compute the field they generate. We present an overview of structure and functionality of Magpylib, followed by a discussion of possible applications and examples of magnetic system design. Special attention is given to computational performance possibilities in this context.","2020-01-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:27","100466","","","11","","SoftwareX","Magpylib","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/5GPYQ3GJ/S2352711020300170.html","","","Analytical solution; Magnetic field; Magnetic system design; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"CW94N5Z5","journalArticle","2020","da Silva Vasconcelos, Eliton; Kalinin, Ana Lúcia; Cipriano, Rafael Correa; dos Santos Beserra, Samuel; Lopes, André Guelli; da Costa Leite, Cléo Alcântara; Monteiro, Diana Amaral","Effects of feeding and digestion on myocardial contractility and expression of calcium-handling proteins in Burmese pythons (Python molurus)","Comparative Biochemistry and Physiology Part B: Biochemistry and Molecular Biology","","1096-4959","10.1016/j.cbpb.2019.110371","http://www.sciencedirect.com/science/article/pii/S1096495919303306","Pythons are important models of studies on postprandial metabolism because their physiological responses are exacerbated when digesting large prey. Prior studies of these animals have shown hypertrophy of the cardiac tissue 2 to 3 days after feeding, coinciding with the peak of the specific dynamic action (SDA), but the consequences of this remodeling in myocardial contractility have not been studied, which is the purpose of this work. Specimens of Python molurus were divided into two groups: a Digesting group (2 days after feeding, at the peak of SDA), and a Fasting group (28 days after feeding). When compared to the Fasting group, the Digesting group showed higher relative ventricular mass and calcium-handling protein expression such as sarcoplasmic reticulum Ca2+-ATPase (SERCA), phospholamban (PLB), and the Na+/Ca2+ exchanger (NCX). Digesting pythons also exhibited significant increases in the cardiac contraction force (Fc), rates of force development and relaxation, and cardiac pumping capacity. Therefore, the higher SERCA, PLB and NCX expression levels increased cytosolic Ca2+ transient amplitude, improving myofilament force. These changes are crucial to maintain cardiac output and a relatively high and continuous blood flow required by metabolic expenditure that occurs in postprandial animals.","2020-02-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:27","110371","","","240","","Comparative Biochemistry and Physiology Part B: Biochemistry and Molecular Biology","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/5S6HXHPG/S1096495919303306.html","","","Cardiac function; NCX; PLB; SERCA; Snake; Specific dynamic action","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"U7HBV3EF","journalArticle","2020","Dalmasso, N.; Pospisil, T.; Lee, A. B.; Izbicki, R.; Freeman, P. E.; Malz, A. I.","Conditional density estimation tools in python and R with applications to photometric redshifts and likelihood-free cosmological inference","Astronomy and Computing","","2213-1337","10.1016/j.ascom.2019.100362","http://www.sciencedirect.com/science/article/pii/S2213133719301313","It is well known in astronomy that propagating non-Gaussian prediction uncertainty in photometric redshift estimates is key to reducing bias in downstream cosmological analyses. Similarly, likelihood-free inference approaches, which are beginning to emerge as a tool for cosmological analysis, require a characterization of the full uncertainty landscape of the parameters of interest given observed data. However, most machine learning (ML) or training-based methods with open-source software target point prediction or classification, and hence fall short in quantifying uncertainty in complex regression and parameter inference settings such as the applications mentioned above. As an alternative to methods that focus on predicting the response (or parameters) y from features x, we provide nonparametric conditional density estimation (CDE) tools for approximating and validating the entire probability density function (PDF) p(y|x) of y given (i.e., conditional on) x. This density approach offers a more nuanced accounting of uncertainty in situations with, e.g., nonstandard error distributions and multimodal or heteroskedastic response variables that are often present in astronomical data sets. As there is no one-size-fits-all CDE method, and the ultimate choice of model depends on the application and the training sample size, the goal of this work is to provide a comprehensive range of statistical tools and open-source software for nonparametric CDE and method assessment which can accommodate different types of settings – involving, e.g., mixed-type input from multiple sources, functional data, and images – and which in addition can easily be fit to the problem at hand. Specifically, we introduce four CDE software packages in Python and R based on ML prediction methods adapted and optimized for CDE: NNKCDE, RFCDE, FlexCode, and DeepCDE. Furthermore, we present the cdetools package with evaluation metrics. This package includes functions for computing a CDE loss function for tuning and assessing the quality of individual PDFs, together with diagnostic functions that probe the population-level performance of the PDFs. We provide sample code in Python and R as well as examples of applications to photometric redshift estimation and likelihood-free cosmological inference via CDE.","2020-01-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:28","100362","","","30","","Astronomy and Computing","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/7NAKHMYY/S2213133719301313.html; /Users/Pablo/Zotero/storage/GTNSIHRR/Dalmasso et al. - 2020 - Conditional density estimation tools in python and.pdf","","","Cosmology: Cosmological parameters; Galaxies: Distances and redshifts; Methods: Data analysis; Nonparametric statistics; Statistical computing; Statistical software","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"6Q879HQQ","journalArticle","2018","Mukherjee, Aditi; Kumara, Honnavalli Nagaraj; Bhupathy, Subramanian","Sun-basking, a necessity not a leisure: Anthropogenic driven disturbance, changing the basking pattern of the vulnerable Indian rock python in Keoladeo National Park, India","Global Ecology and Conservation","","2351-9894","10.1016/j.gecco.2017.e00368","http://www.sciencedirect.com/science/article/pii/S2351989417301889","‘Basking’ is the most conspicuous thermoregulatory behavior in many animals that enable them to enhance physiological performance. Several terrestrial poikilothermic ectotherms have adapted to thermoregulate through basking and seek refuge in subterranean burrows in extreme climatic conditions. Particularly in reptiles, selecting appropriate activity times and postural adjustments are critical thermoregulatory mechanisms and have been recognized as a significant element in the process of behavioral thermoregulation. The present study aims to understand the behavioral adaptation, burrow use regime, and basking pattern of the Indian rock python Python molurus in Keoladeo National Park which witnesses annual weather extremes. Further, the study also investigates the effect of anthropogenic disturbance on the behavioral repertoires of the species, including the changes occurring in the pattern of emergence and retreat into the burrow and basking periods of pythons. The estimated minimum population size of python in KNP was 80 ± 10SD individuals. During the active months of November to April, a general pattern of python activity was observed wherein pythons emerged at 09h00 to 10h00, with a peak in mean basking time of 49.3 ± 18.4SD min per day during 12h00 to 13h00 following retreat at 17h00 to 18h00. Also, the emergence timings positively correlated with the sunrise timing and increasing temperature. Whereas, the retreat timings positively correlated with the sunset timing in disturbed burrows with continuous tourist visits, a significant change in the emergence, retreat and basking duration was observed. The time spent for basking significantly varied between disturbed, semi-disturbed and undisturbed burrows across different time-slots. The basking time across all the time intervals of the day around the undisturbed burrows was twofold of the time spent around disturbed burrows. The present study thus highlights the change in basking regime of Indian rock python in disturbed and undisturbed habitats in KNP, during the tourist's season of October to April each year.","2018-01-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:28","e00368","","","13","","Global Ecology and Conservation","Sun-basking, a necessity not a leisure","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/REDY4IXA/S2351989417301889.html","","","Burrow activity; Camera trap; Disturbance; Ecotourism; Thermoregulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"GS5DHPUA","journalArticle","2019","Dedner, Andreas; Kane, Birane; Klöfkorn, Robert; Nolte, Martin","Python framework for hp-adaptive discontinuous Galerkin methods for two-phase flow in porous media","Applied Mathematical Modelling","","0307-904X","10.1016/j.apm.2018.10.013","http://www.sciencedirect.com/science/article/pii/S0307904X18305043","In this paper we present a framework for solving two-phase flow problems in porous media. The discretization is based on a Discontinuous Galerkin method and includes local grid adaptivity and local choice of polynomial degree. The method is implemented using the new Python frontend Dune-FemPy to the open source framework Dune. The code used for the simulations is made available as Jupyter notebook and can be used through a Docker container. We present a number of time stepping approaches ranging from a classical IMPES method to a fully coupled implicit scheme. The implementation of the discretization is very flexible allowing to test different formulations of the two-phase flow model and adaptation strategies.","2019-03-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:28","179-200","","","67","","Applied Mathematical Modelling","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/5AMXTK32/S0307904X18305043.html; /Users/Pablo/Zotero/storage/QC6M33A7/Dedner et al. - 2019 - Python framework for hp-adaptive discontinuous Gal.pdf","","","Discontinuous Galerkin; Dune; hp-adaptivity; IMPES; Porous media two-phase flow; Python","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"7RTJ2MGX","journalArticle","2019","Thomas, D.; Cerquaglia, M. L.; Boman, R.; Economon, T. D.; Alonso, J. J.; Dimitriadis, G.; Terrapon, V. E.","CUPyDO - An integrated Python environment for coupled fluid-structure simulations","Advances in Engineering Software","","0965-9978","10.1016/j.advengsoft.2018.05.007","http://www.sciencedirect.com/science/article/pii/S0965997817310906","CUPyDO, a fluid-structure interaction (FSI) tool that couples existing independent fluid and solid solvers into a single synchronization and communication framework based on the Python language is presented. Each coupled solver has to be wrapped in a Python layer in order to embed their functionalities (usually written in a compiled language) into a Python object, that is called and used by the coupler. Thus a staggered strong coupling can be achieved for time-dependent FSI problems such as aeroelastic flutter, vortex-induced vibrations (VIV) or conjugate heat transfer (CHT). The synchronization between the solvers is performed with the predictive block-Gauss-Seidel algorithm with dynamic under-relaxation. The tool is capable of treating non-matching meshes between the fluid and structure domains and is optimized to work in parallel using Message Passing Interface (MPI). The implementation of CUPyDO is described and its capabilities are demonstrated on typical validation cases. The open-source code SU2 is used to solve the fluid equations while the solid equations are solved either by a simple rigid body integrator or by in-house linear/nonlinear Finite Element codes (GetDP/Metafor). First, the modularity of the coupling as well as its ease of use is highlighted and then the accuracy of the results is demonstrated.","2019-02-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:28","69-85","","","128","","Advances in Engineering Software","","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/6FQ35H5M/S0965997817310906.html","","","Computational aeroelasticity; Coupling environment; CUPyDO; Fluid-structure interaction; Partitioned coupling; Python wrapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"CR8CTAQW","journalArticle","2020","Renner, Gerrit; Schmidt, Torsten C.; Schram, Jürgen","Automated rapid & intelligent microplastics mapping by FTIR microscopy: A Python–based workflow","MethodsX","","2215-0161","10.1016/j.mex.2019.11.015","http://www.sciencedirect.com/science/article/pii/S2215016119303188","The analysis of environmental microplastic particles using FTIR microscopy is a challenging task, due to the very high number of individual particles within a single sample. Therefore, automatable, fast and robust approaches are highly requested. Micro particles were commonly enriched on filters, and sub- or the whole filter area was investigated, which took more than 20h and produced millions of data, which had to be evaluated. This paper presents a new approach of such filter area analysis using an intelligent algorithm to measure only those spots on a filter that would produce evaluable FTIR data. Empty spaces or IR absorbers like carbon black particles were not measured which successfully reduced the total analysis time from 50h to 7h. The presented method is based on system independent Python workflow and can easily be implemented on other FTIR systems. •Fast and intelligent FTIR microscopy area mapping without FPA detector•Total time reduction from 50 h to 7 h•Platform independent approach based on Python","2020-01-01","2020-08-18 16:44:28","2020-08-18 16:44:28","2020-08-18 16:44:28","100742","","","7","","MethodsX","Automated rapid & intelligent microplastics mapping by FTIR microscopy","","","","","","","en","","","","","ScienceDirect","","","","/Users/Pablo/Zotero/storage/7JE6Y6N6/S2215016119303188.html; /Users/Pablo/Zotero/storage/59WEW9J7/Renner et al. - 2020 - Automated rapid & intelligent microplastics mappin.pdf","","","Chemometrics; FTIR microscopy; Mapping; Microplasitcs; Python; Rapid and intelligent microplastics mapping (μMAP)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""