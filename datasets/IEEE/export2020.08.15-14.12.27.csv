"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Evaluating COTS Components Using Gap Analysis","J. Sheng; B. Wang","Sch. of Inf. Sci. & Eng., Central South Univ., Changsha; Sch. of Inf. Sci. & Eng., Central South Univ., Changsha","2008 The 9th International Conference for Young Computer Scientists","12 Dec 2008","2008","","","1248","1253","In current COTS software components evaluation methods, the resulting scores only represent relative ranking of the alternatives and the differences in their value does not give any indication of their relative superiority. Based on gap analysis theory, a new evaluation approach is proposed in this paper. The functional and non-functional gap between COTS components and system requirements are identified through function point analysis and corresponding adjustment cost is measured by count of function points. Besides adjustment cost, purchase cost is also a part of the total cost for adopting a COTS product. The fitness of a COTS product to requirements is defined as the ratio of the functional size of target system to the total cost of COTS that is also measured in functional size.","","978-0-7695-3398-8","10.1109/ICYCS.2008.472","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4709152","CBSD;COTS evaluation and selection;gap analysis;function point","Cost function;Decision making;Information analysis;Information science;Size measurement;Programming;Software systems;Software engineering;Utility theory","formal specification;formal verification;object-oriented programming;software cost estimation;software metrics;systems analysis","COTS software component evaluation method;functional gap analysis;nonfunctional gap analysis;system requirements identification;adjustment cost measurement;purchase cost","","6","","13","","12 Dec 2008","","","IEEE","IEEE Conferences"
"The role of architecture in the development of software systems","M. Boasson","Hollandse Signaalapparaten BV, Henglo, Netherlands","Proceedings of 20th International Computer Software and Applications Conference: COMPSAC '96","6 Aug 2002","1996","","","350","351","Systems increasingly rely on software as the main technology for implementing the desired behaviour. There is a clear trend of steadily growing sophistication in the behaviour of these systems. The availability of cheap and fast hardware suggests that successive generations of systems should exhibit greatly enhanced behaviour, but this increase in functionality is not observed to an extent that can be related to the progress made in hardware. To the contrary, systems grow in complexity very rapidly (as exemplified by their cost and the required sophistication of the development process), without providing much in terms of added functionality. This complexity, and resulting cost, limits the achievable level of sophistication in systems, unless techniques are found that allow the software complexity to be reduced very significantly. The imbalance between cost and functionality is discussed and arguments are presented suggesting it to be avoidable through a sound software architecture.","0730-3157","0-8186-7579-9","10.1109/CMPSAC.1996.544589","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=544589","","Computer architecture;Software systems;Hardware;Cost function;Explosions;Software architecture;Safety;Availability;Virtual machining;Chaotic communication","software performance evaluation;software cost estimation;software metrics","software architecture;software development process;fast hardware;system functionality;software complexity;software development cost;systems sophistication","","","","","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Software size measurement with use case point for employee application software at STT-PLN","H. B. Agtriadi; N. Chandra; H. L. H. S. Warnars; F. L. Gaol","Computer Science Department, BINUS Graduate Program - Doctor of Computer Science, Bina Nusantara University Jakarta, Indonesia 11480; Mobile Application & Technology Program, Computer Science Department, School of Computer Science Bina Nusantara University, Jakarta, Indonesia 11480; Computer Science Department, BINUS, Graduate Program - Doctor of Computer Science Bina Nusantara University Jakarta, Indonesia 11480; Computer Science Department, BINUS, Graduate Program - Doctor of Computer Science Bina Nusantara University Jakarta, Indonesia 11480","2017 IEEE International Conference on Cybernetics and Computational Intelligence (CyberneticsCom)","12 Mar 2018","2017","","","153","157","Employee Application (EA) is a system information for realizing the latest personal data and integrated, provide accurate employee information for planning, development, welfare and control of employees. EA in STT-PLN began to be published since 2013. The software size of the EA STT-PLN will be measured with use case point method. Measurement of the software size of EA STT-PLN will be measured with Use Case Point upon use case diagram for EA STT-PLN as shown in the project has small software size where score Use Case Point (UCP) = 70.34. UCP is another alternative implementation method which can be applied to measure application software size whenever needed to deal with time, money and people.","","978-1-5386-0784-8","10.1109/CYBERNETICSCOM.2017.8311701","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8311701","Use Case Point;Software Measurement;Software Metrics;Software Project","Software;Software measurement;Size measurement;Mathematical model;History;Complexity theory;Environmental factors","employee welfare;personnel;software cost estimation","system information;score use case point;use case point method;accurate employee information;employee application software;software size measurement;application software size;EA STT-PLN;use case diagram","","3","","19","","12 Mar 2018","","","IEEE","IEEE Conferences"
"An empirical study using task assignment patterns to improve the accuracy of software effort estimation","R. K. Smith; J. E. Hale; A. S. Parrish","Math., Comput. & Inf. Sci. Dept., Jacksonville State Univ., AL, USA; NA; NA","IEEE Transactions on Software Engineering","7 Aug 2002","2001","27","3","264","271","In most software development organizations, there is seldom a one-to-one mapping between software developers and development tasks. It is frequently necessary to concurrently assign individuals to multiple tasks and to assign more than one individual to work cooperatively on a single task. A principal goal in making such assignments should be to minimize the effort required to complete each task. But what impact does the manner in which developers are assigned to tasks have on the effort requirements? This paper identifies four task assignment factors: team size, concurrency, intensity, and fragmentation. These four factors are shown to improve the predictive ability of the well-known intermediate COCOMO cost estimation model. A parsimonious effort estimation model is also derived that utilizes a subset of the task assignment factors and unadjusted function points. For the data examined, this parsimonious model is shown to have goodness of fit and quality of estimation superior to that of the COCOMO model, while utilizing fewer cost factors.","1939-3520","","10.1109/32.910861","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=910861","","Costs;Predictive models;Concurrent computing;Computer Society;Finishing;Project management;Productivity;Programming profession;Software engineering;Information science","software cost estimation;software development management;software metrics","task assignment patterns;software effort estimation;software development organizations;team size;COCOMO;cost estimation model;unadjusted function points","","33","","29","","7 Aug 2002","","","IEEE","IEEE Journals"
"Survival analysis for the duration of software projects","P. Sentas; L. Angelis","Dept. of Informatics, Aristotle Univ. of Thesaloniki, Greece; Dept. of Informatics, Aristotle Univ. of Thesaloniki, Greece","11th IEEE International Software Metrics Symposium (METRICS'05)","24 Oct 2005","2005","","","10 pp.","5","In the area of software engineering various methods have been proposed in order to predict the cost of a software project in terms of the effort or of the productivity. An important feature which is closely related to the cost is the duration of a software project. In this paper we deal with the problem of studying and modeling the distribution of the time from specification until delivery of a software product. Specifically, we investigate the use of a statistical methodology known from biostatistics as survival analysis. The purpose of such an analysis is to describe the distribution of the duration and also to identify important factors that affect it. The great advantage of survival analysis is that we can utilize information not only from the completed projects in a dataset but also from ongoing projects. The general principles of the methodology are described with examples from applications to known data sets","1530-1435","0-7695-2371-4","10.1109/METRICS.2005.45","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1509283","","Costs;Statistical analysis;Analysis of variance;Information analysis;Application software;Informatics;Software engineering;Productivity;Project management;Time to market","software cost estimation;software development management;statistical distributions","survival analysis;software projects;software engineering;cost prediction;software product;statistical methodology","","4","","19","","24 Oct 2005","","","IEEE","IEEE Conferences"
"A proposal for the improvement of project's cost predictability using EVM and historical data of cost","A. Diniz de Souza","Universidade Federal do Rio de Janeiro - UFRJ / COPPE, Rio de Janeiro, Brasil","2013 35th International Conference on Software Engineering (ICSE)","26 Sep 2013","2013","","","1447","1449","This paper proposes an extension of the Earned Value Management - EVM technique through the integration of historical cost performance data of processes under statistical control as a means to improve the predictability of the cost of projects. The proposed technique was evaluated through a case-study in industry, which evaluated the implementation of the proposed technique in 22 software development projects Hypotheses tests with 95% significance level were performed, and the proposed technique was more accurate and more precise than the traditional technique for calculating the Cost Performance Index - CPI and Estimates at Completion - EAC.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606740","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6606740","Cost Performance Index — CPI;Software Metrics;Earned Value Management — EVM;High Maturity","Stability criteria;Equations;Mathematical model;Accuracy;Software;Performance analysis","project management;software cost estimation;software development management;statistical analysis","project cost predictability;cost historical data;earned value management;EVM technique;historical cost performance data;statistical control;software development projects;hypothesis tests;cost performance index;CPI;estimates at completion;EAC","","1","","14","","26 Sep 2013","","","IEEE","IEEE Conferences"
"Are CMM Program Investments Beneficial? Analyzing Past Studies","D. Galin; M. Avrahami",Ruppin Academic Center; Lipman Electronic Engineering,"IEEE Software","13 Nov 2006","2006","23","6","81","87","CMM experts strongly believe that investments in programs promoting an organization's CMM maturity yield substantial organizational and economic benefits. In particular, they argue that CMM programs that implement software process improvements can provide more benefits","1937-4194","","10.1109/MS.2006.149","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4012629","CMM;software development performance metrics;error density;productivity;rework;cycle time;schedule fidelity;error detection effectiveness;return on investment;ROI","Coordinate measuring machines;Investments;Productivity;Measurement;Costs;Programming;Scheduling;Software performance;Environmental economics;Standards development","Capability Maturity Model;cost-benefit analysis;investment;software cost estimation;software metrics","CMM program investments;economic benefits;software process improvements;software metrics","","39","","19","","13 Nov 2006","","","IEEE","IEEE Magazines"
"The Measurement of Software Size based on Generation Model using COSMIC FSM","T. Zaw; S. Z. Hlaing; M. Myint Lwin; K. Ochimizu","University of Information Technology,Yangon,Myanmar; University of Information Technology,Yangon,Myanmar; University of Information Technology,Yangon,Myanmar; University of Information Technology,Yangon,Myanmar","2019 23rd International Computer Science and Engineering Conference (ICSEC)","30 Jan 2020","2019","","","373","378","The software size measurement plays essential roles in developing a software project to estimate costs, efforts and other resources. It provides the necessary input to estimate the effort at the early stage of the software development process. Thus, COSMIC FSM (Common Software Measurement International Consortium Functional Size Measurement) is one of the well-known methods of FSM which is suitable to estimate the size of software project at the early stage of development process. The industries use not only the standardized methods but also the well-defined modeling notations to measure the functional size of software. Some research has focused on the specific design notations to facilitate the design of the system. Therefore, this paper proposes a new model which is named as a generation model that can be accepted from various types of modeling notations and then these types converted into common general model for calculating the functional size of COSMIC concept. The generation model can help many researchers and estimators to understand the concepts of complex diagram notations easily. Then, the mapping rules define between the COSMIC FSM and generation model to measure the size of software. Finally, the function size results of the system are calculated by using COSMIC method.","","978-1-7281-2544-2","10.1109/ICSEC47112.2019.8974688","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8974688","Meta model;UML sequence diagram;SysML sequence diagram;Petri net;COSMIC Functional Size Measurement (FSM)","","software cost estimation;software development management;software metrics","generation model;COSMIC method;COSMIC FSM;software size measurement;software project;software development process;Common Software Measurement International Consortium Functional Size Measurement","","","","13","","30 Jan 2020","","","IEEE","IEEE Conferences"
"Function Point Analysis to knowledge representation of software size measurement","Y. Ren; T. Xing; Qiang Quan","College of Information Science and Technology, Bohai University, CO 121013 China; Key Laboratory of urban Operation and Management, Beijing Research Center of Urban Systems Engineering, CO 100089 China; Electronic & Information Engineering College, Liaoning Technology University, CO 121001 China","International Conference on Information Science and Technology","10 May 2011","2011","","","122","125","In Function Point Analysis through the technique of case-based reasoning(CBR), use the expert system to measure the software size, is the new method of software measurement, the knowledge representation is the basis of this new method. In this paper, firstly, analyze the role of the function point analysis in the software measurement; then describe the knowledge representation method of Production Rules in detail; finally, propose the data model of the function point analysis for software size measurement, to analyze the Technical complexity factors and their weights of the model, then carry out knowledge representation on function point analysis. The results show that, the knowledge representation used in this paper, can simulate the human thinking process of problem solving, has features as Naturalness, modularity, efficiency, clarity, etc, on the application of Function Point Analysis to measure the size having good reference value.","2164-4357","978-1-4244-9442-2","10.1109/ICIST.2011.5765224","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5765224","","Size measurement;Production;Application software;Software measurement;Knowledge representation;Expert systems","case-based reasoning;data models;expert systems;knowledge representation;software cost estimation;software metrics","function point analysis;knowledge representation;software size measurement;case based reasoning;expert system;production rules;data model;technical complexity factor;human thinking process;problem solving","","2","","10","","10 May 2011","","","IEEE","IEEE Conferences"
"An approach to predict software maintenance cost based on ripple complexity","T. Hirota; M. Tohki; C. M. Overstreet; M. Hashimoto; R. Cherinka","Kyushu Inst. of Technol., Iizuka, Japan; NA; NA; NA; NA","Proceedings of 1st Asia-Pacific Software Engineering Conference","6 Aug 2002","1994","","","439","444","Almost half of a software maintainer's time is spent trying to understand programs. This means that software maintenance cost prediction depends on software understandability. We have proposed ripple complexity as a means to predict program understandability. This paper describes an experiment to prove the usefulness of ripple complexity. The result of this experiment has shown that ripple complexity is more closely related to program understandability than lines of source code, cyclomatic complexity and function point analysis.<>","","0-8186-6960-8","10.1109/APSEC.1994.465236","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=465236","","Software maintenance;Costs;Software systems;Turning;Maintenance engineering;Reverse engineering;Testing;Software engineering;Information analysis;Algorithm design and analysis","software maintenance;software metrics;software cost estimation;reverse engineering","software maintenance cost prediction;ripple complexity;software understandability;program understanding;source code lines;cyclomatic complexity;function point analysis;ripple analysis","","2","","12","","6 Aug 2002","","","IEEE","IEEE Conferences"
"A comparison of development effort estimation techniques for Web hypermedia applications","E. Mendes; I. Watson; C. Triggs; N. Mosley; S. Counsell","Dept. of Comput. Sci., Auckland Univ., New Zealand; Dept. of Comput. Sci., Auckland Univ., New Zealand; NA; NA; NA","Proceedings Eighth IEEE Symposium on Software Metrics","7 Aug 2002","2002","","","131","140","Several studies have compared the prediction accuracy of different types of techniques with emphasis placed on linear and stepwise regressions, and case-based reasoning (CBR). We believe the use of only one type of CBR technique may bias the results, as there are others that can also be used for effort prediction. This paper has two objectives. The first is to compare the prediction accuracy of three CBR techniques to estimate the effort to develop Web hypermedia applications. The second objective is to compare the prediction accuracy of the best CBR technique, according to our findings, against three commonly used prediction models, namely multiple linear regression, stepwise regression and regression trees. One dataset was used in the estimation process and the results showed that different measures of prediction accuracy gave different results. MMRE and MdMRE showed better prediction accuracy for multiple regression models whereas box plots showed better accuracy for CBR.","1530-1435","0-7695-1339-5","10.1109/METRIC.2002.1011332","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1011332","","Application software;Accuracy;Predictive models;Regression tree analysis;Project management;Resource management;Machine learning;Computer science;Educational institutions;Linear regression","hypermedia;software development management;software cost estimation;project management;case-based reasoning","web hypermedia;software projects;project management;effort prediction models;prediction accuracy;case-based reasoning;multiple regression models","","41","","48","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Towards Software Quality Economics for Defect-Detection Techniques","S. Wagner","Institut fur Informatik Technische Universit at Munchen Boltzmannstr. Garching, Germany","29th Annual IEEE/NASA Software Engineering Workshop","27 Dec 2005","2005","","","265","274","There are various ways to evaluate defect-detection techniques. However, for a comprehensive evaluation the only possibility is to reduce all influencing factors to costs. There are already some models and metrics for the cost of quality that can be used in that context. The existing metrics for the effectiveness and efficiency of defect-detection techniques and experiences with them are combined with cost metrics to allow a more fine-grained estimation of costs and a comprehensive evaluation of defect-detection techniques. The current model is most suitable for directly comparing concrete applications of different techniques","1550-6215","0-7695-2306-4","10.1109/SEW.2005.47","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1521215","","Software quality;Testing;Quality assurance;Context modeling;Concrete;Application software;Software systems;Maintenance;Cost function;Failure analysis","software cost estimation;software fault tolerance;software metrics;software quality","software quality economics;software defect-detection technique;software metrics;software cost estimation","","3","","33","","27 Dec 2005","","","IEEE","IEEE Conferences"
"Validation of software effort models","L. F. Johnson; M. L. Smith; A. M. Stevens","Inf. Metrics Inst., New Brunswick Univ., Fredericton, NB, Canada; NA; NA","Engineering Solutions for the Next Millennium. 1999 IEEE Canadian Conference on Electrical and Computer Engineering (Cat. No.99TH8411)","6 Aug 2002","1999","1","","273","276 vol.1","Several static models for software effort were examined on three data sets. Models applied to new data sets need to be evaluated relative to the quality of the data set and this can be benchmarked by fitting a least squares model to the data. This natural model can then be compared to the model that is being evaluated.","0840-7789","0-7803-5579-2","10.1109/CCECE.1999.807208","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=807208","","Least squares methods;Data models;Benchmark testing;Performance evaluation;Personnel;Data engineering;Programming;Life testing;Software testing;Europe","software metrics;software cost estimation;least squares approximations;software development management","software effort models;static models;benchmarking;least squares model","","","","8","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Measuring the functionality of online stores","E. Cachia; M. Micallef","Dept. of Comput. Sci. & Artificial Intelligence, Univ. of Malta, Malta; Dept. of Comput. Sci. & Artificial Intelligence, Univ. of Malta, Malta","29th Annual International Computer Software and Applications Conference (COMPSAC'05)","26 Sep 2005","2005","2","","70","73 Vol. 1","This paper shows the need of a framework which can be used to measure the functionality delivered by electronic commerce (e-commerce) systems. Such a framework would be helpful in areas such as cost prediction, effort estimation, and so on. The paper goes on to propose such a framework, based on the established methods of function points and object points.","0730-3157","0-7695-2413-3","10.1109/COMPSAC.2005.97","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1508087","Software Metrication;e-Commerce;Function Points;Object Points;Software Quality Assurance","Costs;Size measurement;Computer science;Software measurement;Software quality;Lab-on-a-chip;Software engineering;Artificial intelligence;Electronic commerce;Computer errors","Internet;electronic commerce;software cost estimation;software metrics;quality assurance;software quality","online stores functionality measure;electronic commerce system;cost prediction;effort estimation;function point method;object point method","","","","11","","26 Sep 2005","","","IEEE","IEEE Conferences"
"Estimating software project effort using analogies","M. Shepperd; C. Schofield","Dept. of Comput., Bournemouth Univ., Poole, UK; NA","IEEE Transactions on Software Engineering","6 Aug 2002","1997","23","11","736","743","Accurate project effort prediction is an important goal for the software engineering community. To date most work has focused upon building algorithmic models of effort, for example COCOMO. These can be calibrated to local environments. We describe an alternative approach to estimation based upon the use of analogies. The underlying principle is to characterize projects in terms of features (for example, the number of interfaces, the development method or the size of the functional requirements document). Completed projects are stored and then the problem becomes one of finding the most similar projects to the one for which a prediction is required. Similarity is defined as Euclidean distance in n-dimensional space where n is the number of project features. Each dimension is standardized so all dimensions have equal weight. The known effort values of the nearest neighbors to the new project are then used as the basis for the prediction. The process is automated using a PC-based tool known as ANGEL. The method is validated on nine different industrial datasets (a total of 275 projects) and in all cases analogy outperforms algorithmic models based upon stepwise regression. From this work we argue that estimation by analogy is a viable technique that, at the very least, can be used by project managers to complement current estimation techniques.","1939-3520","","10.1109/32.637387","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=637387","","Project management;Costs;Software engineering;Euclidean distance;Nearest neighbor searches;Programming;Software development management;Centralized control;Accuracy;Particle measurements","software development management;project management;software cost estimation;software tools;software metrics","software project effort estimation;project effort prediction;software engineering;algorithmic models;COCOMO;estimation by analogy;software development method;functional requirements document;Euclidean distance;nearest neighbors;personal computer-based tool;ANGEL;industrial datasets;stepwise regression;project management","","497","","28","","6 Aug 2002","","","IEEE","IEEE Journals"
"Value estimation for software product management","S. I. Mohamed; A. M. Wahba","Department of computer and system Engineering, Ain Shams University, Cairo, Egypt; Department of computer and system Engineering, Ain Shams University, Cairo, Egypt","2008 IEEE International Conference on Industrial Engineering and Engineering Management","6 Jan 2009","2008","","","2196","2200","Value-based approach of software engineering proved to be one of the most important branches of software engineering because it elicits and reconciles stakeholder¿s value propositions with respect to the system into a mutually satisfactory set of objectives for the system. Thus most of software organizations in market-driven environment nowadays adopt value-based approach with the focus on maximizing the value gained from their products against consumed resources. This leads to a need for a value estimation methodology to incorporate all the software product value aspects altogether while measuring the product value. Most of the existing methodologies focus on measuring product financial value and neglect the nonfinancial value. Value point measurement will facilitate quantifying the total value obtained from the product and compare it against planned product budget at early phases of the product life cycle. Such comparison will be used as a sort of justification for product feasibility. This paper illustrates a new estimation methodology for the software product value called ¿Value Point¿. VP measures value gained from the software product through quantifying value obtained from each product requirement. The process for value point counting will be illustrated through a designed product management framework. A case study is performed to demonstrate the added value from the proposed methodology.","2157-362X","978-1-4244-2629-4","10.1109/IEEM.2008.4738261","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4738261","Value Point;Value-Based estimation;Product management;Release planning","Systems engineering and theory;Software engineering;Software measurement;Programming;Meeting planning;Engineering management;Phase measurement;Gain measurement;Product design;Feedback","DP industry;formal specification;product life cycle management;software cost estimation;software development management;software metrics","software product management;value estimation methodology;software engineering;software organization;market-driven environment;software product value measurement;product life cycle;product requirement","","6","","19","","6 Jan 2009","","","IEEE","IEEE Conferences"
"Measuring web service interfaces","H. M. Sneed","ANECON GmbH, Vienna, Austria","2010 12th IEEE International Symposium on Web Systems Evolution (WSE)","9 Nov 2010","2010","","","111","115","The following short paper describes a tool supported method for measuring web service interfaces. The goal is to assess the complexity and quality of these interfaces as well as to determine their size for estimating evolution and testing effort. Besides the metrics for quantity, quality and complexity, rules are defined for ensuring maintainability. In the end a tool - WSDAudit - is described which the author has developed for the static analysis of web service definitions. The WSDL schemas are automatically audited and measured for quality assurance and cost estimation. Work is underway to verify them against the BPEL procedures from which they are invoked.","1550-4441","978-1-4244-8637-3","10.1109/WSE.2010.5623580","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5623580","web services;WSDL;metrics;rule checking;quality;complexity;sizing;static analysis;code inspection;interface rule checking","Complexity theory;Web services;Software;Business;Couplings;Size measurement","program diagnostics;software cost estimation;software maintenance;software metrics;software quality;user interfaces;Web services","Web service interface;interface complexity;interface quality;maintainability;WSDAudit;static analysis;WSDL schema auditing;quality assurance;cost estimation;BPEL procedure","","17","","14","","9 Nov 2010","","","IEEE","IEEE Conferences"
"Improving software size estimates by using probabilistic pairwise comparison matrices","J. Hihn; K. T. Lum","Jet Propulsion Lab., California Inst. of Technol., Pasadena, CA, USA; Jet Propulsion Lab., California Inst. of Technol., Pasadena, CA, USA","10th International Symposium on Software Metrics, 2004. Proceedings.","22 Nov 2004","2004","","","140","150","The pairwise comparison technique is a general purpose estimation approach for capturing expert judgment. This approach can be generalized to a probabilistic version using Monte Carlo methods to produce estimates of size distributions. The probabilistic pairwise comparison technique enables the estimator to systematically incorporate both estimation uncertainty as well as any uncertainty that arises from using multiple historical analogies as reference modules. In addition to describing the methodology, the results of the case study are also included. This paper is an extension of the work presented in [Lum, K et al., (2003)] and shows how the original software size estimates compared to the actual delivery size. It also describes the techniques used to modify the approach based on lessons learned. The results because they are based on only one case do not validate the effectiveness of the proposed approach but are suggestive that the technique can be effective and support the conclusion that further research is worth pursuing.","1530-1435","0-7695-2129-0","10.1109/METRIC.2004.1357898","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357898","","Uncertainty;Costs;Propulsion;Laboratories;Life estimation;Production;Yield estimation;Data mining;Decision making;Humans","software cost estimation;Monte Carlo methods;statistical distributions;software process improvement","probabilistic pairwise comparison matrices;Monte Carlo methods;software cost estimation;software size distribution","","2","","13","","22 Nov 2004","","","IEEE","IEEE Conferences"
"Software Project Estimation Using Improved Use Case Point","S. Bagheri; A. Shameli-Sendi","Faculty of Computer Science and Engineering, Shahid Beheshti University (SBU), Tehran, Iran; Faculty of Computer Science and Engineering, Shahid Beheshti University (SBU), Tehran, Iran","2018 IEEE 16th International Conference on Software Engineering Research, Management and Applications (SERA)","30 Sep 2018","2018","","","143","150","Estimating metrics, such as effort, schedule and cost, needed for a software to be created and launched into market have significant economical effects. One of the most extensively utilized method for such estimation is a technique called Use Case Points. It is based on the use case modeling which is a popular and widely used technique for capturing and describing the functional requirements of a software system. In this paper multitude number of techniques have been proposed as the basis for improving estimation of the effort, schedule, and costs of software projects. These terms are conceptually similar but utilize different parameter values and metrics. Moreover, different versions of use case points have been proposed. This method suffers some limitations such as less accuracy, failure to consider software risks, failure to consider software quality aspects, failure to consider different levels of software security, and so on. The aim of this paper is to propose a new approach for cost estimation, based on use case points method, by considering all the existing risks related to software projects. The results indicate that the new estimation approach can produce relatively accurate estimates and also declare various aspects of project risks during project estimation. Our results also provide guidance for organizations that want to develop a software project.","","978-1-5386-5886-4","10.1109/SERA.2018.8477225","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8477225","Software Cost;Software Estimation;Software Risks;Use-case point","Software;Estimation;Complexity theory;Environmental factors;Productivity;Measurement;Object oriented modeling","project management;risk analysis;software cost estimation;software development management;software metrics;software quality","software project estimation;use case point;estimating metrics;significant economical effects;extensively utilized method;Use Case Points;use case modeling;software system;improving estimation;software risks;software quality aspects;software security;cost estimation;estimation approach;relatively accurate estimates;project risks;parameter values","","1","","27","","30 Sep 2018","","","IEEE","IEEE Conferences"
"esrcTool: A Tool to Estimate the Software Risk and Cost","M. Sadiq; A. Rahman; S. Ahmad; M. Asim; J. Ahmad","Fac. of Eng. & Technol., Jamia Millia Islamia A Central Univ., New Delhi, India; Dept. of Comput. Sci. & Eng., Al-Falah Sch. of Eng. & Technol., Faridabad, India; Fac. of Eng. & Technol., Jamia Millia Islamia A Central Univ., New Delhi, India; Dept. of Comput. Sci. & Eng., Al-Falah Sch. of Eng. & Technol., Faridabad, India; Fac. of Eng. & Technol., Jamia Millia Islamia A Central Univ., New Delhi, India","2010 Second International Conference on Computer Research and Development","21 Jun 2010","2010","","","886","890","Function Point is a well known established method to estimate the size of software projects. There are several areas of the software engineering in which we can use the function point analysis (FPA) like project planning, project construction, software implementation etc. In this paper we have used the function point approach in order to develop the architecture of the esrcTool. This tool is used for two different purposes, firstly, to estimate the risk in the software and secondly to estimate the cost of the software. In the literature of software engineering there are so many models to estimate the risk in the software like Soft Risk Model, SRAM, SRAEM and so on. But in the esrcTool we have used SRAEM i.e. Software Risk Assessment and Estimation Model, because in this model FP is used as an input variable, and on the other hand side, in order to determine the cost of the software we have used the International Software Benchmarking Standards Group Release Report (ISBSG).","","978-0-7695-4043-6","10.1109/ICCRD.2010.29","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5489451","FPA;Software risk;Cost;SRAEM","Software tools;Costs;Software engineering;Programming;Risk management;Computer architecture;Software metrics;Productivity;Software systems;Software quality","risk management;software cost estimation;software development management","esrcTool;software risk estimation;software cost estimation;software projects;software engineering;function point analysis;SRAEM;international software benchmarking standards group release report","","2","","25","","21 Jun 2010","","","IEEE","IEEE Conferences"
"Early Functional Size Estimation with IFPUG Unit Modified","J. J. Cuadrado-Gallego; P. Rodríguez-Soria; A. González; D. Castelo; S. Hakimuddin","Comput. Sci. Dept., Univ. of Alcala, Alcala de Henares, Spain; Comput. Sci. Dept., Univ. of Alcala, Alcala de Henares, Spain; Comput. Sci. Dept., Univ. of Alcala, Alcala de Henares, Spain; Comput. Sci. Dept., Univ. of Alcala, Alcala de Henares, Spain; Dept. of Comput. Sci. & Eng., Manipal Inst. of Technol., Manipal, India","2010 IEEE/ACIS 9th International Conference on Computer and Information Science","30 Sep 2010","2010","","","729","733","Nowadays functional size measurement is a strategic key to deal with the management of software systems development. The origin of this importance is the fact that functional size measurement is the main input variable in software effort estimation systems. Nevertheless, to obtain precise functional size measurements it is not only necessary to have a lot of information of the system to be developed, but also software project planning is one of the early stages in the project. To solve this difficulty, one of the main software management research technique is centered in the study of methods to obtain precise functional size measurements early in the development phase for early functional size estimation. The functional size unit selected to do the study has been IFPUG because is the most widely used method.","","978-1-4244-8198-9","10.1109/ICIS.2010.12","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5591011","Software Management;Software Process;Software Measurement;Functional Size;IFPUG","Software;Size measurement;Software measurement;Estimation;Complexity theory;ISO standards;Measurement units","project management;software cost estimation;software development management;software maintenance;software metrics;standardisation","functional size estimation;IFPUG unit;software system development;software management;effort estimation;software project planning","","","","11","","30 Sep 2010","","","IEEE","IEEE Conferences"
"Using Web objects for estimating software development effort for Web applications","M. Ruhe; R. Jeffery; I. Wieczorek","Corp. Technol., Siemens AG, Germany; NA; NA","Proceedings. 5th International Workshop on Enterprise Networking and Computing in Healthcare Industry (IEEE Cat. No.03EX717)","23 Sep 2003","2003","","","30","37","Web development projects are certainly different from traditional software development projects and hence require differently tailored measures for accurate effort estimation. We investigate the suitability of a newly proposed size measure for Web development projects: Web objects. Web objects have been specifically developed for sizing Web applications and used for estimating effort in a COCOMO Il-like estimation model called WEBMO. However, no empirical validation has yet been published. We apply and validate the proposed Web object approach in the context of a small Australian Web development company, for the first time. Besides Web objects, we apply traditional function points as an effort predictor for Web applications. Effort estimation models based on Web objects are compared with models based on traditional function points using ordinary least squares regression (OLS). Tested on data from twelve Web applications, the estimates derived from estimation models using Web objects significantly outperformed models using function points, with a mean magnitude of relative error of 0.24 versus 0.33, respectively. Based on the results, it seems that Web objects are more suitable for effort estimation purposes of Web applications than traditional function points.","1530-1435","0-7695-1987-3","10.1109/METRIC.2003.1232453","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1232453","","Programming;Application software;Size measurement;Costs;Australia;Software measurement;Business;Object oriented modeling;Predictive models;Educational technology","object-oriented programming;software metrics;Web sites;Internet;software cost estimation;software performance evaluation;least mean squares methods","Web objects;software development estimation effort;Web application;Web development project;traditional software development project;software size measure;COCOMO Il;Web cost estimation model;WEBMO;traditional function point model;ordinary least squares regression;OLS;relative error magnitude","","20","","22","","23 Sep 2003","","","IEEE","IEEE Conferences"
"A comparative study on software reuse metrics and economic models from a traceability perspective","J. C. C. P. Mascena; E. S. de Almeida; S. R. de Lemos Meira","Recife Center for Adv. Studies & Syst., Fed. Univ. of Pernambuco, Brazil; Recife Center for Adv. Studies & Syst., Fed. Univ. of Pernambuco, Brazil; Recife Center for Adv. Studies & Syst., Fed. Univ. of Pernambuco, Brazil","IRI -2005 IEEE International Conference on Information Reuse and Integration, Conf, 2005.","12 Sep 2005","2005","","","72","77","A fundamental task when employing software reuse is evaluating its impacts by measuring the relation of reused and developed software, the cost for obtaining reuse and the cost avoided by reusing software during development and maintenance. Different reuse related metrics exist in the literature, varying from strictly code-based metrics, aiming to measure the amount of code reused in a product, to more elaborate cost-based metrics and models, aiming to measure the costs involved in reuse programs and to evaluate the impacts of reuse in software development. Although reuse is commonly claimed to benefit maintenance, the traceability problem is still neglected on the reuse metrics arena, despite its great impacts on software maintenance. Reuse metrics may be used as important support tools for dealing with the traceability between reused assets and their clients. The goal of this work is to evaluate the current state of the art on the reuse metrics area with special emphasis on code-based metrics, building on previous surveys with further analysis and considerations on the applicability of such metrics to reuse traceability.","","0-7803-9093-8","10.1109/IRI-05.2005.1506452","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1506452","","Software maintenance;Costs;Software measurement;Programming;Software quality;Information analysis;Software metrics;Productivity;Software systems;Computer industry","software metrics;software reusability;software maintenance;software cost estimation;software development management","software reuse metrics;cost-based metrics;software development;software maintenance;traceability problem","","6","","20","","12 Sep 2005","","","IEEE","IEEE Conferences"
"Value creation and capture: a model of the software development process","T. Little",NA,"IEEE Software","2 Aug 2004","2004","21","3","48","53","Landmark Graphics supplies software and services to the upstream oil and gas industry. Our software portfolio, which ranges from exploration and drilling to data management and decision analysis, includes more than 60 products consisting of over 50 million lines of source code. For many years, Landmark has been collecting project metrics we wished to harvest to gain insight into key business questions in three areas: optimal release cycle duration (scope/time trade-off), optimal project staffing levels, effects of uncertainty. We set out to develop a relatively simple project dynamics model to use in conjunction with market sensitivity and economic analysis to help optimize profitability. Some of our ideas and results are similar to those of Preston Smith and Donald Reinertsen, who examined the impact of time-to-market sensitivity. However, our approach is a more detailed model tuned to software development issues.","1937-4194","","10.1109/MS.2004.1293072","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1293072","","Programming;Productivity;Equations;Predictive models;Graphics;Cost function;Gas industry;Portfolios;Drilling;Investments","software cost estimation;software metrics;project management;computer graphics;value engineering;software development management","Landmark Graphics;data management;decision analysis;project metrics;optimal release cycle duration;optimal project staffing levels;uncertainty effects;project dynamics model;market sensitivity;economic analysis;profitability;time-to-market;software development process;value creation","","12","","19","","2 Aug 2004","","","IEEE","IEEE Magazines"
"Developing a design complexity measure","K. Littlejohn; M. Olis; R. Lentz; M. Barnett","Wright Res. & Dev. Center, Wright-Patterson AFB, OH, USA; NA; NA; NA","15th DASC. AIAA/IEEE Digital Avionics Systems Conference","6 Aug 2002","1996","","","31","36","The cost to develop and maintain software is increasing at a rapid rate. The majority of the total cost to develop software is spent in the post-deployment-maintenance phase of the software life-cycle. In order to reduce life-cycle costs, more effort needs to be spent in earlier phases of the software life-cycle. One characteristic that merits investigation is the complexity of a software design. Project performance metrics (i.e. effort, schedule, defect density, etc.) are driven by software complexity, and affect project costs. The Software Design Complexity Measure examines an organization's historical project performance metrics along with the complexity of a project's software design to estimate future project performance metrics. These estimates indicate costs that the evaluated software design will incur in the future. Equipped with future cost estimates, a project manager will be able to make more informed decisions concerning the future of the project.","","0-7803-3385-3","10.1109/DASC.1996.559130","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=559130","","Aerospace electronics;Software design;Costs;Phase measurement;Software maintenance;Software measurement;Variable speed drives;Hardware;Software performance;Project management","software cost estimation;software metrics;project management","design complexity;cost;post-deployment-maintenance;software life-cycle;research planning;project performance metrics;schedule;defect density;effort;prototype;software design;project manager","","1","","3","","6 Aug 2002","","","IEEE","IEEE Conferences"
"FPA and Quality Metrics in Contracts","H. v. Heeringen; H. Kuijpers; R. Scholten; F. S. Uiterkamp; D. Müller; J. Onvlee; H. Bernink; M. Pereboom",NA; NA; NA; NA; NA; NA; NA; NA,"2014 Joint Conference of the International Workshop on Software Measurement and the International Conference on Software Process and Product Measurement","5 Jan 2015","2014","","","171","172","Outsourcing software development projects continues to be a very difficult task for many organizations. They struggle with the questions they should ask in the 'Request for Proposal (RFP)' phase. These organizations wish to find the questions that enable them to compare the bidding suppliers in an objective, yet meaningful way and they wish to select the right supplier based on this comparison. In practice, the industry sees many RFP's that seem to comply to this goal, but when looked into a little detailed, it becomes obvious that in many cases the comparison is not objective and meaningful at all and even that in many cases the wrong supplier is selected, often resulting in failing projects. Repeatedly, suppliers argue with client organizations about the objective reasoning for missed offers and sometimes they even start legal actions.","","978-1-4799-4174-2","10.1109/IWSM.Mensura.2014.40","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7000098","Outsourcing;FPA;Contracting","Measurement;Contracts;Organizations;Software;Maintenance engineering;Conferences;Proposals","contracts;outsourcing;software cost estimation;software metrics;software quality","FPA;quality metrics;contracts;software development project outsourcing;request for proposal phase;RFP phase","","","","","","5 Jan 2015","","","IEEE","IEEE Conferences"
"Analyzing Data on Software Evolution Processes","H. M. Sneed; W. Prentner","ZT-Prentner-IT GmbH, Vienna, Austria; ZT-Prentner-IT GmbH, Vienna, Austria","2016 Joint Conference of the International Workshop on Software Measurement and the International Conference on Software Process and Product Measurement (IWSM-MENSURA)","9 Jan 2017","2016","","","1","10","This paper describes a tool supported process for evaluating software evolution processes using data analytics. Software evolution is concerned with correcting, changing and enhancing existing software systems. The evolution process is driven by error reports and change requests. The ISO-12207 standard prescribes how the process should be conducted. The approach presented here goes beyond simply checking if the process under investigation conforms to the prevailing standard. It collects data on the numbers and types of evolution requests as well as data on the time and effort required to implement them to determine if the evolution process is improving or degrading. For this, the error reports, change requests and time sheets are scanned to load a process performance database. There a numerical analysis is performed to measure the error and change rates for assessing process quality. Performance and usability data are also included in the quality assessment. In addition, the expended effort is analyzed in relation to the impact domain of the corrections and changes to determine the productivity rate. The number of reported errors and submitted change requests is essential to estimating the costs of future releases.","","978-1-5090-4147-3","10.1109/IWSM-Mensura.2016.013","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7809585","Software Evolution;Process measurement;Process assessment;numeric data analysis;product quality and complexity;productivity measurement;evolution cost projection","Software;Software measurement;Process control;Standards;Capability maturity model;Quality assessment;Productivity","data analysis;ISO standards;numerical analysis;software cost estimation;software metrics;software performance evaluation;software process improvement;software quality","metric-based process assessment;software evolution processes evaluation;data analytics;ISO-12207 standard;error reports;change requests;time sheets;process performance database;numerical analysis;error measure;process quality assessment;usability data;quality assessment;productivity rate determination;cost estimation","","1","","36","","9 Jan 2017","","","IEEE","IEEE Conferences"
"A reuse metrics and return on investment model","J. S. Poulin; J. M. Caruso",NA; NA,"[1993] Proceedings Advances in Software Reuse","6 Aug 2002","1993","","","152","166","It is argued that establishing a realistic return on investment on a reuse program is essential to inserting reuse into a corporate software development process, and that clearly stating the potential benefits of reuse in financial terms has proven to be a powerful motivator. A reuse metrics and return on investment (ROI) model that distinguish the savings and benefits from those already gained through accepted software engineering techniques are defined. Three reuse metrics are derived from readily available and observable software data elements. The metrics are used in the return on investment model to establish sound business justification for reuse.<>","","0-8186-3130-9","10.1109/ASR.1993.291707","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=291707","","Investments;Costs;System software;Software engineering;Programming;Software metrics;Inhibitors;Productivity;Statistics;Standards development","software cost estimation;software metrics;software reusability","reuse metrics;return on investment;corporate software development process;financial terms;ROI;savings;benefits;software engineering techniques;software data elements","","17","","26","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Determination of functional domains for use with functional size measurement-opportunities to classify software from a business perspective","C. A. Dekkers","Quality Plus Technol. Inc., Seminole, FL, USA","Proceedings 4th IEEE International Software Engineering Standards Symposium and Forum (ISESS'99). 'Best Software Practices for the Internet Age'","6 Aug 2002","1999","","","227","229","Functional size measurement (FSM) is the focus of ISO/IEC Project 14143. This project has five parts, ranging from the recently published Part 1 (""Concepts of FSM"") to Part 5 (""Determination of Functional Domains for Use with FSM""), which is in development as a Technical Report Type 2 (TR2). This paper outlines the basic principles of FSM and why the functional domain concept has been seen as important to the overall project success. It covers the rationale behind this sub-project, its relevance to the software engineering world and how the functional domain topic extends far beyond the realm of simple FSM. The paper profiles the state of the software industry today and how the classifications of software in modern literature are insufficient for the needs of FSM. The current state of this TR2-in-progress is also presented, together with the various opinions of the international community involved in its development.","1082-3670","0-7695-0068-4","10.1109/SESS.1999.766598","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=766598","","Size measurement;Embedded software;Software measurement;Computer industry;IEC standards;Measurement units;Software performance;Software quality;ISO;Writing","software cost estimation;software standards;ISO standards;software metrics;classification;commerce","functional domain determination;functional size measurement;software classification;business perspective;ISO/IEC Project 14143;Technical Report Type 2;software engineering;software industry;international community opinions","","","","","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Reducing cost in regression testing of web service","A. Chaturvedi","Indian Institute of Information Technology, Design and Manufacturing Jabalpur","2012 CSI Sixth International Conference on Software Engineering (CONSEG)","10 Nov 2012","2012","","","1","9","Regression testing and retesting of a modified Web Service can be very costly as it tends to generates large number of test cases. Regression testing cost can be reduced significantly by identifying and testing the modified portion of the Web Service only. This avoids the costly construction of new test cases and the unproductive rerunning of existing test cases when it can be guaranteed that the unmodified code of web service will produce the same results as it produced previously. In this paper, by designing Web service graph we propose an effective method of identifying the modified areas (in this paper area means code of web service to be tested) and use this information to reduce regression testing efforts. In this process, we define and use a set of metrics to categorize the testing of Web service. We demonstrate the applicability of the proposed approach using a case study that consisted of two steps. In the first step, we compared two versions of WSDL's to identify the inserted, modified and deleted areas of the Web services. Next, we use this information to generate the reduced test cases.","","978-1-4673-2177-8","10.1109/CONSEG.2012.6349498","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6349498","Regression testing;web service;XML Diff;WSDL","Testing;XML;Color;Measurement;Indexes;Simple object access protocol","program testing;regression analysis;software cost estimation;software metrics;Web services","regression retesting cost reduction;test case generation;regression testing cost reduction;Web service unmodified code;Web service graph design;software metrics;Web service inserted area identification;Web service modified area identification;Web service deleted area identification","","4","","24","","10 Nov 2012","","","IEEE","IEEE Conferences"
"A metrics-based software maintenance effort model","J. H. Hayes; S. C. Patel; L. Zhao","Dept. of Comput. Sci., Kentucky Univ., Lexington, KY, USA; NA; NA","Eighth European Conference on Software Maintenance and Reengineering, 2004. CSMR 2004. Proceedings.","24 Aug 2004","2004","","","254","258","We derive a model for estimating adaptive software maintenance effort in person hours, the adaptive maintenance effort model (AMEffMo). A number of metrics such as lines of code changed and number of operators changed were found to be strongly correlated to maintenance effort. The regression models performed well in predicting adaptive maintenance effort as well as provide useful information for managers and maintainers.","1534-5351","0-7695-2107-X","10.1109/CSMR.2004.1281427","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1281427","","Software maintenance;Costs;Software systems;Computer science;Predictive models;Programming;Information management;Software design;Software performance;Software development management","software maintenance;software metrics;software cost estimation","metrics-based software maintenance;adaptive maintenance effort model;software cost estimation","","27","","30","","24 Aug 2004","","","IEEE","IEEE Conferences"
"Detecting Clones in Business Applications","J. Guo; Y. Zou","Sch. of Comput. Queen's, Univ. Kingston, Kingston, ON; Sch. of Comput. Queen's, Univ. Kingston, Kingston, ON","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","91","100","A business application automates a collection of business processes. A business process describes how a set of logically related tasks are executed, ordered and managed by following business rules to achieve business objectives. An online bookstore business application contains several tasks such as buying a book, ordering a book, and sending out promotions. Business analysts specify business tasks and software developers implement these tasks. Throughout the lifetime of a business application, business analysts may clone (e.g., copy and slightly modify) business processes to handle special circumstances or promotions. Identifying these clones and removing them helps improve the efficiency of an organization. However most clone detection techniques are source code based not business process based. In this paper, we propose an approach that makes use of traditional source code detection techniques to detect clones in business applications. The effectiveness of our approach is demonstrated through a case study on 10 large open source business applications in the Apache Open for Business Project.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.12","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4656398","Clone detections;Business proecesses;Business applications","Business;Cloning;Books;XML;Organizations;HTML;Data mining","electronic commerce;retail data processing;software cost estimation;software maintenance;software metrics","clone detection techniques;business process;business objective;online bookstore business application;software developer;source code;e-commerce application;software maintenance effort cost reduction;software metrics","","3","","32","","24 Oct 2008","","","IEEE","IEEE Conferences"
"Using fuzzy theory for effort estimation of object-oriented software","M. R. Braz; S. R. Vergilio","Comput. Sci. Dept., Fed. Univ. of Parana, Curitiba, Brazil; Comput. Sci. Dept., Fed. Univ. of Parana, Curitiba, Brazil","16th IEEE International Conference on Tools with Artificial Intelligence","10 Jan 2005","2004","","","196","201","Estimating software effort and costs is a very important activity that includes very uncertain elements. The concepts of the fuzzy set theory has been successfully used for extending metrics such as FP and reducing human influence in the estimation process. However, when we consider object-oriented technologies, other models, such as the use case model, are used to represent the specification in the early stages of development. New metrics based on this model were proposed and the application of the fuzzy set theory in this context is also very important. This work introduces the metric FUSP (fuzzy use case size points) that allows gradual classifications in the estimation by using fuzzy numbers. Results of a study case show some advantages and limitations of the proposed metric.","1082-3409","0-7695-2236-X","10.1109/ICTAI.2004.119","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1374187","","Estimation theory;Object oriented modeling;Fuzzy set theory;Costs;Computer science;Humans;Context modeling;Uncertainty;Fuzzy systems;Lab-on-a-chip","fuzzy set theory;software cost estimation;software metrics;object-oriented methods;software quality","object-oriented software;software estimation;fuzzy set theory;use case model;software metrics;fuzzy use case size points","","9","","14","","10 Jan 2005","","","IEEE","IEEE Conferences"
"Analyzing the cost and benefit of pair programming","F. Padberg; M. M. Muller","Fak. fur Inf., Karlsruhe Univ., Germany; Fak. fur Inf., Karlsruhe Univ., Germany","Proceedings. 5th International Workshop on Enterprise Networking and Computing in Healthcare Industry (IEEE Cat. No.03EX717)","23 Sep 2003","2003","","","166","177","We use a combination of metrics to understand, model, and evaluate the impact of pair programming on software development. Pair programming is a core technique in the hot process paradigm of extreme programming. At the expense of increased personnel cost, pair programming aims at increasing both the team productivity and the code quality as compared to conventional development. In order to evaluate pair programming, we use metrics from three different categories: process metrics such as the pair speed advantage of pair programming; product metrics such as the module breakdown structure of the software; and project context metrics such as the market pressure. The pair speed advantage is a metric tailored to pair programming and measures how much faster a pair of programmers completes programming tasks as compared to a single developer. We integrate the various metrics using an economic model for the business value of a development project. The model is based on the standard concept of net present value. If the market pressure is strong, the faster time to market of pair programming can balance the increased personnel cost. For a realistic sample project, we analyze the complex interplay between the various metrics integrated in our model. We study for which combinations of the market pressure and pair speed advantage the value of the pair programming project exceeds the value of the corresponding conventional project. When time to market is the decisive factor and programmer pairs are much faster than single developers, pair programming can increase the value of a project, but there also are realistic scenarios where the opposite is true. Such results clearly show that we must consider metrics from different categories in combination to assess the cost-benefit relation of pair programming.","1530-1435","0-7695-1987-3","10.1109/METRIC.2003.1232465","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1232465","","Cost benefit analysis;Programming profession;Personnel;Productivity;Time to market;Electric breakdown;Velocity measurement;Displays;Keyboards;Mice","software metrics;cost-benefit analysis;software cost estimation;economics;time to market","software metrics;pair programming;extreme programming;net present value;cost benefit analysis;software development;product metrics;process metrics;module breakdown structure;project context metrics;market pressure;pair speed advantage;economic model;business value;time to market","","22","","14","","23 Sep 2003","","","IEEE","IEEE Conferences"
"SRS Based Estimation of Software Maintenance Effort","A. Tripathi; B. Kumar; A. Sharma; D. S. Kushwaha",NA; NA; NA; NA,"2012 Third International Conference on Computer and Communication Technology","10 Jan 2013","2012","","","154","155","Software maintenance effort estimation has always been a challenge for the software practitioners, as it consumes about half of the overall development costs. The effort required to develop or maintain software depend on the complexity of yet to be developed software. The proposed measure estimates the requirement-based complexity based on SRS document of yet to be developed software for systematic and early prediction of software maintenance effort using Software Requirements Specifications (SRS) document of the proposed software. The result obtained validates that, the proposed maintenance measure is a comprehensive one and compares well with various other prevalent measures proposed in the past. The computation of proposed maintenance effort estimation involves least overhead as compared to others.","","978-1-4673-3149-4","10.1109/ICCCT.2012.38","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6394686","requirement based complexity;requirement based maintenance complexity;requirement based maintenance effort estimation","Maintenance engineering;Complexity theory;Estimation;Productivity;Software maintenance;Software measurement","formal specification;software cost estimation;software maintenance;software metrics","SRS based estimation;software maintenance effort estimation;requirement-based complexity;SRS document;software requirement specifications;SRS","","","","10","","10 Jan 2013","","","IEEE","IEEE Conferences"
"An assessment of halstead and COCOMO model for effort estimation","C. Thirumalai; R. R. Shridharshan; L. R. Reynold","School of Information Technology and Engineering, VIT University, Vellore, India; MS in Software Engineering, School of Information Technology and Engineering, VIT University, Vellore, India; MS in Software Engineering, School of Information Technology and Engineering, VIT University, Vellore, India","2017 Innovations in Power and Advanced Computing Technologies (i-PACT)","4 Jan 2018","2017","","","1","4","This paper portrays a utilization of Maurice Halstead's product hypothesis' effect on modern programming languages like Python. The Halstead Metric and the product apparatus created for registering them are examined. Investigation of the metric information demonstrates that the level of the exchanging dialect was not consistent crosswise over algorithms and that product blunder information was not a straight capacity of volume. We also benchmark Halstead Metric against COCOMO II with respect to the accuracy of effort estimation.","","978-1-5090-5682-8","10.1109/IPACT.2017.8245069","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8245069","Halstead metric;COCOMO model;comparison;effort metric","Measurement;Programming;Complexity theory;Computer languages;Correlation;Conferences;Technological innovation","high level languages;project management;software cost estimation;software metrics","COCOMO model;halstead model;Halstead Metric;COCOMO II;product blunder information;exchanging dialect;effort estimation;Maurice Halstead's product hypothesis;modern programming languages;Python;product apparatus;metric information","","5","","34","","4 Jan 2018","","","IEEE","IEEE Conferences"
"Adapting the SIMAP productivity model to software maintenance","D. Dery; A. Abran","Quebec Univ., Montreal, Que., Canada; Quebec Univ., Montreal, Que., Canada","Proceedings 1995 Canadian Conference on Electrical and Computer Engineering","6 Aug 2002","1995","2","","1038","1041 vol.2","Industrial production firms have over time developed tools and models to ensure that productivity is measured and understood. This article suggests the use of such a model, the SIMAP model, for software maintenance. This article also shows how data could be organized and categorized in order to fully benefit from the SIMAP productivity model.","0840-7789","0-7803-2766-7","10.1109/CCECE.1995.526607","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=526607","","Productivity;Software maintenance;Computer industry;Software measurement;Costs;Software development management;Production;Time measurement;Portfolios;Information systems","software maintenance;software tools;software metrics;software cost estimation;human resource management","SIMAP productivity model;software maintenance;industrial production firms;software tools;software productivity measurement;software cost","","","","6","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Backfiring: converting lines of code to function points","C. Jones","Software Productivity Res. Inc., Burlington, MA, USA","Computer","6 Aug 2002","1995","28","11","87","88","The availability of empirical data from projects that use both function-point and lines-of-code metrics has led to a useful technique called backfiring. Backfiring is the direct mathematical conversion of LOC data into equivalent function-point data. Because the backfiring equations are bidirectional, they also provide a powerful way of sizing, or predicting, source-code volume for any known programming language or combination of languages. The function-point metric, invented by A.J. Albrecht of IBM in the middle 1970s, is a synthetic metric derived by a weighted formula that includes five elements: inputs, outputs, logical files, inquiries, and interfaces. IBM put it into the public domain in 1979, and its use spread rapidly, particularly after the formation of the International Function Point Users Group (IFPUG) in the mid-1980s. By then, hundreds of software projects had been measured using both function points and lines of source code. Since an application's function-point total is independent of the source code, this dual analysis has led to several important discoveries.<>","1558-0814","","10.1109/2.471193","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=471193","","Productivity;High level languages;Protection;Counterfeiting;Internet;Equations;Functional programming;Software;Power generation;Power generation economics","programming languages;software metrics;software cost estimation;human resource management;software development management","empirical data;software projects;function-point metrics;lines-of-code metrics;backfiring;direct mathematical conversion;bidirectional equations;source-code volume;programming language;inputs;outputs;logical files;inquiries;interfaces;function-point total","","12","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Formalizing COSMIC-FFP using ROOM","H. Diab; M. Frappier; R. St. Denis","Dept. de Math. et d'Inf., Sherbrooke Univ., Que., Canada; NA; NA","Proceedings ACS/IEEE International Conference on Computer Systems and Applications","7 Aug 2002","2001","","","312","318","We propose a formalization of the COSMIC Full Function Point (COSMIC-FFP) measure for the Real-time Object Oriented Modeling (ROOM) language. COSMIC-FFP is a measure of the functional size of software. It has been proposed by the COSMIC group as an adaptation of the function point measure for real-time systems. The definition of COSMIC-FFP is general and can be applied to any specification language. The benefits of our formalization are twofold. First it eliminates measurement variance, because the COSMIC informal definition is subject to interpretation by COSMIC-FFP raters, which may lead to different counts for the same specification, depending on the interpretation made by each rater. Second it allows the automation of COSMIC-FFP measurement for ROOM specifications, which reduces measurement costs. Finally, the formal definition of COSMIC-FFP can provide a clear and unambiguous characterization of COSMIC-FFP concepts which is helpful for measuring COSMIC-FFP for other object-oriented notations like UML.","","0-7695-1165-1","10.1109/AICCSA.2001.934002","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=934002","","Software measurement;Size measurement;Costs;Real time systems;Productivity;Quality management;Outsourcing;Software quality;Contracts;Measurement standards","software cost estimation;software metrics;real-time systems;object-oriented languages;specification languages;formal specification","COSMIC-FFP;ROOM language;COSMIC Full Function Point measure;Real-time Object Oriented Modeling language;software functional size;function point measure;specification language;formal specification;object-oriented notations;UML;software metrics","","12","","9","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Automated FPA (eFPA) in SAP Environment - Visions and Experiences of Automated Function Point Analysis","C. Kuijpers","DutchSoft Technol., Netherlands","2014 Joint Conference of the International Workshop on Software Measurement and the International Conference on Software Process and Product Measurement","5 Jan 2015","2014","","","72","78","Dynamic market conditions, changing technologies and continuous improvement require more IT financial transparency than ever. The market is characterized by large IT investments. Regarding the investments, managers require a clear understanding of the costs and require means to control them. The most effective metrics are those that are applicable during all stages of the development process. This paper describes an automated FPA solution called eFPA that is based on counting system components in a reusable way. The eFPA is based on a digital delivery of system objects from a repository. There is no specific knowledge of FPA necessary. eFPA provides the ability to calculate quickly and calculate variants to perform intermediate counts during the project.","","978-1-4799-4174-2","10.1109/IWSM.Mensura.2014.35","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7000079","function points;functional size measurement;SAP;automated counting","Standards;Software;Size measurement;Investment;Companies","software cost estimation;software metrics","eFPA;SAP environment;automated function point analysis;dynamic market conditions;changing technologies;continuous improvement;IT financial transparency;IT investments;development process;automated FPA solution;counting system components;system objects digital delivery;functional size measurement","","3","","6","","5 Jan 2015","","","IEEE","IEEE Conferences"
"Living with function points","A. Lubashevsky","AT&T Bell Labs., Warren, NJ, USA","Proceedings of NOMS '96 - IEEE Network Operations and Management Symposium","6 Aug 2002","1996","2","","632","635 vol.2","The number of people who develop software at AT&T Bell Laboratories has grown steadily since the 1960's. Major productivity improvements were made, but efforts to reliably measure them were unsuccessful. With more than half of its technical people working on software projects and one in every 12 employees in AT&T now involved in one way or another in the creation of software, a major effort to produce world-class software is underway. The key to this new program is a shift from counting lines of code to using function points to size software projects. Improved predictability, simplified designs, contained feature creep, and reduced redundancy are the direct results of deploying formal function point analysis (FPA). Estimates of the effort required to do a job are twice as accurate with FPA as with conventional methods. This presentation describes: the software initiative at AT&T, the history of usage of FPA in AT&T, source lines of code (SLOC) vs. function points and the best current practices, automation of the function point count and estimation process, changes in AT&T's metrics policy and experiences in measurements based on FPA. The bumpy road of software measurement, the problems in estimating software project size and effort, and some positive results of using a measurement program are also discussed.","","0-7803-2518-4","10.1109/NOMS.1996.539637","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=539637","","Software measurement;Current measurement;Size measurement;USA Councils;Internet;Productivity;Creep;Redundancy;History;Automation","software metrics;software cost estimation","AT&T Bell Laboratories;software projects;function points;formal function point analysis;software initiative;source lines of code;estimation process;function point count;metrics policy;software measurement;project size","","1","","","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Enhancing the Cocomo estimation models","J. Hale; A. Parrish; B. Dixon; R. K. Smith","Dept. of Inf. Syst., Stat. & Manage. Sci., Alabama Univ., Tuscaloosa, AL, USA; NA; NA; NA","IEEE Software","6 Aug 2002","2000","17","6","45","49","In software engineering, team task assignments appear to have a significant potential impact on a project's overall success. The authors propose task assignment effort adjustment factors that can help tune existing estimation models. They show significant improvements in the predictive abilities of both Cocomo I and II by enhancing them with these factors.","1937-4194","","10.1109/52.895167","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=895167","","Concurrent computing;Project management;State estimation;Productivity;Programming profession;Veins;Application software;Time measurement;Government;Procurement","software cost estimation;project management;software development management;software metrics;human resource management;personnel","Cocomo estimation models;software engineering;team task assignments;project success;task assignment effort adjustment factors;estimation models;predictive abilities;Cocomo II;Cocomo I","","9","","10","","6 Aug 2002","","","IEEE","IEEE Magazines"
"A metrics-based decision support tool for software module interfacing technique selection to lower maintenance cost","W. R. Bitman","Appl. Phys. Lab., Johns Hopkins Univ., Baltimore, MD, USA","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","170","178","The Interfacing Techniques Comparison Graph visually compares applications in terms of attributes that relate to maintenance cost. Applications that have both lower coupling and lower complexity lie closer to the origin of the graph and exhibit lower maintenance cost than those that do not. The study supports the idea that compositional techniques are important for achieving these improved metrics. The graph can be used in three ways. First it serves as a decision support tool for managers to determine whether expected maintenance savings compensate for the additional training, effort and time needed to support compositional development. Second, it functions as a decision support tool for designers and coders as they determine, for each module interface, whether to use coupled techniques or composition. The graph can help identify those situations in which the long term cost gain justifies the extra time needed for compositional design. Third, it can serve as a maintenance cost estimation tool. The study found a close correlation between predicted and actual maintenance effort.","","0-7695-0403-5","10.1109/METRIC.1999.809738","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809738","","Software tools;Costs;Software maintenance;Software quality;Application software;Management training;Software design;Libraries;Physics;Laboratories","software metrics;software maintenance;decision support systems;graph theory","metrics based decision support tool;software module interfacing technique selection;maintenance cost;Interfacing Techniques Comparison Graph;compositional techniques;decision support tool;expected maintenance savings;compositional development;module interface;coupled techniques;long term cost gain;compositional design;maintenance cost estimation tool;maintenance effort","","","","22","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Early metrics for object oriented designs","B. Baldassari; C. Robach; L. du Bousquet","LCIS, INP Grenoble, Valence, France; LCIS, INP Grenoble, Valence, France; NA","First International Workshop onTestability Assessment, 2004. IWoTA 2004. Proceedings.","16 May 2005","2004","","","62","69","To produce high quality object-oriented systems, a strong emphasis on the development process is necessary. This implies two implicit and complementary goals. First, to ensure a full control over the whole process, enabling accurate cost and delay estimation, resource efficient management, and a better overall understanding. Second, to improve quality all along the system lifecycle at development and maintenance stage. On the client side, a steady control over the development process implies a better detection and elimination of faults, raising the viability and usability of the system. This paper introduces a realistic example of metrics integration in the development process of object-oriented software. By addressing early stages of the design (ie. class diagram), we can anticipate design-level errors or warnings thus enabling a reduction of immediate and further costs and problems. Metrics used are issued from state of the art object-oriented research, and integrated in the widespread unified process of software development.","","0-7803-8851-8","10.1109/IWOTA.2004.1428417","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1428417","","Software quality;Testing;Costs;Delay estimation;Programming;Indium phosphide;Resource management;Control systems;Fault detection;Software engineering","software quality;program testing;object-oriented programming;software metrics;software cost estimation;software maintenance","early metrics;object oriented designs;cost estimation;delay estimation;resource efficient management;quality;software development;maintenance;development process;object-oriented software;class diagram","","","","25","","16 May 2005","","","IEEE","IEEE Conferences"
"A comparison of approaches to reuse investment analysis","J. Favaro","Intecs Sistemi SpA, Pisa, Italy","Proceedings of Fourth IEEE International Conference on Software Reuse","6 Aug 2002","1996","","","136","145","Software reuse economics has been the subject of vigorous study over the past few years. Although significant progress has been made in the areas of reuse metrics and cost estimation, work to date in reuse investment analysis has not always reflected accepted mainstream financial analysis practices. This paper compares several approaches that have been described in the reuse literature, points out known problems and indicates remedies.","","0-8186-7301-X","10.1109/ICSR.1996.496121","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=496121","","Investments;Software reusability;Bridges;Programming;Cost benefit analysis;Software engineering;Solids;Profitability;Books;Financial management","software reusability;investment;DP industry;economics;software cost estimation;software metrics;software management","software reuse investment analysis;software reuse metrics;software cost estimation;financial analysis practices;net present value;cashflow;discount rate;internal rate of return;payback;profitability index;book value;amortization","","18","","22","","6 Aug 2002","","","IEEE","IEEE Conferences"
"A cost effectiveness indicator for software development","H. Erdogmus","NRC Institute for Information Technology, Canada","First International Symposium on Empirical Software Engineering and Measurement (ESEM 2007)","15 Oct 2007","2007","","","446","448","Product quality, development productivity, and staffing needs are main cost drivers in software development. The paper proposes a cost-effectiveness indicator that combines these drivers using an economic criterion.","1949-3789","978-0-7695-2886-1","10.1109/ESEM.2007.47","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4343774","","Costs;Programming;Productivity;Production;Remuneration;Economic indicators;Software engineering;Software measurement;Information technology","software cost estimation;software metrics;software quality","software development productivity;software cost effectiveness indicator;software product quality;software staffing metrics","","","","10","","15 Oct 2007","","","IEEE","IEEE Conferences"
"A Quasi-experiment for Effort and Defect Estimation Using Least Square Linear Regression and Function Points","N. N. T. Jr.; M. B. Ribeiro; D. D. Ruiz","NA; Fac. of Inf., Pontifical Catholic Univ. of Rio Grande do Sul, Porto Alegre, Brazil; Fac. of Inf., Pontifical Catholic Univ. of Rio Grande do Sul, Porto Alegre, Brazil","2008 32nd Annual IEEE Software Engineering Workshop","17 Nov 2009","2008","","","143","151","Software companies are currently investing large amounts of money in software process improvement initiatives in order to enhance their products' quality. These initiatives are based on software quality models, thus achieving products with guaranteed quality levels. In spite of the growing interest in the development of precise prediction models to estimate effort, cost, defects and other project's parameters, to develop a certain software product, a gap remains between the estimations generated and the corresponding data collected in the project's execution. This paper presents a quasi-experiment reporting the adoption of effort and defect estimation techniques in a large worldwide IT company. Our contributions are the lessons learned during (a) extraction and preparation of project historical data, (b) the use of estimation techniques on these data, and (c) the analysis of the results obtained. We believe such lessons can contribute to the improvement of the state-of-the-art in prediction models for software development.","1550-6215","978-0-7695-3617-0","10.1109/SEW.2008.20","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5328367","metrics estimation;linear regression;human judgment approaches","Least squares approximation;Linear regression;Costs;Programming;Software quality;Predictive models;ISO standards;IEC standards;Quality management;Conferences","least squares approximations;project management;regression analysis;software cost estimation;software development management;software maintenance;software metrics;software process improvement;software quality","defect estimation;effort estimation;least square linear regression;function point;software process improvement;product quality enhancement;software quality model;software cost estimation;project historical data preparation","","","","18","","17 Nov 2009","","","IEEE","IEEE Conferences"
"CBSE: can we count the cost?","A. Vickers","Dept. of Comput. Sci., York Univ., UK","Proceedings Fifth International Symposium on Assessment of Software Tools and Technologies","6 Aug 2002","1997","","","95","97","Component-based software engineering (CBSE) offers a new approach to the development of large software-intensive systems. To fully exploit CBSE technology, organisations will need to consider how this technology is best transferred, institutionalised and evolved within the organisation. The author outlines five CBSE technology risk areas and discusses the manner in which metrics could be used to help control the risks and to count the cost of the transfer.","","0-8186-7940-9","10.1109/AST.1997.599917","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=599917","","Costs;Computer science;Software engineering;History;Databases;Joining processes;Computer aided software engineering;Runtime;Timing;Pipelines","software engineering;subroutines;software cost estimation;large-scale systems;technology transfer;risk management;software metrics;software development management","component-based software engineering;large software-intensive systems;technology transfer;technology institutionalization;technology evolution;technology risk areas;metrics;cost","","","","2","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Assessing the maintainability benefits of design restructuring using dependency analysis","R. Leitch; E. Stroulia","MacDonald, Dettwiler & Associates Ltd., Richmond, BC, Canada; NA","Proceedings. 5th International Workshop on Enterprise Networking and Computing in Healthcare Industry (IEEE Cat. No.03EX717)","23 Sep 2003","2003","","","309","322","Software developers and project managers often have to assess the quality of software design. A commonly adopted hypothesis is that a good design should cost less to maintain than a poor design. We propose a model for quantifying the quality of a design from a maintainability perspective. Based on this model, we propose a novel strategy for predicting the ""return on investment"" (ROI) for possible design restructurings using procedure level dependency analysis. We demonstrate this approach with two exploratory Java case studies. Our results show that common low level source code transformations change the system dependency structure in a beneficial way, allowing recovery of the initial refactoring investment over a number of maintenance activities.","1530-1435","0-7695-1987-3","10.1109/METRIC.2003.1232477","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1232477","","Costs;Predictive models;Investments;Software design;Regression analysis;Business;Software quality;Quality management;Project management;Software development management","software maintenance;software quality;software cost estimation;systems re-engineering;cost-benefit analysis;software metrics","software design restructuring;procedure level dependency analysis;software quality;software maintenance;software cost estimation","","8","","14","","23 Sep 2003","","","IEEE","IEEE Conferences"
"Assessing Overhead Cost Associated with Encrypting Swap File","B. AlBelooshi; K. Salah; T. Marin; A. Bentiba","Dept. of Electr. & Comput. Eng., Khalifah Univ. of Sci., Technol. & Res., Sharjah, United Arab Emirates; Dept. of Electr. & Comput. Eng., Khalifah Univ. of Sci., Technol. & Res., Sharjah, United Arab Emirates; Dept. of Electr. & Comput. Eng., Khalifah Univ. of Sci., Technol. & Res., Sharjah, United Arab Emirates; Dept. of Electr. & Comput. Eng., Khalifah Univ. of Sci., Technol. & Res., Sharjah, United Arab Emirates","2012 IEEE 11th International Conference on Trust, Security and Privacy in Computing and Communications","6 Sep 2012","2012","","","1119","1123","Privacy and security of information are two important concerns for most computer users. Passwords, keys, and encrypted information can be found unencrypted in the swap file which is used by the operating systems to support the implementation of virtual memory. Therefore, encrypting the swap file is essential to provide more security of users' private and confidential information. However, encrypting the swap file comes with an extra overhead cost. In this paper, we measure the overhead cost associated with encrypting the swap file. To effectively measure this cost, we developed our own benchmarks that will enforce heavy swapping with disk write and read operations. We measured the overhead cost for Windows 7 operating system. In our measurements, we considered a number of popular encryption algorithms which include AES, Blowfish, Twofish, and GOST. Our experimental measurements show that Windows 7 incurs considerable overhead penalties when encrypting the swap file.","2324-9013","978-1-4673-2172-3","10.1109/TrustCom.2012.96","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6296101","Swap file;Encryption;Operating system security;virtual memory","Encryption;Benchmark testing;Writing;Operating systems;Random access memory;Memory management","cryptography;operating systems (computers);software cost estimation;software metrics;virtual storage","overhead cost assessment;swap file encryption;information privacy;information security;virtual memory;cost measurement;Windows 7 operating system;AES encryption algorithm;Blowfish encryption algorithm;Twofish encryption algorithm;GOST encryption algorithm","","1","","8","","6 Sep 2012","","","IEEE","IEEE Conferences"
"Estimating the size, cost, and types of Technical Debt","B. Curtis; J. Sappidi; A. Szynkarski","CAST, Fort Worth, Texas, USA; CAST, New York, NY, USA; CAST, Paris, France","2012 Third International Workshop on Managing Technical Debt (MTD)","28 Jun 2012","2012","","","49","53","This study summarizes results of a study of Technical Debt across 745 business applications comprising 365 million lines of code collected from 160 companies in 10 industry segments. These applications were submitted to a static analysis that evaluates quality within and across application layers that may be coded in different languages. The analysis consists of evaluating the application against a repository of over 1200 rules of good architectural and coding practice. A formula for estimating Technical Debt with adjustable parameters is presented. Results are presented for Technical Debt across the entire sample as well as for different programming languages and quality factors.","","978-1-4673-1749-8","10.1109/MTD.2012.6226000","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6226000","software metrics;software structural quality;technical debt;static analysis;benchmarking","Organizations;Software;Production;Encoding;ISO standards;Industries","business data processing;program diagnostics;programming languages;software architecture;software cost estimation;software performance evaluation;software quality","size estimation;cost estimation;technical debt;business applications;industry segments;static analysis;quality evaluation;repository;architectural practice;coding practice;adjustable parameters;programming languages;quality factors","","35","","10","","28 Jun 2012","","","IEEE","IEEE Conferences"
"Development and application of composite complexity models and a relative complexity metric in a software maintenance environment","J. S. Sherif; J. M. Hops","California State Univ., Fullerton, CA, USA; NA","Wescon/96","6 Aug 2002","1996","","","514","526","A great deal of effort is now being devoted to the study, analysis, prediction, and minimization of expected software maintenance cost, long before software is delivered to users or customers. It had been estimated that, on the average, the effort spent on software maintenance is as costly as the effort spent on all other software stages. Ways to alleviate software maintenance complexity and high costs should originate in software design. Two aspects of maintenance deserve attention: protocols for locating and rectifying defects and ensuring that no new defects are introduced in the development phase of the software process, and development of protocols for increasing the quality and reducing the costs associated with modification, enhancement, and upgrading of software. This article focuses on the second aspect and puts forward newly developed parsimonious models and a relative complexity metric for complexity measurement of software that were used to rank the modules in the system relative to each other. Significant success was achieved by use of the models and relative metric to identify maintenance-prone modules.","1095-791X","0-7803-3274-1","10.1109/WESCON.1996.554559","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=554559","","Software maintenance;Costs;Protocols;Software quality;Software performance;Application software;Predictive models;Software design;Software measurement;Software metrics","software metrics;software maintenance;software cost estimation;systems analysis;program debugging;software quality","composite complexity models;complexity metric;software maintenance;software cost;software design;software defects;software quality;software upgrading","","","","33","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Digging the Development Dust for Refactorings","C. Schofield; B. Tansey; Zhenchang Xing; E. Stroulia","University of Alberta, Canada; Comput. Sci. Dept., Alberta Univ., Edmonton, Alta.; Comput. Sci. Dept., Alberta Univ., Edmonton, Alta.; Comput. Sci. Dept., Alberta Univ., Edmonton, Alta.","14th IEEE International Conference on Program Comprehension (ICPC'06)","26 Jun 2006","2006","","","23","34","Software repositories are rich sources of information about the software development process. Mining the information stored in them has been shown to provide interesting insights into the history of the software development and evolution. Several different types of information have been extracted and analyzed from different points of view. However, these types of information have not been sufficiently cross-examined to understand how they might complement each other. In this paper, we present a systematic analysis of four aspects of the software repository of an open source project - source-code metrics, identifiers, return-on-investment estimates, and design differencing - to collect evidence about refactorings that may have happened during the project development. In the context of this case study, we comparatively examine how informative each piece of information is towards understanding the refactoring history of the project and how costly it is to obtain","1092-8138","0-7695-2601-2","10.1109/ICPC.2006.18","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1631102","","History;Data mining;Information analysis;Open source software;Information resources;Programming;Chaos;Pattern recognition;Algorithm design and analysis;Merging","configuration management;data mining;project management;public domain software;software cost estimation;software metrics;software prototyping;systems re-engineering","software repository;software project development process;information mining;software evolution;open source project;source-code metrics;program identifiers;return-on-investment estimates;software project refactoring history;software cost estimation","","8","","21","","26 Jun 2006","","","IEEE","IEEE Conferences"
"Activity based software costing","C. Jones","Software Productivity Res. Inc., Burlington, MA, USA","Computer","6 Aug 2002","1996","29","5","103","104","The study of software economics is not yet mature. For many years, the lines of code (LOG) metrics has tended to conceal major software cost drivers such as the production of requirements, plans, specifications, manuals, and other paper documents. The advent of function point metrics in the late 1970s allowed us to explore the measurement of such noncoding activities, none of which could be properly explored or normalized using LOC metrics. Indeed, we now know that on some projects (such as large defense systems) the cost to produce paper documents is twice as much as the cost to produce the code itself. The ability to measure all activities associated with software production has led to the concept of activity-based studies of software cost. The paper discusses the approach.","1558-0814","","10.1109/2.494092","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=494092","","Costing;Application software;Personnel;Lab-on-a-chip;Programming profession;Production;Cost function;Area measurement;Urban areas;Software measurement","software cost estimation;software development management;software metrics","activity based software costing;software economics;lines of code metrics;software cost drivers;requirements engineering;specifications;function point metrics;large defense systems;software production","","1","","","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Quantitative Modeling of Communication Cost for Global Service Delivery","N. Zhou; Q. Ma; K. Ratakonda","T.J. Watson Res. Center, IBM, Hawthorne, NY, USA; Res. Center, IBM China, Beijing, China; T.J. Watson Res. Center, IBM, Hawthorne, NY, USA","2009 IEEE International Conference on Services Computing","13 Oct 2009","2009","","","388","395","IT service providers are increasingly utilizing globally distributed resources to drive down costs, reduce risk through diversification and gain access to a larger talent pool. However, fostering effective collaboration among geographically distributed resources is a difficult challenge. In this paper, we present our initial attempt to quantify the increased overhead in leveraging distributed resources as one of the project costs. We associate this overhead cost measurement with metrics that measure communication quality, such as reduction in productivity and communication delay. These metrics can in turn be computed as functions of underlying project parameters. To achieve this goal, we first build a project communication model (PCM) to categorize different types of collaborative communication. We then represent communication efficiency and changes in resource availability in terms of information theoretic concepts such as reduced channel capacity, information encoding efficiency and channel availability. This analysis is used to help determine the cost associated with team formation and task distribution during the project planning phase.","","978-1-4244-5183-8","10.1109/SCC.2009.79","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5283925","globalization;communication cost;project management;team structure;communication channel","Costs;Natural languages;Middleware;Humans;Assembly;System testing;Application software;Natural language processing;TV;Ontologies","project management;risk analysis;software cost estimation;software development management;software metrics;team working","quantitative modeling;communication cost;global service delivery;IT service provider;distributed resource;project cost measurement;software metrics;communication quality measurement;project communication model;PCM;collaborative communication;information theoretic concept;reduced channel capacity;information encoding efficiency;channel availability;team formation;task distribution;project planning phase;risk analysis","","8","","13","","13 Oct 2009","","","IEEE","IEEE Conferences"
"Systematic Literature Review on Software Effort Estimation Using Machine Learning Approaches","P. Sharma; J. Singh","Comput. Sci. & Eng., Chitkara Univ., Rajpura, India; Comput. Sci. & Eng., Chitkara Univ., Rajpura, India","2017 International Conference on Next Generation Computing and Information Systems (ICNGCIS)","4 Nov 2018","2017","","","43","47","Accurate effort estimation is amongst the key activities in the software project development. It directly impacts the time and cost of the software projects. This paper presents a systematic literature review of software effort estimation techniques using machine learning. This review presents a discussion about the research trends in machine learning inspired software effort estimation. The results of the systematic review has concluded prominent trends of machine learning approaches, size metrics, benchmark datasets, validation methods etc. used for software effort estimation.","","978-1-5386-4205-4","10.1109/ICNGCIS.2017.33","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8520309","Systematic Literature Review;Effort estimation;Machine learning approaches","Estimation;Software;Machine learning;Measurement;Systematics;Bibliographies;Libraries","learning (artificial intelligence);project management;software cost estimation;software development management;software metrics","software effort estimation techniques;software projects;software project development;machine learning approaches;systematic literature review","","1","","47","","4 Nov 2018","","","IEEE","IEEE Conferences"
"An investigation of code cycles and Poltergeist anti-pattern","S. R. A. Al-Rubaye; Y. E. Selcuk","Department of Computer Engineering, Yildiz Technical University, Davutpasa, 34220, Istanbul, Turkiye; Department of Computer Engineering, Yildiz Technical University, Davutpasa, 34220, Istanbul, Turkiye","2017 8th IEEE International Conference on Software Engineering and Service Science (ICSESS)","23 Apr 2018","2017","","","139","140","The aim of this paper is to propose a method for detecting the Poltergeist anti-pattern. Anti-patterns are poor designs that lower software quality, especially by increasing complexity and decreasing maintainability. As maintenance of software projects costs as much as their development, it is necessary to detect poorly designed code and refactor it.","2327-0594","978-1-5386-0497-7","10.1109/ICSESS.2017.8342882","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8342882","anti-patterns;poltergeist;cycle detection","Tools;Software quality;Maintenance engineering;Java;Measurement;Prototypes","project management;software cost estimation;software development management;software maintenance;software metrics;software quality","code cycles;software quality;software complexity;software maintainability;Poltergeist antipattern;software project costs","","","","14","","23 Apr 2018","","","IEEE","IEEE Conferences"
"Measuring software product quality: a survey of ISO/IEC 9126","Ho-Won Jung; Seung-Gweon Kim; Chang-Shin Chung","Dept. of Bus. Adm., Korea Univ., Seoul, South Korea; Dept. of Bus. Adm., Korea Univ., Seoul, South Korea; NA","IEEE Software","4 Oct 2004","2004","21","5","88","92","To address the issues of software product quality, the Joint Technical Committee 1 of the International Organization for Standardization and International Electrotechnical Commission published a set of software product quality standards known as ISO/IEC 9126. These standards specify software product quality's characteristics and subcharacteristics and their metrics. Based on a user survey, this study of the standard helps clarity quality attributes and provides guidance for the resulting standards.","1937-4194","","10.1109/MS.2004.1331309","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1331309","ISO/IEC 9126;software quality model standards","Software measurement;Software quality;ISO standards;IEC standards;Software packages;Packaging;Writing;Software standards;Multidimensional systems;Standards development","software quality;software metrics;software standards;software cost estimation","software product quality;ISO standard;IEC standard;quality characteristics","","129","","12","","4 Oct 2004","","","IEEE","IEEE Magazines"
"Reliability of COSMIC Functional Size Measurement Results: A Multiple Case Study on Industry Cases","O. O. Top; O. Demirors; B. Ozkan","Inf. Inst., Middle East Tech. Univ., Ankara, Turkey; Inf. Inst., Middle East Tech. Univ., Ankara, Turkey; Inf. Inst., Middle East Tech. Univ., Ankara, Turkey","2009 35th Euromicro Conference on Software Engineering and Advanced Applications","8 Dec 2009","2009","","","327","334","Accuracy of the functional size is critical in software project management, since functional size is the most prevalent input for effort and cost estimation models. Functional size measurement is performed based on standardized manuals; however, the accuracy of FSM results is still based on the knowledge and cautions of the measurers. In this study we performed a multiple case study to identify the reliability of COSMIC and to observe the frequently encountered errors during functional size measurement. Problems in the individual learning process and the clarity of the guidelines are distinguished as the two main causes that impact the accuracy of the measurement results.","2376-9505","978-0-7695-3784-9","10.1109/SEAA.2009.17","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5349939","Functional Size Measurement;COSMIC;Reliability","Size measurement;ISO standards;Informatics;Cost function;Performance evaluation;Application software;Project management;Guidelines;IEC standards;Software measurement","project management;software cost estimation;software management;software metrics;software reliability;software standards","COSMIC functional size measurement;software project management;cost estimation models;standardized manuals","","9","","29","","8 Dec 2009","","","IEEE","IEEE Conferences"
"An experimental comparison of software effort estimation methods of ORM based 4GL software applications","M. Tanrıverdi; Ö. Ö. Tanrıöver","Computer Engineering, Ankara University, Ankara, Turkey; Computer Engineering, Ankara University, Ankara, Turkey","2017 International Conference on Computer Science and Engineering (UBMK)","2 Nov 2017","2017","","","239","243","Software effort estimation is important in planning and project budgeting for both developers and customers. Although there are many popular effort estimation techniques which have gone through significant developments in the past, software development methodologies and technologies are developing rapidly as a result of the need to improve the existing models. To this end, this paper compares and analyses three popular methods, namely COCOMO II, COSYSMO and Advanced COSTMO-4GL when used with ORM based fourth-generation-language software applications. COSYSMO is found to give better estimation than COSTMO-4GL for both pure 4GL and with ORM components included.","","978-1-5386-0930-9","10.1109/UBMK.2017.8093382","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8093382","Software Effort Estimation;COCOMO II;COSYSMO;COSTMO-4GL;4GL;Object Relational Mapping","Estimation;Performance evaluation;Radio frequency","project management;software cost estimation;software development management;software metrics","project budgeting;software development methodologies;fourth-generation-language software applications;Advanced COSTMO-4GL method;COSYSMO method;COCOMO II method;ORM based 4GL software applications;software effort estimation methods","","","","19","","2 Nov 2017","","","IEEE","IEEE Conferences"
"Early Web size measures and effort prediction for Web costimation","E. Mendes; N. Mosley; S. Counsell","Dept. of Comput. Sci., Auckland Univ., New Zealand; NA; NA","Proceedings. 5th International Workshop on Enterprise Networking and Computing in Healthcare Industry (IEEE Cat. No.03EX717)","23 Sep 2003","2003","","","18","39","Size measures for Web costimation proposed in the literature are invariably related to implemented Web applications. Even when targeted at measuring functionality based on function point analysis, researchers only considered the final Web application, rather than requirements documentation generated using any existing Web development methods. This makes their usefulness as early effort predictors questionable. In addition, it is believed that company-specific data provide a better basis for accurate estimates. Many software engineering researchers have compared the accuracy of company-specific data with multiorganisation databases. However the datasets employed were comprised of data from conventional applications. To date no similar comparison has been adopted for Web project datasets. It has two objectives: The first is to present a survey where early size measures for Web costimation were identified using data collected from 133 Web companies worldwide. All companies included in the survey used Web forms to give quotes on Web development projects, based on gathered size measures. The second is to compare the prediction accuracy of a Web company-specific data with data from a multiorganisation database. Both datasets were obtained via Web forms, used as part of a research project called Tukutuku. Our results show that best predictions were obtained for company-specific dataset, for the two estimation techniques employed.","1530-1435","0-7695-1987-3","10.1109/METRIC.2003.1232452","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1232452","","Size measurement;Application software;Java;Costs;Databases;Computer science;HTML;Software engineering;Predictive models;XML","Internet;case-based reasoning;software cost estimation;software metrics","Web costimation;function point analysis;Web development method;company-specific data accuracy;multiorganisation database;Web project dataset;Tukutuku research project;cost estimation;cost prediction model;case-based reasoning;empirical study;Internet;Web measurement;Web metrics;regression model","","23","","39","","23 Sep 2003","","","IEEE","IEEE Conferences"
"Return on investment of software quality predictions","T. M. Khoshgoftaar; E. B. Allen; W. D. Jones; J. P. Hudepohl","Florida Atlantic Univ., Boca Raton, FL, USA; NA; NA; NA","Proceedings. 1998 IEEE Workshop on Application-Specific Software Engineering and Technology. ASSET-98 (Cat. No.98EX183)","6 Aug 2002","1998","","","145","150","Software quality classification models can be used to target reliability enhancement efforts toward high risk modules. We summarize a generalized classification rule which we have proposed. Cost aspects of a software quality classification model are discussed. The contribution of this paper is a demonstration of how to assess the return on investment of model accuracy, in the context of a software quality classification model. An industrial case study of a very large telecommunications system illustrates the method. The dependent variable of the model was the probability that a module will have faults discovered by customers. The independent variables were software product and process metrics. The model is compared to random selection of modules for reliability enhancement. Calculation of return on investment can guide selection of the generalized classification rule's parameter so that the model is well-suited to the project.","","0-8186-8582-4","10.1109/ASSET.1998.688249","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=688249","","Investments;Software quality;Software systems;Risk management;Context modeling;Embedded software;Automatic testing;Predictive models;Costs;Communication industry","investment;software cost estimation;software quality;software reliability;telecommunication computing;software metrics","return on investment;software quality predictions;software quality classification models;software reliability;software cost;industrial case study;large telecommunications system;process metrics","","8","","9","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Estimation of software defects fix effort using neural networks","Hui Zeng; D. Rine","Sch. of Inf. & Technol., George Mason Univ., Fairfax, VA, USA; NA","Proceedings of the 28th Annual International Computer Software and Applications Conference, 2004. COMPSAC 2004.","18 Oct 2004","2004","2","","20","21 vol.2","Software defects fix effort is an important software development process metric that plays a critical role in software quality assurance. People usually like to apply parametric effort estimation techniques using historical lines of code and function points data to estimate effort of defects fixes. However, these techniques are neither efficient nor effective for a new different kind of project's fixing defects when code will be written within the context of a different project or organization. In this paper, we present a solution for estimating software defect fix effort using self-organizing neural networks.","0730-3157","0-7695-2209-2","10.1109/CMPSAC.2004.1342658","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1342658","","Neural networks;Software quality;System testing;Programming;Input variables;Software maintenance;Computer science;Quality management;Resource management;Software development management","software cost estimation;software quality;self-organising feature maps;software metrics","software defect fix effort estimation;software development process metric;software quality assurance;function points data;self-organizing neural network","","11","","7","","18 Oct 2004","","","IEEE","IEEE Conferences"
"Analysis of effort estimation based on software project models","P. Jodpimai; P. Sophatsathit; C. Lursinsap","Advanced Virtual and Intelligent Computing (AVIC) Center, Department of Mathematics, Faculty of Science, Chulalongkorn University, Bangkok, Thailand; Advanced Virtual and Intelligent Computing (AVIC) Center, Department of Mathematics, Faculty of Science, Chulalongkorn University, Bangkok, Thailand; Advanced Virtual and Intelligent Computing (AVIC) Center, Department of Mathematics, Faculty of Science, Chulalongkorn University, Bangkok, Thailand","2009 9th International Symposium on Communications and Information Technology","1 Dec 2009","2009","","","715","720","This paper investigates the interrelationship among various measured characteristics of a software project, ranging from project model, size, and metrics used to govern the administration of the project. By analyzing various dimensions of project characteristics based on the underlying model, metrics and project technicality such as language and development paradigm, our findings reveal that certain metrics and models are not suitable for small project since they possess insufficient information to extract and analyze the inherent characteristics of the project. As such, project managers should pay attention to proper selection of project parameters that are conducive toward accurate estimations.","","978-1-4244-4521-9","10.1109/ISCIT.2009.5341149","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5341149","","Object oriented modeling;Costs;Software metrics;Predictive models;Life estimation;Size measurement;Software measurement;Programming;Mathematical model;Information analysis","project management;software cost estimation;software metrics","effort estimation analysis;software project models;software costs estimation;project managers;information extraction;project model","","3","","14","","1 Dec 2009","","","IEEE","IEEE Conferences"
"A Method for Measuring the Size of a Component-Based System Specification","T. Wijayasiriwardhane; R. Lai","Dept. of Comput. Sci. & Comput. Eng., La Trobe Univ., Melbourne, VIC; Dept. of Comput. Sci. & Comput. Eng., La Trobe Univ., Melbourne, VIC","2008 The Eighth International Conference on Quality Software","19 Aug 2008","2008","","","329","337","The system-level size measures are particularly important in software project management as tasks such as planning and estimating the cost and schedule of software development can be performed more effectively when a size estimate of the entire system is available. However, due to the black-box nature of components, traditional software measures are not adequate as system-level measures for component-based systems (CBS). Thus, if a system-level size is required, alternate measures should be used for sizing CBS. In this paper, we present a function point like approach, named component point to measure the system-level size of a CBS using the CBS specification written in UML. The component point approach integrates two software measures and extends an existing size measure from the more matured object-oriented paradigm to the related and relatively young CBS discipline. We also suggest a customized set of general system characteristics so as to make our measure more relevant to CBS.","2332-662X","978-0-7695-3312-4","10.1109/QSIC.2008.17","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4601562","Software Size Estimation;Software Effort Estimation;Software Measurement;Component Point;Component-Based Systems;Component-Based Software Development;Function Point extension","Complexity theory;Software measurement;Software;Size measurement;Estimation;Unified modeling language;Programming","formal specification;object-oriented programming;project management;scheduling;software cost estimation;software development management;software metrics;Unified Modeling Language","component-based system;system specification;system-level size measure;software project management;software cost estimation;scheduling;software development;software measures;component point;UML;object-oriented programming","","2","","36","","19 Aug 2008","","","IEEE","IEEE Conferences"
"Applicability of Neural Network Based Models for Software Effort Estimation","S. Shukla; S. Kumar",Indian Institute of Technology Roorkee; Indian Institute of Technology Roorkee,"2019 IEEE World Congress on Services (SERVICES)","29 Aug 2019","2019","2642-939X","","339","342","Effort Estimation is a very challenging task in the software development life cycle. Inaccurate estimations may cause the client dissatisfaction and thereby, decrease the quality of the product. Considering the problem of software cost and effort prediction, it is conceivable to call attention to that the estimation procedure considers the qualities present in the data set, as well as the aspects of the environment in which the model is embedded. Existing literatures have the instances where machine learning techniques such as Linear Regression (LR), Support Vector Machine (SVM), K-Nearest Neighbor (KNN) have been used to estimate the effort required to develop any software. Yet it is quite uncertain for any particular model to perform well with all the data sets. Most of the research is based on the dataset of any single organization. Consequently, the results obtained through these models cannot be generalized. So, the main objectives of this research are: i) to use different data preparation techniques such as selection, cleaning, and transformation to improve the quality of data set given to the model ii) to use other machine learning models such as Multi-Layer Perceptron Neural Network (MLPNN), Probabilistic Neural Network (PNN), and Recurrent Neural Network (RNN) to increase the performance of software effort estimation process iii) to use different optimization techniques to tune the parameters of machine learning models iv) to use ensemble methods to improve the accuracy of software effort estimation process. In this study, first, we found out the most influential attributes in the Desharnais data set, then, MLPNN has been applied on reduced data set with to improve the accuracy of software effort estimation. Then, the performance of the MLPNN model is compared with LR, SVM and KNN models in the literature to find the best model fitting this dataset. Results obtained from the study demonstrate that some of the variables are more important in comparison to others for effort estimation. Also among the various models used in this study, the best-obtained R2 value is 79 % for the MLPNN model.","2642-939X","978-1-7281-3851-0","10.1109/SERVICES.2019.00094","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8817057","Machine Learning;Software Metrics;Predictive Model;Effort Estimation","Software;Estimation;Support vector machines;Data models;Correlation;Machine learning;Machine learning algorithms","learning (artificial intelligence);neural nets;software cost estimation","Desharnais data set;software development life cycle;software cost;data preparation techniques;software effort estimation process;machine learning models;neural network based models","","","","15","","29 Aug 2019","","","IEEE","IEEE Conferences"
"The development of method of the enhancement of Technical Factor (TF) and Environmental Factor (EF) to the Use Case Point (UCP) to calculate the estimation of software's effort","Sarwosri; M. J. Al Haiyan; M. Husein; A. Putra Ferza","Informatics Department, Faculty of Information Technology, Institut Teknologi Sepuluh Nopember (ITS), St. Arief Rahman Hakim, Surabaya 60111 Indonesia; Informatics Department, Faculty of Information Technology, Institut Teknologi Sepuluh Nopember (ITS), St. Arief Rahman Hakim, Surabaya 60111 Indonesia; Informatics Department, Faculty of Information Technology, Institut Teknologi Sepuluh Nopember (ITS), St. Arief Rahman Hakim, Surabaya 60111 Indonesia; Informatics Department, Faculty of Information Technology, Institut Teknologi Sepuluh Nopember (ITS), St. Arief Rahman Hakim, Surabaya 60111 Indonesia","2016 International Conference on Information & Communication Technology and Systems (ICTS)","27 Apr 2017","2016","","","203","207","Use Case Point (UCP) is one of many approaches used for software project estimation. This approach is implemented by calculating effort estimation based on prediction a total number of workers and software development time. UCP was fist introduced by Karner on 1993. This approach is widely used. It was because some research on UCP showed that UCP approach is better than those approaches developed by experts. The calculation of effort estimation that was mentioned in the paper (Chetan Nagar, 2011), it has been proven that calculation estimation using UCP sometimes doesn't fit the real effort. This leads to the difference in cost calculation and a total number of workers on software development project. The difference in effort calculation is maybe caused by the lack of consideration factors that was calculated on UCP. Besides, in the case of software development project, there must be so many factors that must be taken into consideration in UCP calculation. Based on those backgrounds, this paper will explain the way to minimize the difference between actual effort and effort estimation by increasing Technical Complexity Factor (TCF) and Environmental Complexity Factor (ECF) in estimation using UCP. Those factors are added by considering two ways (1) adding drive cost factor in COCOMO II that is mapped to TFC and ECF (2) conducting qualitative research by deeply understanding a problem in developing software. The result of estimation deviation using old UCP approach is 6.19% on project 1 and 39.32% on project 2 while the result of estimation deviation using new UCP approach is 5.02% on project 1 and 7.94% on project 2. The results showed that the decrease of deviation is too large in project 1 (on a middle scale), besides on project with smaller scale, the decrease of deviation can be much larger. Because of that, TF and EF involvement are effective enough to be implemented on the calculation of project a small scale. Beside of that, it is proven that the new UCP is better to be implemented in software development project effort estimation.","2338-185X","978-1-5090-1381-4","10.1109/ICTS.2016.7910299","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7910299","Use Case Point (UCP);Effort Estimation;COCOMO;TCP (Technical Complexity Factors);ECF (Enviromental Complexity Factor)","Software;Estimation;Complexity theory;Environmental factors;Education;Planning;Interviews","project management;software cost estimation;software development management;software metrics","technical factor enhancement;TF enhancement;environmental factor enhancement;EF enhancement;use-case point;UCP;worker prediction;software development time prediction;technical complexity factor;TFC;environmental complexity factor;ECF;COCOMO II;cost factor;qualitative analylsis;software development project effort estimation","","","","7","","27 Apr 2017","","","IEEE","IEEE Conferences"
"Constructing C++ software size estimation model from class diagram","M. Kiewkanya; S. Surak","Department of Computer Science, Faculty of Science Chiang Mai University, Thailand; Department of Computer Science, Faculty of Science Chiang Mai University, Thailand","2016 13th International Joint Conference on Computer Science and Software Engineering (JCSSE)","21 Nov 2016","2016","","","1","6","Software size is one of the most important internal attributes of software product. The information obtained from estimating software size will be useful for planning about effort, cost and activities schedule of later phases. This paper proposes an approach for constructing C++ software size estimation model using a statistical technique called Multiple linear regression analysis. The proposed model is constructed from structural complexity metrics that can be measured from class diagram. The paper also presents an automated tool for measuring these metrics, and in effect, estimating the C++ software size.","","978-1-5090-2033-1","10.1109/JCSSE.2016.7748880","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7748880","size estimation model;structural complexity metric;class diagram","Software;Measurement;C++ languages;Estimation;Unified modeling language;Computational modeling;Object oriented modeling","C++ language;regression analysis;software cost estimation;software metrics;software product lines","C++ software size estimation model;structural complexity metrics;multiple linear regression analysis;statistical technique;software product;class diagram","","1","","12","","21 Nov 2016","","","IEEE","IEEE Conferences"
"A survey on software estimation in the Norwegian industry","K. Moloekken-OEstvold; M. Joergensen; S. S. Tanilkan; H. Gallis; A. C. Lien; S. W. Hove","Simula Res. Lab., Lysaker, Norway; Simula Res. Lab., Lysaker, Norway; NA; NA; NA; NA","10th International Symposium on Software Metrics, 2004. Proceedings.","22 Nov 2004","2004","","","208","219","We provide an overview of the estimation methods that software companies apply to estimate their projects, why those methods are chosen, and how accurate they are. In order to improve estimation accuracy, such knowledge is essential. We conducted an in-depth survey, where information was collected through structured interviews with senior managers from 18 different companies and project managers of 52 different projects. We analyzed information about estimation approach, effort estimation accuracy and bias, schedule estimation accuracy and bias, delivered functionality and other estimation related information. Our results suggest, for example, that average effort overruns are 41%, that the estimation performance has not changed much the last 10-20 years, that expert estimation is the dominating estimation method, that estimation accuracy is not much impacted by use of formal estimation models, and that software managers tend to believe that the estimation accuracy of their company is better than it actually is.","1530-1435","0-7695-2129-0","10.1109/METRIC.2004.1357904","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357904","","Computer industry;Frequency estimation;Project management;Job shop scheduling;Laboratories;Informatics;Information analysis;Software performance;Hardware;Computer languages","software cost estimation;project management;software metrics;software development management;software houses;software performance evaluation","software project estimation;schedule estimation accuracy;formal estimation model;Norwegian industry;software effort estimation;software company;structured interview information","","34","","38","","22 Nov 2004","","","IEEE","IEEE Conferences"
"Reuse in Systems Engineering","G. Wang; R. Valerdi; J. Fortune","BAE Systems, Reston, VA, USA; Engineering Systems Division, Massachusetts Institute of Technology, Cambridge, MA, USA; Center for Systems and Software Engineering, University of Southern California, Los Angeles, CA, USA","IEEE Systems Journal","30 Aug 2010","2010","4","3","376","384","Reuse in systems engineering is a frequent but poorly understood phenomenon. Nevertheless, it has a significant impact on system development and on estimating the appropriate amount of systems engineering effort with models like the Constructive Systems Engineering Cost Model (COSYSMO). Practical experience showed that the initial version of COSYSMO, based on a “build from the scratch” philosophy, needed to be refined in order to incorporate reuse considerations that fit today's industry environment. The notion of reuse recognizes the effect of legacy system definition in engineering a system and introduces multiple reuse categories for classifying the four COSYSMO size drivers-requirements, interfaces, algorithms, and operational scenarios. It fundamentally modifies the driver counting rules and updates its definition of system size. It provides an enabling framework for estimating a system under incremental and spiral development. In this paper, we present: 1) the definition of the COSYSMO reuse extension and the approach employed to define this extension; 2) the updated COSYSMO size driver definitions to be consistent with the reuse model; 3) the method applied to defining the reuse weights used in the modified parametric relationship; 4) a practical implementation example that instantiates the reuse model by an industry organization and the empirical data that provided practical validation of the extended COSYSMO model; and 5) recommendations for organizational implementation and deployment of this extension.","1937-9234","","10.1109/JSYST.2010.2051748","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5492294","Cost estimation;metrics;reuse;systems engineering","Systems engineering and theory;Costs;Industrial relations;Computer industry;Software engineering;Process design;Productivity;Gallium nitride;Refining;Spirals","organisational aspects;software cost estimation;software metrics;software reusability;systems engineering","system development;constructive systems engineering cost model;reuse considerations;legacy system definition;multiple reuse category;COSYSMO size drivers;COSYSMO reuse extension;reuse model;industry organization;organizational implementation","","19","","31","","28 Jun 2010","","","IEEE","IEEE Journals"
"Design for testability in embedded software projects","G. Sahay","India Design Centre, Goodrich Aerospace, Bangalore, Karnataka, India","2011 IEEE/AIAA 30th Digital Avionics Systems Conference","8 Dec 2011","2011","","","7D4-1","7D4-10","The purpose of this white paper is to focus on design techniques or methodologies that add testability features to embedded software which is an integral and important process for verification of any safety critical system. This paper presents testability in two forms: software testability i.e. testability at code level and design testability: i.e. testability at software requirements level. The two testability forms are further classified into subtypes explained in detail with examples which cite issues that are faced by engineers while performing verification. In this paper I have also come up with metrics which could become an important criterion in calculating the testability of a system considering the number of inputs that can be driven and the outputs that can be observed in the software during the verification process. Practical usage of these metrics may help designers understand how testable the system they have designed is, thus reducing verification effort and project cost. Good testability features, if not present in a system, may lead to increased cost and completion period of the project at a time when cost reduction and deadline chasing is the key to winning future projects. This paper endeavors to provide software developers guidance to incorporate important testability features into the software during the design and coding phase.","2155-7209","978-1-61284-798-6","10.1109/DASC.2011.6096129","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6096129","","Software;Testing;Resistance heating;Hardware;Circuit faults;Heat engines","embedded systems;program testing;program verification;project management;safety-critical software;software cost estimation;software metrics","embedded software projects;safety critical system verification;software testability;design for testability;code level testability;software requirements;software metrics;project cost;cost reduction;deadline chasing;software developer guidance","","1","","7","","8 Dec 2011","","","IEEE","IEEE Conferences"
"Improving subjective estimates using paired comparisons","E. Miranda",NA,"IEEE Software","7 Aug 2002","2001","18","1","87","91","Despite the existence of structured methods for software sizing and effort estimation, the so-called ""expert"" approach seems to be the prevalent way to produce estimates in the software industry. This article presents a method based on paired comparisons, which social science researchers use for measuring when there is no accepted measurement scale or when a measurement instrument does not exist. Although not new, the idea has received little attention in the literature.","1937-4194","","10.1109/52.903173","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=903173","","Computer industry;Project management;Binary trees;Software measurement","software development management;software metrics;project management;software cost estimation","subjective estimates;structured methods;software sizing;software effort estimation;software industry;paired comparisons;social science;project management;software cost","","28","","11","","7 Aug 2002","","","IEEE","IEEE Magazines"
"Understanding and predicting the process of software maintenance releases","V. Basili; L. Briand; S. Condon; Yong-Mi Kim; W. L. Melo; J. D. Valen","Inst. for Adv. Comput. Studies, Maryland Univ., College Park, MD, USA; NA; NA; NA; NA; NA","Proceedings of IEEE 18th International Conference on Software Engineering","6 Aug 2002","1996","","","464","474","One of the major concerns of any maintenance organization is to understand and estimate the cost of maintenance releases of software systems. Planning the next release so as to maximize the increase in functionality and the improvement in quality are vital to successful maintenance management. The objective of the paper is to present the results of a case study in which an incremental approach was used to better understand the effort distribution of releases and build a predictive effort model for software maintenance releases. The study was conducted in the Flight Dynamics Division (FDD) of NASA Goddard Space Flight Center (GSFC). The paper presents three main results: (1) a predictive effort model developed for the FDD's software maintenance release process, (2) measurement-based lessons learned about the maintenance process in the FDD, (3) a set of lessons learned about the establishment of a measurement-based software maintenance improvement program. In addition, this study provides insights and guidelines for obtaining similar results in other maintenance organizations.","0270-5257","0-8186-7247-1","10.1109/ICSE.1996.493441","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=493441","","Software maintenance;Predictive models;Software systems;NASA;Software measurement;Scheduling;Resource management;Costs;Guidelines;Software engineering","software maintenance;software metrics;software quality;software cost estimation;planning;software development management","software maintenance releases;maintenance organization;cost estimation;software systems;planning;functionality;quality;maintenance management;predictive effort model;measurement-based software maintenance improvement program","","47","","14","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Comparative review of functional complexity assessment methods for effort estimation","S. G. MacDonell","Dept. of Inf. Sci., Otago Univ., Dunedin, New Zealand","Software Engineering Journal","6 Aug 2002","1994","9","3","107","116","Budgetary constraints are placing increasing pressure on project managers to effectively estimate development effort requirements at the earliest opportunity. With the rising impact of automation on commercial software development, the attention of researchers developing effort estimation models has recently been focused on functional representations of systems, in response to the assertion that development effort is a function of specification content. A number of such models exist; several, however, have received almost no research or industry attention. Project managers wishing to implement a functional assessment and estimation programme are therefore unlikely to be aware of the various methods or how they compare. This paper therefore provides this information, as well as forming a basis for the development and improvement of new methods.<>","0268-6961","","10.1049/sej.1994.0014","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=295067","","Project management;Software economics;Software metrics","project engineering;project management;software cost estimation;software metrics","functional complexity assessment methods;effort estimation;project managers;commercial software development","","12","","","","6 Aug 2002","","","IET","IET Journals"
"Investigation of logistic regression as a discriminant of software quality","N. F. Schneidewind","Naval Postgraduate Sch., Monterey, CA, USA","Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","328","337","Investigates the possibility that logistic regression functions (LRFs), when used in combination with Boolean discriminant functions (BDFs), which we had previously developed, would improve the quality classification ability of BDFs when used alone; this was found to be the case. When the union of a BDF and LRF was used to classify quality, the predictive accuracy of quality and inspection cost was improved over that of using either function alone for the Space Shuttle. Also, the LRFs proved useful for ranking the quality of modules in a build. The significance of these results is that very high-quality classification accuracy (1.25% error) can be obtained while reducing the inspection cost incurred in achieving high quality. This is particularly important for safety-critical systems. Because the methods are general and not particular to the Shuttle, they could be applied to other domains. A key part of the LRF development was a method for identifying the critical value (i.e. threshold) that could discriminate between high and low quality, and at the same time constrain the cost of inspection to a reasonable value.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915540","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915540","","Logistics;Software quality;Inspection;Space shuttles;Cost function;Safety;Time factors;Predictive models;Testing;Quality control","software quality;forecasting theory;statistical analysis;Boolean functions;inspection;space vehicles;safety-critical software;software cost estimation;aerospace computing;subroutines;pattern classification;software metrics","logistic regression functions;Boolean discriminant functions;software quality prediction;quality classification ability;predictive accuracy;inspection cost;Space Shuttle;module quality ranking;classification accuracy;safety-critical systems;threshold identification method","","11","","12","","7 Aug 2002","","","IEEE","IEEE Conferences"
"A metric method for object-oriented systems based on MarkII method","J. Fubo; Z. Yi; L. Huijun; C. Lu; L. Jiawei","Key Laboratory of Software Theory and Technology, College of Computer Science, Chongqing University, Chongqing, China; Key Laboratory of Software Theory and Technology, College of Computer Science, Chongqing University, Chongqing, China; Key Laboratory of Software Theory and Technology, College of Computer Science, Chongqing University, Chongqing, China; Key Laboratory of Software Theory and Technology, College of Computer Science, Chongqing University, Chongqing, China; Key Laboratory of Software Theory and Technology, College of Computer Science, Chongqing University, Chongqing, China","2014 IEEE 7th Joint International Information Technology and Artificial Intelligence Conference","23 Mar 2015","2014","","","564","570","MarkII method is a function point method. It is primarily based on Reporting Requirements, but the MarkII method exists measuring problems: less data and poor accuracy. After analyzing the MarkII method and semantics of the main components of UML model, a method which applies MarkII method to measure the scale of the object-oriented system is proposed by establishing correspondence relationship and mapping rules between them. To verify the feasibility of this method, we design and develop a measure tool. Experimental results show that the proposed method can effectively measure the scale of the object-oriented system, and achieve significantly improved accuracy and automation.","","978-1-4799-4419-4","10.1109/ITAIC.2014.7065114","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7065114","MarkII method;UML model;Measure rules;Mapping rules;Measure tool","Unified modeling language;Object oriented modeling;Mathematical model;Software;Accuracy;Computational modeling;Computers","object-oriented methods;software cost estimation;software metrics;Unified Modeling Language","metric method;object-oriented systems;MarkII method;function point method;UML model;correspondence relationship;mapping rules","","","","10","","23 Mar 2015","","","IEEE","IEEE Conferences"
"Software Fault Prediction Using Artificial Intelligence Techniques","A. Haveri; Y. Suresh","Department of Computer Science and Engineering, BMS Institute of Technology & Management, Bengaluru, 560064, India; Dept. of Comput. Sci. & Eng., BMS Inst. of Technol. & Manage., Bangalore, India","2017 2nd International Conference on Computational Systems and Information Technology for Sustainable Solution (CSITSS)","30 Aug 2018","2017","","","1","5","Detecting faults in the initial stage of the development process has become an important prospect for the codes cost estimation; so a fault predictor model is very much necessary in order to bring down the cost of development and maintenance. Due to these reasons, developing models for fault prediction has become a crucial part of research, and various techniques have been adapted in order to predict faults in a software. Few of them include Artificial Neural Network, Decision Tree, Genetic Algorithm, etc. Among these techniques, Neural Networks and Genetic Algorithms have become a growing concern over the years and are being applied in various fields such as optimization, prediction or classification. These techniques make use of various software metrics to assess the characteristic of any software system such as number of faults, maintenance of class, etc. Most commonly used are Chidamber and Kemerer (CK) metrics which are found to be efficient from many researches.","","978-1-5386-2044-1","10.1109/CSITSS.2017.8447615","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8447615","Artificial Neural Network;Back Propagation;Chi-damber and Kemerer suite of metrics;Genetic Algorithm","Genetic algorithms;Measurement;Biological neural networks;Predictive models;Software quality","artificial intelligence;decision trees;genetic algorithms;neural nets;software fault tolerance;software metrics;software quality","development process;fault predictor model;software metrics;software system;software fault prediction;artificial neural network;decision tree;genetic algorithm;artificial intelligence techniques;code cost estimation;neural networks","","","","12","","30 Aug 2018","","","IEEE","IEEE Conferences"
"Lattice LSTM Model for Function Point Based Software Cost Measurement","M. Qin","Information and Communication Department, Electric Power Research Institute Co., Ltd, Beijing, China","2019 IEEE 8th Joint International Information Technology and Artificial Intelligence Conference (ITAIC)","5 Aug 2019","2019","","","731","735","One of the core problems in the field of software engineering is to measure the software development cost, which helps to ensure the software quality and avoid the waste of investment. Traditionally, the software cost measurement is implemented by experts who are strictly trained, which is relatively expensive and inefficient. In this paper, a neural network based machine learning method is proposed to perform software cost measurement task, which decreases the time and manpower costs. The proposed method takes advantage of the long short term memory (LSTM) neural network and conditional random field to identify different types of function points in software requirements document, where the function points is the key to measure to software cost. To solve the incorrect word segmentation problem in open domain such as software development cost field, lattice LSTM model is constructed to utilize both Chinese characters and words information. Experiments show the proposed method significantly reduces the human labor and ensure the quality of software cost measurement.","","978-1-5386-8178-7","10.1109/ITAIC.2019.8785888","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8785888","software cost measurement;machine learning;lattice LSTM model1","Software;Software measurement;Lattices;Neural networks;Task analysis;Machine learning;Logic gates","learning (artificial intelligence);neural nets;software cost estimation;software development management;software metrics;software quality","lattice LSTM model;function point;software engineering;software quality;neural network based machine learning method;software cost measurement task;long short term memory neural network;software requirements document;software development cost field;Chinese characters;words information","","","","25","","5 Aug 2019","","","IEEE","IEEE Conferences"
"Software Effort Estimation Based on Use Cases","M. R. Braz; S. R. Vergilio","Federal University of Parana - UFPR, Brazil; Federal University of Parana - UFPR, Brazil","30th Annual International Computer Software and Applications Conference (COMPSAC'06)","4 Dec 2006","2006","1","","221","228","Software effort and cost estimation is a very important activity that includes very uncertain elements. In the context of object oriented software, traditional methods and metrics were extended to help managers in this activity. The metric use case points (UCP) is an example of metric that can be used. UCP considers functional aspects of the use case (UC) model, widely used in most organizations in the early phases of the development. However, the metric UCP presents some limitations mainly related to the granularity of the UC. To overcome these limitations, this paper introduces two metrics, also based on UCs. The first one, named USP (use case size points), considers the internal structures of the UC and better captures its functionality. The second one, named FUSP (fuzzy use case size points), considers concepts of the fuzzy set theory to create gradual classifications that better deal with uncertainty. Results from an empirical evaluation show the applicability and some advantages of the proposed metrics","0730-3157","0-7695-2655-1","10.1109/COMPSAC.2006.77","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4020081","Software Size;Prediction;Use Case Points;Function Points;Fuzzy Theory","Object oriented modeling;Fuzzy set theory;Application software;Uncertainty;Lab-on-a-chip;Humans;Computer science;Estimation theory;Cost function;Computer languages","fuzzy set theory;object-oriented programming;software cost estimation;software management;software metrics","software effort estimation;software cost estimation;object oriented software;metric use case points;fuzzy use case size points;fuzzy set theory;gradual classification;software size","","24","","15","","4 Dec 2006","","","IEEE","IEEE Conferences"
"Estimated measurement quality software on structural model academic system with Function Point Analysis","H. Rohayani; F. L. Gaol; B. Soewito; H. L. H. Spits Warnars","Doctor of Computer Science Program, Bina Nusantara University, Jl. Kebon Jeruk No 27, Jakarta. Indonesia; Doctor of Computer Science, Bina Nusantara University, Jl. Kebon Jeruk No27, Jakarta. Indonesia; Binus Graduate Program, Bina Nusantara University, Jl. Kebon Jeruk No27, Jakarta. Indonesia; Doctor of Computer Science, Bina Nusantara University, Jl. Kebon Jeruk No27, Jakarta. Indonesia","2017 International Conference on Applied Computer and Communication Technologies (ComCom)","7 Dec 2017","2017","","","1","5","In the software development indispensable is the suitability and accuracy in determining the size or value of the software to fit the operation to be performed. A wide variety of calculation methods have been widely used to estimate the size of the software, one of which is by using Function Point Analysis (FPA). Volume calculation software based on a scale of complexity. Since the point of measurement is highly subjective, in order to maintain consistency and validity of the results, the method should be run by an experienced professional. This method is then applied by the authors to measure the complexity of academic information system STIKOM Dinamika Bangsa Jambi using structured modeling approach. Measurements were performed in this study consisted of depictions information system is built into the structure. Which is then analyzed by counting models Crude Function Points (CRP), the relative complexity of Adjustment Factor (RCAF), and then calculate the point function. From the results of calculations using the FPA to software quality measurement academic system STIKOM Dinamika Bangsa Jambi obtained value FP 166.32 is good. Function point value produced will be used by developers in determining the price and the cost of software systems to be built or developed.","","978-1-5090-4048-3","10.1109/COMCOM.2017.8167085","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8167085","Software Quality Measurement;Structural Model;Function Point Analysis;System","Complexity theory;Software measurement;Software systems;Analytical models;Volume measurement;Data models","software cost estimation;software development management;software metrics;software quality","FPA;software quality measurement academic system STIKOM Dinamika Bangsa Jambi;Function point value;software systems;estimated measurement quality software;structural model academic system;function point analysis;Crude Function Points;point function;relative complexity;depictions information system;structured modeling approach;academic information system STIKOM Dinamika Bangsa Jambi;volume calculation software;software development indispensable","","1","","18","","7 Dec 2017","","","IEEE","IEEE Conferences"
"Applying function point to unified modeling language: conversion model and pilot study","G. Cantone; D. Pace; G. Calavaro","DISP, Rome Univ., Italy; DISP, Rome Univ., Italy; NA","10th International Symposium on Software Metrics, 2004. Proceedings.","22 Nov 2004","2004","","","280","291","We consider convertibility of the elements of the unified modeling language into entities of the function point analysis, introduces a model for establishing the link, and presents a pilot study for comparing the function point counts provided by the model with those provided by a function point certified expert. In order to map the unified modeling language elements to function point analysis entities, the paper develops guidelines, rules, heuristics, and flexibility specifications, which also constitute the requirements of an analyzer and semiautomatic converter, implemented as a wizard inside IBM-Rational Rose. The paper presents and discusses the design, conduction and results of the pilot study.","1530-1435","0-7695-2129-0","10.1109/METRIC.2004.1357912","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357912","","Unified modeling language;Software measurement;Object oriented modeling;Guidelines;Application software;Software performance;Electric breakdown;Software systems;ISO standards;Particle measurements","software cost estimation;software metrics;Unified Modeling Language;formal specification","unified modeling language;function point analysis entity;IBM-Rational Rose;software measurement model","","4","","25","","22 Nov 2004","","","IEEE","IEEE Conferences"
"Comparing Software Cost Prediction Models by a Visualization Tool","N. Mittas; L. Angelis","Dept. of Inf., Aristotle Univ. of Thessaloniki, Thessaloniki, Greece; Dept. of Inf., Aristotle Univ. of Thessaloniki, Thessaloniki, Greece","2008 34th Euromicro Conference Software Engineering and Advanced Applications","22 Dec 2008","2008","","","433","440","A crucial issue in the software cost estimation area that has attracted the interest of software project managers is the selection of the best prediction method for estimating the cost of a project. Most of the prediction techniques estimate the cost from historical data. The selection of the best model is based on accuracy measures that are functions of the predictive error, whereas the significance of the differences can be evaluated through statistical procedures. However, statistical tests cannot be applied easily by non-experts while there are difficulties in the interpretation of their results. The purpose of this paper is to introduce the utilization of a visualization tool, the regression error characteristic curves in order to compare different prediction models easily, by a simple inspection of a graph. Moreover, these curves are adjusted to accuracy measures appeared in software cost estimation literature and the experimentation is based on two well-known datasets.","2376-9505","978-0-7695-3276-9","10.1109/SEAA.2008.23","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4725751","","Software tools;Predictive models;Visualization;Project management;Application software;Informatics;Prediction methods;Cost function;Software testing;Programming","data visualisation;project management;regression analysis;software cost estimation;software development management;software metrics;statistical testing","software cost prediction model;software cost estimation;visualization tool;software project management;statistical test procedure;regression error characteristic curve;graph inspection;accuracy measure","","7","","8","","22 Dec 2008","","","IEEE","IEEE Conferences"
"Software reuse metrics for object-oriented systems","K. K. Aggarwal; Y. Singh; A. Kaur; R. Malhotra","Sch. of Inf. Technol., GGS Indraprastha Univ., Delhi, India; Sch. of Inf. Technol., GGS Indraprastha Univ., Delhi, India; Sch. of Inf. Technol., GGS Indraprastha Univ., Delhi, India; Sch. of Inf. Technol., GGS Indraprastha Univ., Delhi, India","Third ACIS Int'l Conference on Software Engineering Research, Management and Applications (SERA'05)","27 Dec 2005","2005","","","48","54","The importance of software measurement is increasing leading to development of new measurement techniques. Reusing existing software components is a key feature in increasing software productivity. It is one of the key elements in object-oriented programming, which reduces the cost and increases the quality of the software. An important feature of C++ called templates support generic programming, which allows the programmer to develop reusable software modules such as functions, classes, etc. The need for software reusability metrics is particularly acute for an organization in order to measure the degree of generic programming included in the form of templates in code. This research addresses this need and introduces a new set of metrics for object-oriented software. Two metrics are proposed for measuring amount of genericty included in the code and then analytically evaluated against Weyuker's set of nine axioms. This set of metrics is then applied to standard projects and accordingly ways in which project managers can use these metrics are suggested.","","0-7695-2297-1","10.1109/SERA.2005.60","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1563143","","Software measurement;Software reusability;Measurement techniques;Productivity;Object oriented programming;Costs;Software quality;Functional programming;Programming profession;Particle measurements","software reusability;software metrics;object-oriented programming;software cost estimation;software quality;C++ language;software performance evaluation","software reusability metrics;object-oriented system;software measurement;software component reusability;software productivity;object-oriented programming;software cost reduction;software quality;C++ template;generic programming;object-oriented software","","23","","14","","27 Dec 2005","","","IEEE","IEEE Conferences"
"Influence of the Review of Executed Activities Utilizing Planning Poker","A. A. Tissot; M. C. Figueiredo Pereira Emer; L. C. Bastos","Departamento de Informática (DAINF), Universidade Tecnológica Federal do Paraná (UTFPR), Curitiba, Brazil; Departamento de Informática (DAINF), Universidade Tecnológica Federal do Paraná (UTFPR), Curitiba, Brazil; Departamento de Informática (DAINF), Universidade Tecnológica Federal do Paraná (UTFPR), Curitiba, Brazil","2015 29th Brazilian Symposium on Software Engineering","12 Nov 2015","2015","","","170","178","Background -- The software effort estimation research area aims to improve the accuracy of this estimation in software projects and activities. Aims -- This study describes the development and usage of a web application to collect the generated data from the Planning Poker estimation process and the analysis of the collected data to investigate the impact of revising previous estimates when conducting similar new estimates in a Planning Poker context. Method -- Software activities were estimated by UTFPR students, using Planning Poker, with and without revising previous similar activities, storing data regarding the decision-making process. And the collected data was used to investigate the impact that revising similar executed activities have in the software effort estimates' accuracy. Obtained Results -- The UTFPR students were divided into 14 groups. Eight of them showed accuracy increase in more than half of their estimates. Three of them had almost the same accuracy in more than half of their estimates. And only three of them had accuracy decrease in more than half of their estimates. Conclusion -- Reviewing the similar executed software activities, when using Planning Poker, led to more accurate software estimates in most cases, and, because of that, can improve the software development process.","","978-1-4673-9272-3","10.1109/SBES.2015.26","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7328021","Software Metrics;Software Effort Prediction;Software Effort Estimate;Software Costs Prediction;Software Costs Estimate;Software Process Management","Software;Planning;Accuracy;Estimation;Software engineering;Context;Decision making","decision making;software cost estimation;software metrics;software process improvement","software effort estimation research area;software projects;software activities;Web application;planning poker estimation process;UTFPR students;decision-making process;software development process","","1","","19","","12 Nov 2015","","","IEEE","IEEE Conferences"
"Adapting function point analysis to estimate data mart size","A. T. Calazans; K. M. de Oliveira; R. R. Santos","Caixa Economica Fed., Brazil; NA; NA","10th International Symposium on Software Metrics, 2004. Proceedings.","22 Nov 2004","2004","","","300","311","To better control the time, cost and resources assigned to software projects, organizations need a proper estimate of their size even before the projects actually start. Accordingly, several approaches were proposed to estimate the size of a software project, as the well-known function point analysis (FPA), which is largely used in traditional software development projects. However, we observed in our company that it is not fit for data mart software measurement. Data mart (DM) systems have particularities in their development that are different from the traditional software systems (e.g. a DM uses other software systems as data sources and does not create new information). It is important, therefore, to have a measurement approach that considers those particularities while measuring the DM size. We present an adaptation of the FPA approach for DM size measurement and discuss results on 10 data marts project developed in the industry.","1530-1435","0-7695-2129-0","10.1109/METRIC.2004.1357914","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357914","","Data analysis;Size measurement;Software systems;Software measurement;Delta modulation;Data warehouses;Costs;Particle measurements;Character generation;IEC standards","software metrics;software cost estimation;software development management","function point analysis;data mart size;software development projects;software measurement","","3","","18","","22 Nov 2004","","","IEEE","IEEE Conferences"
"Measurement of QuestDone mobile application using 7 steps use case points method","R. Sutoyo; H. L. Hendric Spits Warnars; F. L. Gaol; E. Abdurachman; B. Soewito","Computer Science Department, BINUS Graduate, Program - Doctor of Computer Science, Bina Nusantara University Jakarta, Indonesia 11480; Computer Science Department, BINUS Graduate, Program - Doctor of Computer Science, Bina Nusantara University Jakarta, Indonesia 11480; Computer Science Department, BINUS Graduate, Program - Doctor of Computer Science, Bina Nusantara University Jakarta, Indonesia 11480; Computer Science Department, BINUS Graduate, Program - Doctor of Computer Science, Bina Nusantara University Jakarta, Indonesia 11480; Computer Science Department, BINUS Graduate Program - Master of Computer Science Bina Nusantara University Jakarta, Indonesia 11480","2017 IEEE International Conference on Cybernetics and Computational Intelligence (CyberneticsCom)","12 Mar 2018","2017","","","90","95","The rise of mobile application is inevitable. Every year, the number of mobile application is increased. It is important for mobile application project owners to calculate the required resources before building a mobile application. In software metric, Use Case Points method is able to count software size of mobile application based on their functionality. This method utilizes use case diagram as their computation factors in the estimation process. Moreover, two other complexity factors are also considered in this method, which are: Technical Complexity Factor and Environment Factor. In this paper, we present software size calculation of QuestDone Mobile Application using 7 steps use case points method. QuestDone has been implemented, but we do not know its software size (i.e. how big the software, how much it cost, how many people is needed). As the result from use case points method, the Use Case Points value of QuestDone is 126.88 with Effort Estimation equal to 889 hours. The software size estimation process of QuestDone Mobile Application detailed in this paper can give an insight to project owners to count software size of other similar projects.","","978-1-5386-0784-8","10.1109/CYBERNETICSCOM.2017.8311690","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8311690","software size;software metrics;use case points;mobile application","Mobile applications;Software;Mathematical model;Complexity theory;Estimation;Computer science;Environmental factors","mobile computing;project management;software cost estimation;software development management;software metrics","software metric;case diagram;complexity factors;technical complexity factor;environment factor;software size calculation;mobile application project owners;QuestDone mobile application;software size estimation process;Use Case Points value;use case points method","","6","","24","","12 Mar 2018","","","IEEE","IEEE Conferences"
"Applying metrics to rule-based systems","P. Doyle; R. Verbruggen","Sch. of Comput. Applications, Dublin City Univ., Ireland; Sch. of Comput. Applications, Dublin City Univ., Ireland","Proceedings Fourth International Conference on Software Engineering and Knowledge Engineering","6 Aug 2002","1992","","","123","130","Since the introduction of software measurement theory in the early seventies it has been accepted that in order to control software it must first be measured. Unambiguous and reproducible measurements are considered to be the most useful in controlling software productivity, costs and quality, and diverse sets of measurements are required to cover all aspects of software. This paper focuses on measures for rule-based language systems and also describes a process for developing measures for other non-standard 3GL development tools. This paper uses KEL as an example and the method allows the re-use of existing measures and indicates if and where new measures are required. As software engineering continues to generate more diverse methods of system development, it is important to continually update methods of measurement and control.<>","","0-8186-2830-8","10.1109/SEKE.1992.227938","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=227938","","Knowledge based systems;Software measurement;Software quality;Productivity;Costs;Software engineering;Control systems","knowledge based systems;software cost estimation;software metrics;software quality;software tools","software costs;software quality;third generation languages;metrics;software measurement theory;software productivity;rule-based language systems;3GL development tools;KEL;software engineering","","","","","","6 Aug 2002","","","IEEE","IEEE Conferences"
"A study of productivity and efficiency for object-oriented methods and languages","D. Port; M. McArthur","Center for Software Eng., Univ. of Southern California, Los Angeles, CA, USA; NA","Proceedings Sixth Asia Pacific Software Engineering Conference (ASPEC'99) (Cat. No.PR00509)","6 Aug 2002","1999","","","128","135","A study was commissioned by the Hughes Space and Communications Software Engineering Group to determine the effectiveness of the recent introduction of object-oriented languages, technologies and development methodologies. Of particular interest was any effect on development productivity. Fundamentally, productivity metrics are difficult to apply across non-homogeneous projects and development teams. Furthermore, owing to many uncontrolled variables, such as the lack of a solid control project and non-rigorously collected data, productivity measures alone are were sufficient to determine meaningful results as requested for the study. A new, robust means of comparing non-homogenous development efforts (that does not require a control project) called ""efficiency"" was introduced and was used to augment the comparative analysis of the projects and address possible concerns with the use of productivity metrics alone. Efficiency measures the actual effort compared to an estimate of that effort with respect to an independent and well-defined baseline - for purposes of the study, this was COCOMO II. Conclusive evidence was found to support the hypothesis that object-oriented languages coupled with object-oriented methods result in greater productivity and efficiency as compared to other efforts. Furthermore, it is concluded that efficiency metrics, along with the non-standard use of COCOMO II, are a meaningful, useful and practical approach to compare development efforts.","","0-7695-0509-0","10.1109/APSEC.1999.809593","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809593","","Productivity;Space technology;Object oriented modeling;Software engineering;Programming;Solids;Robust control;Software metrics;Paper technology;Extraterrestrial measurements","object-oriented methods;object-oriented languages;software metrics;software cost estimation","development productivity;efficiency;object-oriented methods;object-oriented languages;software engineering;productivity metrics;uncontrolled variables;nonhomogeneous projects;COCOMO II","","6","","11","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Using a Line of Code Metric to Understand Software Rework","E. Morozoff","Medtronic, Inc. , Mounds View","IEEE Software","31 Dec 2009","2010","27","1","72","77","A simple method measuring new effective lines of code showed that between 19 and 40 percent of code written on three projects wasn't in the final release. Generally, productivity is a function of input effort and output size. A strong understanding of software productivity, coupled with a good estimate of software size, is key to predicting project effort and, ultimately, producing reliable project duration estimates, schedules, and resource needs. Project managers and engineers often measure or predict the size of released software-the volume of software in the marketed product. However, the final release doesn't include reworked code-code that was changed or deleted during development.","1937-4194","","10.1109/MS.2009.160","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5232799","lines of code;software productivity;software rework;software;software engineering","Productivity;Project management;Engineering management;Reliability engineering;Volume measurement;Size measurement;Software measurement","scheduling;software cost estimation;software metrics;systems re-engineering","line of code metric;software rework;software productivity;project duration estimation;project managers;scheduling;software project cost estimations","","2","","18","","4 Sep 2009","","","IEEE","IEEE Magazines"
"Information technology and software project management: Advanced undergraduate/graduate laboratory practicum","V. Uskov; K. Mittal","Department of Computer Science and Information Systems, Bradley University; Department of Computer Science and Information Systems, Bradley University","2012 IEEE International Conference on Electro/Information Technology","21 Jun 2012","2012","","","1","7","A convergence of computer science (CS)/computer information systems (CIS) and management areas, in general, and, software development/software engineering and management, in particular, is quickly reshaping a profile of the software development industry. This motivated the Department of Computer Science and Information Systems at Bradley University (Peoria, IL) to propose, design, and develop innovative curriculum in CS-Management and CIS-Management areas. The developed state-of-the-art courseware in those areas is based on active utilization of software and CIS engineering concepts, methods, models, approaches, factors, and metrics in traditional (defined by Project Management Institute) project management processes and knowledge areas, particularly, 1) applications of software engineering methods and models to traditional five project management processes and nine knowledge areas; 2) utilization of software development life cycle stages in traditional project management life cycle; 3) applications of software/CIS specific estimation models and methodologies to traditional cost and time management; 4) utilization of specific software quality metrics and factors (ISO 9126) in traditional quality management; and 5) utilization of software-focused quality methodology (CMMI, DFSS) in software and CIS project management.","2154-0373","978-1-4673-0818-2","10.1109/EIT.2012.6220773","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6220773","computer science;software project management;computer information systems;information technology project management;innovative curriculum","Project management;Educational institutions;Software quality;Programming;Capability maturity model","courseware;DP industry;further education;innovation management;management information systems;project management;quality management;software cost estimation;software development management;software metrics;software quality","information technology;software project management;computer science;computer information system;software engineering;software development industry;innovative curriculum;CS management;CIS management;state-of-the-art courseware;software utilization;CIS engineering concept;software development life cycle;project management life cycle;software cost estimation;time management;software quality metrics;quality management;undergraduate laboratory practicum;graduate laboratory practicum","","","","13","","21 Jun 2012","","","IEEE","IEEE Conferences"
"Improvements to the Function Point Analysis Method: A Systematic Literature Review","M. de Freitas Junior; M. Fantinato; V. Sun","School of Sciences, Arts and Humanities, University of São Paulo, Sao Paulo, Brazil; School of Sciences, Arts and Humanities, University of São Paulo, Sao Paulo, Brazil; School of Sciences, Arts and Humanities, University of São Paulo, Sao Paulo, Brazil","IEEE Transactions on Engineering Management","16 Oct 2015","2015","62","4","495","506","Function point analysis (FPA) is a standardized method to systematically measure the functional size of software. This method is proposed by an international organization and it is currently recommended by governments and organizations as a standard method to be adopted for this type of measurement. This paper presents a compilation of improvements, focused on increasing the accuracy of the FPA method, which have been proposed over the past 13 years. The methodology used was a systematic literature review (SLR), which was conducted with four research questions aligned with the objectives of this study. As a result of the SLR, of the 1600 results returned by the search engines, 454 primary studies were preselected according to the criteria established for the SLR. Among these studies, only 18 specifically referred to accuracy improvements for FPA, which was the goal of this study. The low number of studies that propose FPA improvements might demonstrate the maturity of the method in the current scenario of software metrics. Specifically in terms of found issues, it was found that the step for calculating the functional size exhibited the highest number of problems, indicating the need to revise FPA in order to encompass the possible improvements suggested by the researchers.","1558-0040","","10.1109/TEM.2015.2453354","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7165621","Accuracy improvement;function point analysis (FPA);systematic literature review (SLR);Accuracy improvement;function point analysis (FPA);systematic literature review (SLR)","Software;Complexity theory;Accuracy;Artificial intelligence;Software measurement;ISO Standards","government;organisational aspects;reviews;search engines;software cost estimation;software metrics","government;FPA improvements;systematic literature review;software metrics;standardized method;SLR;software functional size;function point analysis method;international organization;time 13 year","","5","","36","","23 Jul 2015","","","IEEE","IEEE Journals"
"A Follow-Up Reflection on Software Process Improvement ROI","R. van Solingen",Delft University of Technology,"IEEE Software","25 Aug 2009","2009","26","5","77","79","Our discipline must shift toward value-based software engineering, because we're obliged to prove our contributions to the financial bottom line. In the May/June 2004 IEEE Software special issue on return on investment (ROI), the author presented measurement results for the ROI of software process improvement (SPI). This article made three main contributions. First, provided a detailed overview of publications containing real-life measurement results from practical applications of SPI, in which the author measured the ROI. My study included 20 cases, with an average ROI of 7 and a median of 6.6. This indicates that SPI's net profit seems to be approximately US$7 for every dollar invested. However, I found no published cases in which SPI investments resulted in a measurable loss; furthermore, the ROI bandwidth was large (between 1.5 and 19). This indicates that the actual ROI of an SPI investment seems hard to really guarantee up front. Second, I showed that benefits are just as easy to quantify as costs. Cost measurements are always based on an agreement about how to measure and quantify costs. Such an agreement can also serve as the basis for measuring benefits. My article contained data from two real-life projects that had made such cost and benefit measurements and calculated ROI. Finally, I concluded that expressing ""value"" is crucial. Software engineering and its improvement are often major investments for organizations. Investments must be profitable. Because different people in different roles share one generic term for value-money, I recommended expressing any software engineering effort and its benefits in financial terms.","1937-4194","","10.1109/MS.2009.120","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5222799","software process improvement;return on investment;value-based software engineering;Six Sigma;management commitment;benefit measurement","Reflection;Financial management;Investments;Software engineering;Software measurement;Computer science;Computer industry;Data analysis;Data engineering;Economic indicators","software cost estimation;software metrics;software process improvement","follow-up reflection;ROI software process improvement;value-based software engineering;SPI investment;cost measurement;software organization","","3","","9","","25 Aug 2009","","","IEEE","IEEE Magazines"
"Software cost estimation models","F. J. Heemstra","Dept. of Ind. Eng., Univ. of Technol., Eindhoven, Netherlands","Proceedings of the 5th Jerusalem Conference on Information Technology, 1990. 'Next Decade in Information Technology'","6 Aug 2002","1990","","","286","297","The importance of accurate cost estimates is discussed, and an overview of the existing methods for cost estimation is given. One class of models, namely, the parametric models, is then considered. The principles of parametric cost estimation models are examined, and an overview of such model is given. The existing models are compared, focusing mainly on the question of how accurate their estimates are. The advantages of the parametric models are described, and the state of the art is evaluated.<>","","0-8186-2078-1","10.1109/JCIT.1990.128297","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=128297","","Costs;Programming;Automation;Government;Industrial engineering;Project management;Parametric statistics;Application software;Investments;Delay","software metrics","software costs;accurate cost estimates;parametric models","","3","","40","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Project estimation using Screenflow Engineering","J. Paynter","Auckland Univ., New Zealand","Proceedings 1996 International Conference Software Engineering: Education and Practice","6 Aug 2002","1996","","","150","159","Software project estimation is a topic that has been widely researched, yielding a multitude of different estimation models, tools and techniques aimed at increasing the accuracy of cost, effort and time estimates of proposed software projects. However, surveys in the United Kingdom, The Netherlands and New Zealand have identified a very low use of such models and tools, despite recognition of their importance. This paper introduces a method of software project estimation used in a New Zealand case. The method used is part of the Screenflow Engineering process. This is based on the premise that computer system applications should share a common pool of data, which is updated on-line and made available simultaneously to any user of any application.","","0-8186-7379-6","10.1109/SEEP.1996.533994","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=533994","","Software tools;Yield estimation;Programming;Project management;Cost function;Application software;Relational databases;Data structures;Software performance;Remuneration","software development management;project management;software cost estimation;software tools;software metrics","Screenflow Engineering;software project estimation;estimation models;software tools;software cost estimation;software engineering time estimates;surveys;United Kingdom;The Netherlands;New Zealand","","3","","39","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Software reliability analysis incorporating fault detection and debugging activities","S. S. Gokhale; M. R. Lyu; K. S. Trivedi","Bourns Coll. of Eng., California Univ., Riverside, CA, USA; NA; NA","Proceedings Ninth International Symposium on Software Reliability Engineering (Cat. No.98TB100257)","6 Aug 2002","1998","","","202","211","The software reliability measurement problem can be approached by obtaining the estimates of the residual number of faults in the software. Traditional black box based approaches to software reliability modeling assume that the debugging process is instantaneous and perfect. The estimates of the remaining number of faults, and hence reliability, are based on these oversimplified assumptions and they tend to be optimistic. We propose a framework relying on rate based simulation technique for incorporating explicit debugging activities along with the possibility of imperfect debugging into the black box software reliability models. We present various debugging policies and analyze the effect of these policies on the residual number of faults in the software. In addition, we propose a methodology to compute the reliability of the software, taking into account explicit debugging activities. An economic cost model to determine the optimal software release criteria in the presence of debugging activities is described. Finally, we present the high level architecture of a tool, called SRSIM, for the purpose of automating the simulation techniques presented.","1071-9458","0-8186-8991-9","10.1109/ISSRE.1998.730883","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=730883","","Software reliability;Fault detection;Debugging;Software quality;Software measurement;Electrical capacitance tomography;Electrical fault detection;Educational institutions;Computer science;Environmental economics","software reliability;program debugging;software metrics;software cost estimation;virtual machines","software reliability analysis;fault detection;debugging activities;software reliability measurement problem;black box based approaches;debugging process;rate based simulation technique;explicit debugging activities;imperfect debugging;black box software reliability models;debugging policies;economic cost model;optimal software release criteria;high level architecture;SRSIM;simulation techniques","","13","","18","","6 Aug 2002","","","IEEE","IEEE Conferences"
"A model to evaluate the economic benefits of software components development","A. Dagnino; H. Srikanth; M. Naedele; D. Brantly","ABB-USETI, Raleigh, NC, USA; NA; NA; NA","SMC'03 Conference Proceedings. 2003 IEEE International Conference on Systems, Man and Cybernetics. Conference Theme - System Security and Assurance (Cat. No.03CH37483)","10 Nov 2003","2003","4","","3792","3797 vol.4","ABB is a multi-national corporation that is developing a new generation of products based on the concept of Industrial/sup IT/. This concept provides a common integration platform for product interoperability. As Industrial/sup IT/ enabled products are developed across ABB, software reuse must be considered. Component based software development (CBSD) is an effective means to improve productivity and quality by developing reusable components. Measuring the economic benefits and performing sensitivity analyses of CBSD scenarios in the development of Industrial/sup IT/ products is important to improve efficiency. This paper presents a model that allows project leaders to evaluate a variety of software development scenarios. The model is based on a goal-question-metrics (GQM) approach and was developed at the ABB corporate research laboratories.","1062-922X","0-7803-7952-7","10.1109/ICSMC.2003.1244479","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1244479","","Costs;Size measurement;Sensitivity analysis;Measurement units;Software measurement;Programming;Project management;Lab-on-a-chip;Educational institutions;Computer industry","economics;object-oriented programming;open systems;software metrics;software reusability;software cost estimation","economic benefits;software components development;Industrial/sup IT/;product interoperability;software reuse;component based software development;sensitivity analyses;goal-question-metrics approach","","1","","17","","10 Nov 2003","","","IEEE","IEEE Conferences"
"Using grey relational analysis to predict software effort with small data sets","Qinbao Song; M. Shepperd; C. Mair","Xi'an Jiaotong Univ., China; Xi'an Jiaotong Univ., China; Xi'an Jiaotong Univ., China","11th IEEE International Software Metrics Symposium (METRICS'05)","24 Oct 2005","2005","","","10 pp.","35","The inherent uncertainty of the software development process presents particular challenges for software effort prediction. We need to systematically address missing data values, feature subset selection and the continuous evolution of predictions as the project unfolds, and all of this in the context of data-starvation and noisy data. However, in this paper, we particularly focus on feature subset selection and effort prediction at an early stage of a project. We propose a novel approach of using grey relational analysis (GRA) of grey system theory (GST), which is a recently developed system engineering theory based on the uncertainty of small samples. In this work we address some of the theoretical challenges in applying GRA to feature subset selection and effort prediction, and then evaluate our approach on five publicly available industrial data sets using stepwise regression as a benchmark. The results are very encouraging in the sense of being comparable or better than other machine learning techniques and thus indicate that the method has considerable potential","1530-1435","0-7695-2371-4","10.1109/METRICS.2005.51","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1509313","software project estimation;effort prediction;feature subset selection;empirical evaluation;Grey Relational Analysis;Grey System Theory","Uncertainty;Programming;Systems engineering and theory;Prediction methods;Industrial relations;Machine learning;Information analysis;Statistical analysis;Learning systems;Statistical distributions","grey systems;regression analysis;software cost estimation;software development management;software metrics","grey relational analysis;software effort prediction;software development process;feature subset selection;grey system theory;system engineering theory;stepwise regression;software project estimation","","18","","30","","24 Oct 2005","","","IEEE","IEEE Conferences"
"The impact of costs of misclassification on software quality modeling","T. M. Khoshgoftaar; E. B. Allen","Florida Atlantic Univ., Boca Raton, FL, USA; NA","Proceedings Fourth International Software Metrics Symposium","6 Aug 2002","1997","","","54","62","A software quality model can make timely predictions of the class of a module, such as not fault prone or fault prone. These enable one to improve software development processes by targeting reliability improvement techniques more effectively and efficiently. Published software quality classification models generally minimize the number of misclassifications. The contribution of the paper is empirical evidence, supported by theoretical considerations, that such models can significantly benefit from minimizing the expected cost of misclassifications, rather than just the number of misclassifications. This is necessary when misclassification costs for not fault prone modules are quite different from those of fault prone modules. We illustrate the principles with a case study using nonparametric discriminant analysis. The case study examined a large subsystem of the Joint Surveillance Target Attack Radar System, JS-TARS, which is an embedded, real time, military application. Measures of the process history of each module were independent variables. Models with equal costs of misclassification were unacceptable, due to high misclassification rates for fault prone modules, but cost weighted models had acceptable, balanced misclassification rates.","","0-8186-8093-8","10.1109/METRIC.1997.637165","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=637165","","Costs;Software quality;Programming;Surveillance;Radar;Predictive models;Real time systems;History;Fault detection;Software engineering","software quality;software fault tolerance;software cost estimation;software metrics;military computing","misclassification costs;software quality modeling;timely predictions;fault prone;software development processes;reliability improvement techniques;published software quality classification models;empirical evidence;nonparametric discriminant analysis;case study;Joint Surveillance Target Attack Radar System;JS-TARS;military application;process history;balanced misclassification rates","","16","","13","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Factors systematically associated with errors in subjective estimates of software development effort: the stability of expert judgment","A. R. Gray; S. G. MacDonell; M. J. Shepperd","Dept. of Inf. Sci., Otago Univ., Dunedin, New Zealand; NA; NA","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","216","227","Estimation of project development effort is most often performed by expert judgment rather than by using an empirically derived model (although such may be used by the expert to assist their decision). One question that can be asked about these estimates is how stable are they with respect to characteristics of the development process and product? This stability can be assessed in relation to the degree to which the project has advanced over time, the type of module for which the estimate is being made, and the characteristics of that module. In this paper we examine a set of expert-derived estimates for the effort required to develop a collection of modules from a large health-care system. Statistical tests are used to identify relationships between the type (screen or report) and characteristics of modules and the likelihood of the associated development effort being underestimated, approximately correct, or over-estimated. Distinct relationships are found that suggest that the estimation process being examined was not unbiased to such characteristics. This is a potentially useful finding in that it provides an opportunity for estimators to improve their prediction performance.","","0-7695-0403-5","10.1109/METRIC.1999.809743","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809743","","Programming;Electrical capacitance tomography;Software metrics;Software measurement;Stability;Hip;Computer errors;Information science;Read only memory;Testing","software development management;software cost estimation","subjective estimates;software development effort;expert judgment;expert-derived estimates;prediction performance","","38","","15","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Assessing the benefits of imputing ERP projects with missing data","I. Myrtveit; E. Stensrud; U. Olsson",NA; NA; NA,"Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","78","84","Incomplete, or missing data is likely to be encountered in empirical software engineering data sets. The authors evaluate some methods for handling missing data. The methods are presented and discussed in general and thereafter applied to effort estimation of ERP projects. We found that two sampling based methods, mean imputation (MI) and similar response pattern imputation (SRPI), waste less information than listwise deletion (LD). However, MI may introduce more bias than the SRPI method. Compared to sampling based methods, likelihood based imputation methods require too large data sets to be realistic to use in empirical software engineering. None of the sampling based methods, such as MI and SRPI, seem able to correct bias. So, though imputation is an attractive idea, the available methods still have severe limitations.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915517","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915517","","Enterprise resource planning;Software engineering;Costs;Engineering management;Data analysis;Data engineering;History;Packaging;Waste materials;Regression analysis","business data processing;systems re-engineering;software cost estimation;software metrics","ERP projects;missing data;empirical software engineering data sets;effort estimation;sampling based methods;mean imputation;similar response pattern imputation;listwise deletion;SRPI method;likelihood based imputation methods;large data sets;empirical software engineering;enterprise resource planning;package enabled reengineering","","4","","19","","7 Aug 2002","","","IEEE","IEEE Conferences"
