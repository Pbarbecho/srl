"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Effort estimation from change records of evolving software","J. F. Ramil; M. M. Lehman","Dept. of Comput., Imperial Coll. of Sci., Technol. & Med., London, UK; NA","Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium","6 Aug 2002","2000","","","777","","Algorithmic cost estimation in the context of software evolution is being addressed as part of the FEAST/2 project with encouraging results from an industrial case study. The paper considers the approach and case study.","0270-5257","1-58113-206-9","10.1145/337180.337633","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=870498","","Costs;Power system modeling;Software algorithms;Software maintenance;Software engineering;Lab-on-a-chip;Data mining;Predictive models;Educational institutions;Software measurement","software cost estimation;software metrics;software maintenance","effort estimation;change records;software evolution;algorithmic cost estimation;FEAST 2 project;case study;software metrics;software maintenance","","3","","4","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Software metrics in student projects","V. Ljubovic; N. Nosovic","Elektrotehnički fakultet Sarajevo, Zmaja od Bosne b.b.; Elektrotehnički fakultet Sarajevo, Zmaja od Bosne b.b.","2012 20th Telecommunications Forum (TELFOR)","24 Jan 2013","2012","","","1464","1467","Software Engineering is an important part of modern Computer Engineering education. A comprehensive course in Software Engineering should include a topic on software metrics. Also, a number of courses practice handing team projects to students. In this paper a number of software metrics are applied to projects developed by students with the purpose of estimating overall team effort. In this way, conclusions are formed about usefulness of these metrics in the context of teaching software engineering.","","978-1-4673-2984-2","10.1109/TELFOR.2012.6419495","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6419495","","","computer science education;educational courses;project management;software cost estimation;software metrics;teaching","software metrics;student projects;software engineering teaching;computer engineering education;overall team effort estimation","","","","16","","24 Jan 2013","","","IEEE","IEEE Conferences"
"Cost implications of interrater agreement for software process assessments","K. El Emam; J. -. Simon; S. Rousseau; E. Jacquet","Fraunhofer Inst. for Exp. Software Eng., Kaiserslautern, Germany; NA; NA; NA","Proceedings Fifth International Software Metrics Symposium. Metrics (Cat. No.98TB100262)","6 Aug 2002","1998","","","38","51","Much empirical research has been done on evaluating and modeling interrater agreement in software process assessments. Interrater agreement is the extent to which assessors agree in their ratings of software process capabilities when presented with the same evidence and performing their ratings independently. This line of research was based on the premise that lack of interrater agreement can lead to erroneous decisions from process assessment scores. However, thus far we do not know the impact of interrater agreement on the cost of assessments. We report on a study that evaluates the relationship between interrater agreement and the cost of the consolidation activity in assessments. The study was conducted in the context of two assessments using the emerging international standard ISO/IEC 15504. Our results indicate that for organizational processes, the relationship is strong and in the expected direction. For project level processes no relationship was found. These results indicate that for assessments that include organizational processes in their scope, ensuring high interrater agreement could lead to a reduction in their costs.","","0-8186-9201-4","10.1109/METRIC.1998.731225","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=731225","","Costs;ISO standards;IEC standards;Software standards;Software engineering;Coordinate measuring machines;Appraisal;Testing;Writing","software cost estimation;software process improvement;software metrics;software standards;ISO standards","software cost;interrater agreement;software process assessments;consolidation activity;international standard;ISO IEC 15504;organizational processes;project level processes;software metrics","","6","","32","","6 Aug 2002","","","IEEE","IEEE Conferences"
"An experiment for evaluating the effectiveness of using a system dynamics simulation model in software project management education","D. Pfahl; N. Koval; G. Ruhe","Fraunhofer IESE, Kaiserslautern, Germany; NA; NA","Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","97","109","Due to increasing demand for software project managers in industry, efforts are needed to develop the management-related knowledge and skills of the current and future software workforce. In particular, university education needs to provide to their computer science students not only with technology-related skills but, in addition, a basic understanding of typical phenomena occurring in industrial (and academic) software projects. The paper presents a controlled experiment that evaluates the effectiveness of using a process simulation model for university education in software project management. The experiment uses a pre-test-post-test control group design with random assignment of computer science students. The treatment of the experimental group involves a system dynamics simulation model. The treatment of the control group involves a conventional predictive model for project planning, i.e. the well-known COCOMO model. In addition to the presentation of the results of the empirical study, the paper discusses limitations and threats to validity. Proposals for modifications of the experimental design and the treatments are made for future replications.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915519","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915519","","Project management;Knowledge management;Software development management;Computer industry;Computer science education;Computer science;Computational modeling;Predictive models;Educational technology;Proposals","computer science education;teaching;project management;digital simulation;software development management;software cost estimation;software metrics","system dynamics simulation model;software project management education;software project managers;software workforce;university education;computer science students;technology-related skills;controlled experiment;process simulation model;pre-test-post-test control group design;random assignment;predictive model;project planning;COCOMO model","","2","","22","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Increasing the accuracy and reliability of analogy-based cost estimation with extensive project feature dimension weighting","M. Auer; S. Biffl","Inst. of Software Technol. & Interactive Syst., Vienna Univ. of Technol., Austria; Inst. of Software Technol. & Interactive Syst., Vienna Univ. of Technol., Austria","Proceedings. 2004 International Symposium on Empirical Software Engineering, 2004. ISESE '04.","20 Sep 2004","2004","","","147","155","Accurate and reliable software cost estimation is a vital task in software project portfolio decisions like resource scheduling or bidding. A prominent and transparent method of supporting estimators is analogy-based cost estimation, which is based on finding similar projects in historical portfolio data. However, the various project feature dimensions used to determine project analogy represent project aspects differing widely in their relevance; they are known to have varying impact on the analogies - and in turn on the overall estimation accuracy and reliability - , which is not addressed by traditional approaches. This paper (a) proposes an improved analogy-based approach based on extensive dimension weighting, and (ii) empirically evaluates the accuracy and reliability improvements in the context of five real-world portfolio data sets. Main results are accuracy and reliability improvements for all analyzed portfolios and quality measures. Furthermore, the approach indicates a quality barrier for analogy-based estimation approaches using the same basic assumptions and quality measures.","","0-7695-2165-7","10.1109/ISESE.2004.1334902","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1334902","","Costs;Portfolios;Yield estimation;Software quality;Mathematical model;Interactive systems;Software measurement;Resource management;Risk management;Software metrics","software cost estimation;software management","cost estimation accuracy;cost estimation reliability;analogy-based cost estimation;feature dimension weighting;software accuracy;software reliability;software cost estimation;software project portfolio decisions;resource scheduling;resource bidding;estimators support;historical portfolio data;quality measures","","15","","18","","20 Sep 2004","","","IEEE","IEEE Conferences"
"Definition of software metrics for software project development by using fuzzy sets and logic","S. Mirseidova; L. Atymtayeva","Kazakh-British Technical University, Tole bi st., 59, Almaty, Kazakhstan; Kazakh-British Technical University, Tole bi st., 59, Almaty, Kazakhstan","The 6th International Conference on Soft Computing and Intelligent Systems, and The 13th International Symposium on Advanced Intelligence Systems","22 Apr 2013","2012","","","272","276","Software metrics measure certain properties of the software or its specifications. As quantitative measurements are required in all the sciences, there are ongoing efforts among computer science practitioners and academics to apply analogous approaches to software development process. The main aim is to provide objective, reproducible and quantitative measure that can have many useful applications in such important parts of software project management as the schedule and budget planning, cost estimation, quality assurance, software debugging, performance optimization and optimal staff task assignments as well as in the whole software development life cycle. There exist a number of techniques for modeling software metrics including FPA estimation (mean-based, median-based), LS regression, LMS regression, Neural Networks, and Fuzzy Logic. In this paper we are going to talk about singularities of applying Fuzzy Logic approach to the software metrics modeling.","","978-1-4673-2743-5","10.1109/SCIS-ISIS.2012.6505336","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6505336","software project management;fuzzy logic and sets;software metrics","","fuzzy logic;fuzzy set theory;software development management;software metrics","software metrics;software project development;fuzzy set;software specification;software property;quantitative measurement;schedule management;budget planning;cost estimation;quality assurance;software debugging;performance optimization;staff task assignment;software development life cycle;FPA estimation;mean-based estimation;median-based estimation;LS regression;least squares regression;LMS regression;least mean squares regression;neural network;fuzzy logic","","","","14","","22 Apr 2013","","","IEEE","IEEE Conferences"
"Software Cost Estimation Framework for Service-Oriented Architecture Systems Using Divide-and-Conquer Approach","Z. Li; J. Keung","Sch. of Comput. Sci. & Eng., NICTA & UNSW, Sydney, NSW, Australia; Sch. of Comput. Sci. & Eng., NICTA & UNSW, Sydney, NSW, Australia","2010 Fifth IEEE International Symposium on Service Oriented System Engineering","13 Sep 2010","2010","","","47","54","Due to the complexity of Service-Oriented Architecture (SOA), cost and effort estimation for SOA-based software development is more difficult than that for traditional software development. Unfortunately, there is a lack of published work about cost and effort estimation for SOA-based software. Existing cost estimation approaches are inadequate to address the complex service-oriented systems. This paper proposes a novel framework based on Divide-and-Conquer (D&C) for cost estimation for building SOA-based software. By dealing with separately development parts, the D&C framework can help organizations simplify and regulate SOA implementation cost estimation. Furthermore, both cost estimation modeling and software sizing work can be satisfied respectively by switching the corresponding metrics within this framework. Given the requirement of developing these metrics, this framework also defines the future research in four different directions according to the separate cost estimation sub-problems.","","978-1-4244-7326-7","10.1109/SOSE.2010.29","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5569930","service-oriented architecture (SOA);software cost estimation;divide-and-conquer (D&C);framework","Estimation;Service oriented architecture;Software;Programming;Complexity theory;Size measurement;Software measurement","divide and conquer methods;software architecture;software cost estimation;software metrics;Web services","software cost estimation framework;service-oriented architecture system complexity;divide-and-conquer approach;SOA-based software development","","13","","25","","13 Sep 2010","","","IEEE","IEEE Conferences"
"Software size measurement of student information terminal with use case point","D. Kurniadi; Sasmoko; H. L. H. S. Warnars; F. L. Gaol","Computer Science Department, BINUS Graduate Program - Doctor, of Computer Science, Bina Nusantara University Jakarta, Indonesia 11480; Primary Teacher Education, Department, Faculty of Humanities, Bina Nusantara University Jakarta, Indonesia 11480; Computer Science Department, BINUS Graduate, Program - Doctor of Computer Science, Bina Nusantara University, Jakarta, Indonesia 11480; Computer Science Department, BINUS Graduate, Program - Doctor of Computer Science, Bina Nusantara University, Jakarta, Indonesia 11480","2017 IEEE International Conference on Cybernetics and Computational Intelligence (CyberneticsCom)","12 Mar 2018","2017","","","164","169","Student Information Terminals (S-IT) is an independent academic service information system for students, where this service makes it easy for students to obtain academic information in real time with information such as the transcript of academic achievement, finance, course, attendance, exam, lecturer, card examinees and announcements academic, and has the function to print directly the data independently on S-IT devices. To find out how well the S-IT is in terms of software size, then needed a measurement. The measurements used in this paper using the Use Case Point (UCP) method as one of the approved software metrics which measure the functionality our software size. The results of the measurement of software size S-IT shown that the project has a small size, the software has a value of UCP = 96.767 estimate effort, has the development time 1,452 hours or equivalent 9 months 1 week and have development costs in Indonesian Rupiah is 263,175,000 IDR. The aims of measurement software size S-IT with the use case point is to help make decisions about the implementation of software development application project in terms of the estimated time, costs, and people.","","978-1-5386-0784-8","10.1109/CYBERNETICSCOM.2017.8311703","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8311703","use case point;software measurement;software metrics;student information terminal;information system academic","Software;Size measurement;Software measurement;Complexity theory;Schedules;Environmental factors;Computer science","educational administrative data processing;educational institutions;information systems;software cost estimation;software development management;software metrics","student information terminal;academic achievement;Use Case Point method;software development application project;software size measurement;software metrics;academic service information system;S-IT devices;development costs","","2","","22","","12 Mar 2018","","","IEEE","IEEE Conferences"
"Empirical validation of relational database metrics for effort estimation","B. Jamil; J. Ferzund; A. Batool; S. Ghafoor","Department of Computer Science, University of Sargodha, Sargodha, Pakistan; Department of Computer Science, University of Sargodha, Sargodha, Pakistan; Department of Computer Science, University of Sargodha, Sargodha, Pakistan; Department of Computer Science, University of Sargodha, Sargodha, Pakistan","INC2010: 6th International Conference on Networked Computing","14 Jun 2010","2010","","","1","5","Measurements of certain attributes during software development process are of core importance. Number of effort estimation metrics has been proposed for software projects, while ignoring relational database applications. In this paper we propose a set of metrics to measure the effort for small scale relational database applications. We present an effort estimation model using statistical techniques that can be used by software development organizations. Our model is flexible as it can measure effort with few database objects as well as with all database objects. We have compared estimated effort with actual effort and found very promising results.","","978-89-88678-20-6","","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5484854","","Relational databases;Software measurement;Programming;Application software;Software metrics;Books;Project management;Costs;Design for experiments;System testing","relational databases;software cost estimation;software metrics","relational database metrics;effort estimation metrics;software development process are;software projects;statistical techniques","","","","11","","14 Jun 2010","","","IEEE","IEEE Conferences"
"Measuring domain engineering effects on software change cost","H. Siy; A. Mockus","Lucent Technol., Bell Labs., USA; NA","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","304","311","Domain engineering (DE) is an increasingly popular process for efficiently producing software. DE uses detailed knowledge of a particular application domain to define rigorously a family of software products within that domain. We describe a methodology for precise quantitative measurement of DE impact on software change efforts. The methodology employs measures of small software changes to determine the effect of DE. We illustrate this approach in a detailed case study of DE in a telecommunications product. In the particular case the change effort was dramatically reduced. The methodology can precisely measure cost savings in change effort and is simple and inexpensive since it relies on information automatically collected by version control systems.","","0-7695-0403-5","10.1109/METRIC.1999.809751","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809751","","Software measurement;Costs;Productivity;Software engineering;Technology transfer;Application software;Observability;Electrical capacitance tomography;Identity-based encryption;Programming","software metrics;software cost estimation;telecommunication computing;configuration management","domain engineering;software change cost;software products;methodology;quantitative measurement;software change;case study;telecommunications software;cost savings;version control systems;software metrics","","7","","16","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Business impact, benefit, and cost of applying GQM in industry: an in-depth, long-term investigation at Schlumberger RPS","A. Birk; R. van Solingen; J. Jarvinen","Fraunhofer IESE, Kaiserslautern, Germany; NA; NA","Proceedings Fifth International Software Metrics Symposium. Metrics (Cat. No.98TB100262)","6 Aug 2002","1998","","","93","96","Many success stories have been reported on specific effects of measurement, but little is known about the multiple interactions of measurement programmes with the business environment of a software organisation. This paper summarises industrial experiences with the Goal/Question/Metric (GQM) approach to software engineering measurement. They are based on long-term observation and additional detailed investigations at Schlumberger RPS. The paper reports the business impact of GQM in terms of identified benefit, cost models, and factors for successful application of GQM.","","0-8186-9201-4","10.1109/METRIC.1998.731231","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=731231","","Software measurement;Gain measurement;Programming;Electronics industry;Industrial electronics;Computer industry;Software engineering;Capability maturity model;Application software;Petroleum","business data processing;cost-benefit analysis;software metrics;software cost estimation","business impact;cost benefit analysis;GQM;Schlumberger RPS;measurement programmes;software organisation;Goal Question Metric;software engineering measurement","","11","","16","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Effect of Variations in Measurement Process for Software Development Efforts","B. K. Singh; A. Punhani; G. P. Singh; A. K. Misra","Deptt. of Comput. Sci. & Eng., RBS Coll., Agra, India; Deptt. of Comput. Sci. & Eng., RBS Coll., Agra, India; Deptt. of Comput. Sci. & Eng., Shivdan Singh Eng. Coll., Aligarh, India; Deptt. of Comput. Sci. & Eng., MNNIT Allahabad, Allahabad, India","2014 6th International Conference on Multimedia, Computer Graphics and Broadcasting","29 Jan 2015","2014","","","3","8","Researchers have proposed that the reliability of software prediction models can be assessed by the following most widely used evaluation criterion, i.e., Difference Measure and Ratio Measure. Ratio measure is more suitable for the assessment of the accuracy in software cost estimation. Results in this research demonstrated that applying proposed method to the software effort estimation is by far the most feasible approach for addressing the problem of apprehension and ambiguity existing in software effort drivers. Small adjustments to the COCOMO cost drivers bring significant improvements to the quality criteria applied to the proposed approach.","","978-1-4799-7764-2","10.1109/MulGraB.2014.8","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7024246","Software Effort Estimation;COCOMO;Non Algorithmic Models;Genetic Algorithm;Evaluation Criterion","NASA;Mathematical model;Estimation;Software;Equations;Computational modeling;Biological cells","device drivers;software cost estimation;software metrics;software performance evaluation;software reliability","measurement process;software development effort;software prediction model;software reliability;evaluation criterion;difference measure;ratio measure;software cost estimation;software effort driver;COCOMO cost driver;quality criteria","","3","","16","","29 Jan 2015","","","IEEE","IEEE Conferences"
"The Effect of Highlighting Error Categories in FSM Training on the Accuracy of Measurement","A. M. Ertugrul; G. Yilmaz; M. Salmanoglu; O. Demirörs",NA; NA; NA; NA,"2014 Joint Conference of the International Workshop on Software Measurement and the International Conference on Software Process and Product Measurement","5 Jan 2015","2014","","","152","156","As various software management activities including cost estimation and project control are conducted based on the software size measurement, achieving high accuracy in functional size measurement (FSM) is critical. Several studies examined the relation between FSM training and improvement in the accuracy of FSM. However, those studies propose comprehensive frameworks and approaches that require fundamental changes in the training content. In this study, we analyzed the effect of highlighting error categories during training by extracting the errors throughout four years. We showed that, highlighting the frequent error categories during the same training period without a fundamental change in the content would significantly decrease the error rate. The results of the research we conducted are promising about the improvement of measurement accuracy.","","978-1-4799-4174-2","10.1109/IWSM.Mensura.2014.21","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7000094","Highlighting Error Categories;Functional Size Measurement;Accuracy","Size measurement;Software measurement;Software;Education;Software reliability;Joints","project management;software cost estimation;software management;software metrics","error categories;FSM training;measurement accuracy;software management activities;software cost estimation;project control;software size measurement;functional size measurement;error extraction","","","","14","","5 Jan 2015","","","IEEE","IEEE Conferences"
"Algorithmic cost estimation for software evolution","J. F. Ramil","Dept. of Comput., Imperial Coll. of Sci., Technol. & Med., London, UK","Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium","6 Aug 2002","2000","","","701","703","The study addresses the problem of cost estimation in the context of software evolution by building a set of quantitative models and assessing their predictive power. The models aim at capturing the relationship between effort, productivity and a suite of metrics of software evolution extracted from empirical data sets.","0270-5257","1-58113-206-9","10.1145/337180.337587","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=870473","","Software algorithms;Costs;Productivity;Software maintenance;Processor scheduling;Aging;Context modeling;Predictive models;Data mining;Monitoring","software cost estimation;software metrics;software maintenance","algorithmic cost estimation;software evolution;quantitative models;predictive power;productivity;metrics;empirical data sets","","2","","19","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Software productivity measurement using multiple size measures","B. Kitchenham; E. Mendes","Nat. ICT Australia, Alexandria, NSW, Australia; NA","IEEE Transactions on Software Engineering","10 Jan 2005","2004","30","12","1023","1035","Productivity measures based on a simple ratio of product size to project effort assume that size can be determined as a single measure. If there are many possible size measures in a data set and no obvious model for aggregating the measures into a single measure, we propose using the expression AdjustedSize/Effort to measure productivity. AdjustedSize is defined as the most appropriate regression-based effort estimation model, where all the size measures selected for inclusion in the estimation model have a regression parameter significantly different from zero (p<0.05). This productivity measurement method ensures that each project has an expected productivity value of one. Values between zero and one indicate lower than expected productivity, values greater than one indicate higher than expected productivity. We discuss the assumptions underlying this productivity measurement method and present an example of its use for Web application projects. We also explain the relationship between effort prediction models and productivity models.","1939-3520","","10.1109/TSE.2004.104","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1377195","Index Terms- Software productivity measurement;software cost estimation.","Size measurement;Software measurement;Productivity;Predictive models;Costs;Equations;Computer science;Computer Society;Application software;Production","software cost estimation;software metrics;productivity;project management;regression analysis","software productivity measurement;software cost estimation;product size;project effort;regression-based effort estimation;parameter estimation","","71","","27","","10 Jan 2005","","","IEEE","IEEE Journals"
"Overcoming the challenges in cost estimation for distributed software projects","N. Ramasubbu; R. K. Balan","School of Information Systems, Singapore Management University, Singapore; School of Information Systems, Singapore Management University, Singapore","2012 34th International Conference on Software Engineering (ICSE)","28 Jun 2012","2012","","","91","101","We describe how we studied, in-situ, the operational processes of three large high process maturity distributed software development companies and discovered three common problems they faced with respect to early stage project cost estimation. We found that project managers faced significant challenges to accurately estimate project costs because the standard metrics-based estimation tools they used (a) did not effectively incorporate diverse distributed project configurations and characteristics, (b) required comprehensive data that was not fully available for all starting projects, and (c) required significant domain experience to derive accurate estimates. To address these challenges, we collaborated with practitioners at the three firms and developed a new learning-oriented and semi-automated early-stage cost estimation solution that was specifically designed for globally distributed software projects. The key idea of our solution was to augment the existing metrics-driven estimation methods with a case repository that stratified past incidents related to project effort estimation issues from the historical project databases at the firms into several generalizable categories. This repository allowed project managers to quickly and effectively “benchmark” their new projects to all past projects across the firms, and thereby learn from them. We deployed our solution at each of our three research sites for real-world field-testing over a period of six months. Project managers of 219 new large globally distributed projects used both our method to estimate the cost of their projects as well as the established metrics-based estimation approaches they were used to. Our approach achieved significantly reduced estimation errors (of up to 60%). This resulted in more than 20% net cost savings, on average, per project - a massive total cost savings across all projects at the three firms!","1558-1225","978-1-4673-1067-3","10.1109/ICSE.2012.6227203","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6227203","Globally distributed software development;software engineering economics;cost estimation;case-based reasoning;analogies;project management;learning","Estimation;Software;Measurement;Benchmark testing;Companies;Cognition;Databases","project management;software cost estimation;software metrics","distributed software development companies;early stage project cost estimation;standard metrics-based estimation tools;learning-oriented early-stage cost estimation;semiautomated early-stage cost estimation;globally distributed software projects;project effort estimation;historical project databases","","18","","31","","28 Jun 2012","","","IEEE","IEEE Conferences"
"A Metric of Software Size as a Tool for IT Governance","M. V. B. D. Castro; C. A. M. Hernandes","NA; Tribunal de Contas da Uniao (TCU), Brasilia, Brazil","2013 27th Brazilian Symposium on Software Engineering","21 Apr 2014","2013","","","99","108","This paper proposes a new metric for software functional size, which is derived from Function Point Analysis (FPA), but overcomes some of its known deficiencies. The statistical results show that the new metric, Functional Elements (EF), and its sub metric, Functional Elements of Transaction (EFt), have higher correlation with the effort in software development than FPA in the context of the analyzed data. The paper illustrates the application of the new metric as a tool to improve IT governance specifically in assessment, monitoring, and giving directions to the software development area.","","978-0-7695-5165-4","10.1109/SBES.2013.13","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6800186","Function Points;IT governance;IT performance;Software engineering;Software metrics","Complexity theory;Software;Size measurement;Maintenance engineering;Software metrics","software cost estimation;software metrics","software functional size metric;IT governance;function point analysis;FPA;functional elements of transaction;EFt;software development area","","2","","49","","21 Apr 2014","","","IEEE","IEEE Conferences"
"Evaluation and application of complexity-based criticality models","C. Ebert","Switching Syst. Div., Alcatel, Stuttgart, Germany","Proceedings of the 3rd International Software Metrics Symposium","6 Aug 2002","1996","","","174","185","Cost-effective software project management has the serious need to focus resources on those areas with highest criticality. Identifying such components in advance that need high development effort or that are likely to produce many failures during operation and assigning additional design or corrective effort is one approach for effective resource allocation. Complexity metrics are applied during the development of large telecommunication software in order to identify high risk components and to tailor reliability growth models. Five classification techniques (Pareto classification, classification trees, factor-based discriminant analysis, fuzzy classification, neural networks) are compared for identifying critical components. For testing and maintenance phases we combined this approach with tailored reliability growth models. Results from a current large-scale switching project are included to show practical benefits.","","0-8186-7365-6","10.1109/METRIC.1996.492454","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=492454","","Classification tree analysis;Telecommunication network reliability;Application software;Project management;Resource management;Pareto analysis;Fuzzy neural networks;Neural networks;Testing;Maintenance","software metrics;software cost estimation;software development management;project management;telecommunication computing;software reliability;pattern classification;program testing;software maintenance","complexity-based criticality models;cost-effective software project management;software failures;software design;resource allocation;complexity metrics;telecommunication software;reliability growth models;Pareto classification;classification trees;factor-based discriminant analysis;fuzzy classification;neural networks;software testing;software maintenance;large-scale switching project","","10","","22","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Are the principal components of software complexity data stable across software products?","T. M. Khoshgoftaar; D. L. Lanning","Dept. of Comput. Sci. & Eng., Florida Atlantic Univ., Boca Raton, FL, USA; NA","Proceedings of 1994 IEEE 2nd International Software Metrics Symposium","6 Aug 2002","1994","","","61","72","The current software market is not suitable for organizations that place competitive bids, set schedules, or control projects without regard to past performance. Software quality models based upon data collected from past projects can help engineers to estimate costs of future development efforts, and to control ongoing efforts. Application of principal components analysis can improve the stability and predictive quality of software quality models. However, models based upon principal components are only appropriate for application to products having similar principal components. We apply a statistical technique for quantifying the similarity of principal components. We find that distinct but similar products developed by the same organization can share similar principal components, and that distinct products developed by distinct organizations will likely have dissimilar principal components.<>","","0-8186-5865-7","10.1109/METRIC.1994.344227","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=344227","","Software quality;Data engineering;Application software;Stability;Programming;Software testing;Computer science;Processor scheduling;Costs;Digital TV","software quality;software cost estimation;software metrics","software complexity data;software products;software market;organizations;competitive bids;control projects;set schedules;software quality models;cost estimation;principal components analysis;statistical technique","","6","","22","","6 Aug 2002","","","IEEE","IEEE Conferences"
"The application of case-based reasoning to early Web project cost estimation","E. Mendes; N. Mosley; S. Counsell","Dept. of Comput. Sci., Auckland Univ., New Zealand; Dept. of Comput. Sci., Auckland Univ., New Zealand; Dept. of Comput. Sci., Auckland Univ., New Zealand","Proceedings 26th Annual International Computer Software and Applications","10 Dec 2002","2002","","","393","398","Literature shows that over the years numerous techniques for estimating development effort have been suggested, derived from late project measures. However, to the successful management of software projects, estimates are necessary throughout the whole development life cycle. The objective is twofold. First, we describe the application of case-based reasoning (CBR) for estimating Web hypermedia development effort using measures collected at different stages in the development cycle. Second, we compare the prediction accuracy of those measures, obtained using different CBR configurations. Contrary to the expected, late measures did not show statistically significant better predictions than early measures.","0730-3157","0-7695-1727-7","10.1109/CMPSAC.2002.1045034","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1045034","","Costs;Application software;Accuracy;Life estimation;Phase measurement;Computer science;Project management;Software development management;Software engineering;Navigation","case-based reasoning;information resources;Internet;software cost estimation;project management;software metrics;hypermedia;software development management","case-based reasoning;Web project cost estimation;software development effort estimation;Web hypermedia development;software measures;software metrics;software project management;software development life cycle","","21","","38","","10 Dec 2002","","","IEEE","IEEE Conferences"
"How valuable is company-specific data compared to multi-company data for software cost estimation?","I. Wieczorek; M. Ruhe","Fraunhofer Inst. for Exp. Software Eng., Kaiserslautern, Germany; NA","Proceedings Eighth IEEE Symposium on Software Metrics","7 Aug 2002","2002","","","237","246","This paper investigates the pertinent question whether multi-organizational data is valuable for software project cost estimation. Local, company-specific data is widely believed to provide a better basis for accurate estimates. On the other hand, multi-organizational databases provide an opportunity for fast data accumulation and shared. information benefits. Therefore, this paper trades off the potential advantages and drawbacks of using local data as compared to multi-organizational data. Motivated by the results from previous investigations, we further analyzed a large cost database from Finland that collects standard cost factors and includes information on six individual companies. Each of these companies provided data for more than ten projects. This information was used to compare the accuracy between company-specific (local) and company-external (global) cost models. They show that company-specific models seem not to yield better results than the company external models. Our results are based on applying two standard statistical estimation methods (OLS-regression, analysis of variance) and analogy-based estimation.","1530-1435","0-7695-1339-5","10.1109/METRIC.2002.1011342","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1011342","","Costs;Electrical capacitance tomography;Databases;Software quality;Software engineering;Computer science;Read only memory;Statistical analysis;Analysis of variance;Monitoring","software cost estimation;software development management;statistical analysis","company-specific data;multiple company data;software cost estimation;multiple-organizational data;cost factors;cost models;statistical estimation methods;data set description","","22","","28","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Theoretical Maximum Prediction Accuracy for Analogy-Based Software Cost Estimation","J. W. Keung","NICTA Ltd., Sydney, NSW, Australia","2008 15th Asia-Pacific Software Engineering Conference","22 Dec 2008","2008","","","495","502","Software cost estimation is an important area of research in software engineering. Various cost estimation model evaluation criteria (such as MMRE, MdMRE etc.) have been developed for comparing prediction accuracy among cost estimation models. All of these metrics capture the residual difference between the predicted value and the actual value in the dataset, but ignore the importance of the dataset quality. What is more, they implicitly assume the prediction model to be able to predict with up to 100% accuracy at its maximum for a given dataset. Given that these prediction models only provide an estimate based on observed historical data, absolute accuracy cannot be possibly achieved. It is therefore important to realize the theoretical maximum prediction accuracy (TMPA) for the given model with a given dataset. In this paper, we first discuss the practical importance of this notion, and propose a novel method for the determination of TMPA in the application of analogy-based software cost estimation. Specifically, we determine the TMPA of analogy using a unique dynamic K-NN approach to simulate and optimize the prediction system. The results of an empirical experiment show that our method is practical and important for researchers seeking to develop improved prediction models, because it offers an alternative for practical comparison between different prediction models.","1530-1362","978-0-7695-3446-6","10.1109/APSEC.2008.43","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4724583","Software Cost Estimation;Software Metrics and Measurement;Software Cost Estimation;Analogy;K-NN;MMRE","Accuracy;Costs;Predictive models;Software engineering;Australia;Software measurement;Application software;Software metrics;Programming;Software performance","software cost estimation;software metrics","theoretical maximum prediction accuracy;analogy-based software cost estimation;prediction models;software metrics","","16","","19","","22 Dec 2008","","","IEEE","IEEE Conferences"
"Metrics of software evolution as effort predictors - a case study","Ramil; Lehman","Dept. of Comput., Imperial Coll. of Sci., Technol. & Med., London, UK; NA","Proceedings 2000 International Conference on Software Maintenance","6 Aug 2002","2000","","","163","172","Despite its importance, cost estimation in the context of continuing software evolution has been relatively unexplored. This paper addresses this omission by describing some models that predict effort as a function of a suite of metrics of software evolution. It presents a case study relating to the evolution of the kernel of a mainframe operating system. Six models based on eight different indicators of evolution activity are proposed, and their predictive power is examined and compared to that of two baseline models. Predictions with errors of the order of 20% of the actual values have been obtained from the models, when fitted to and tested against historical data over a segment of 10 years of the kernel's continuing evolution. The appropriateness of the proposed models as predictors appears to be restricted to homogeneous evolution segments, i.e. periods with relatively small variations in the level of effort applied. It was found that models based on coarse granularity measures, such as ""subsystem counts"", provided a mean magnitude of relative error which was similar to those based on finer alternatives, such as ""module counts"".","1063-6773","0-7695-0753-0","10.1109/ICSM.2000.883036","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=883036","","Software metrics","software metrics;software maintenance;software cost estimation;operating system kernels","software evolution metrics;software effort predictors;case study;software cost estimation;mainframe operating system kernel;software evolution activity indicators;predictive power;baseline models;prediction errors;historical data;data fitting;homogeneous evolution segments;effort variation;coarse granularity measures;subsystem counts;relative error magnitude;module counts","","31","","39","","6 Aug 2002","","","IEEE","IEEE Conferences"
"The effect of object-oriented frameworks on developer productivity","S. Moser; O. Nierstrasz","Inst. fuer Inf., Berne Univ., Switzerland; Inst. fuer Inf., Berne Univ., Switzerland","Computer","6 Aug 2002","1996","29","9","45","51","Cost and time estimation are difficult problems in software development projects. Software metrics tackle this problem by assuming a statistical correlation between the size of a software project and the amount of effort typically required to realize it. To be useful in estimating cost, a size metric must take into account the inherent complexity of the system. Such metrics have been applied with varying degrees of success, but the nature of software development has been changing, and some of the assumptions behind the established cost-estimation techniques are slowly being invalidated. The System Meter (SM) is a new software sizing approach based on the notion of system description. System descriptions encompass all kinds of software artifacts, from requirement documents to final code. For each kind or level of artifacts, there is a corresponding flavor of SM. In our studies we used the first operational flavor, the SM at the preliminary analysis level, or Pre-SM. In contrast to the well-known Function Point (FP) metric, which is measurable after the more detailed but costly phase of domain analysis only, the SM explicitly takes OO concepts into account. It also distinguishes between components to be developed and those to be reused, thus reflecting the idea of incremental functionality. We present results of a field study of 36 projects developed using object technology. We measured both FP and the Pre-SM method in all 36 projects and compared their correlation to the development effort.","1558-0814","","10.1109/2.536783","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=536783","","Productivity;Samarium;Costs;Software systems;Gain measurement;Software metrics;Programming;Open systems;Object oriented modeling;Software measurement","software cost estimation;software development management;project management;software metrics;object-oriented programming;human resource management","object-oriented frameworks;developer productivity;time estimation;software cost estimation;software development projects;software metrics;statistical correlation;size metric;System Meter;software sizing approach;system description;Pre-SM;Function Point metric;domain analysis;software reuse;incremental functionality","","50","","12","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Making resource decisions for software projects","N. Fenton; W. Marsh; M. Neil; P. Cates; S. Forey; M. Tailor","Dept. of Comput. Sci., Univ. of London, UK; Dept. of Comput. Sci., Univ. of London, UK; Dept. of Comput. Sci., Univ. of London, UK; Dept. of Comput. Sci., Univ. of London, UK; Dept. of Comput. Sci., Univ. of London, UK; Dept. of Comput. Sci., Univ. of London, UK","Proceedings. 26th International Conference on Software Engineering","26 Jul 2004","2004","","","397","406","Software metrics should support managerial decision making in software projects. We explain how traditional metrics approaches, such as regression-based models for cost estimation fall short of this goal. Instead, we describe a causal model (using a Bayesian network) which incorporates empirical data, but allows it to be interpreted and supplemented using expert judgement. We show how this causal model is used in a practical decision-support tool, allowing a project manager to trade-off the resources used against the outputs (delivered functionality, quality achieved) in a software project. The model and toolset have evolved in a number of collaborative projects and hence capture significant commercial input. Extensive validation trials are taking place among partners on the EC funded project MODIST (this includes Philips, Israel Aircraft Industries and QinetiQ) and the feedback so far has been very good. The estimates are sensible and the causal modelling approach enables decision-makers to reason in a way that is not possible with other project management and resource estimation tools. To ensure wide dissemination and validation a version of the toolset with the full underlying model is being made available for free to researchers.","0270-5257","0-7695-2163-0","10.1109/ICSE.2004.1317462","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1317462","","Project management;Software metrics;Decision making;Costs;Bayesian methods;Quality management;Resource management;Software quality;Software tools;Collaborative tools","software development management;decision support systems;software metrics;Bayes methods;estimation theory;public domain software","resource decisions;software projects;software metrics;managerial decision making support;regression-based models;cost estimation;causal model;Bayesian network;empirical data;expert judgement;decision-support tool;project MODIST;causal modelling;project management tools;resource estimation tools","","54","","36","","26 Jul 2004","","","IEEE","IEEE Conferences"
"Determining the value of a corporate reuse program","J. S. Poulin; J. M. Caruso","IBM, London, UK; IBM, London, UK","[1993] Proceedings First International Software Metrics Symposium","6 Aug 2002","1993","","","16","27","Reuse metrics must accurately reflect the amount of effort saved. One must have realistic measures to ensure the credibility of the value placed on reuse and to separate reuse benefits from those of other technologies also competing for limited investment dollars. The paper defines a reuse metric and return on investment (ROI) model at IBM that distinguishes reuse savings and benefits from those already gained through accepted software engineering techniques. Used in conjunction with a planned reuse program, the potential of reuse serves as a powerful motivator. They derive three reuse metrics from readily available software data elements and use these metrics in return on investment model that establishes a sound business justification for reuse.<>","","0-8186-3740-4","10.1109/METRIC.1993.263804","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=263804","","Investments;System software;Programming;Costs;Software engineering;Software development management;Software metrics;Statistics;Hardware;Software maintenance","DP management;software cost estimation;software metrics;software reusability","corporate reuse program;reuse benefits;reuse metric;return on investment;IBM;software engineering","","4","","22","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Quality prediction model of object-oriented software system using computational intelligence","Cong Jin; Shu-Wei Jin; Jun-Min Ye; Qing-Guo Zhang","Department of Computer Science, Central China Normal University, Wuhan, China; The School of Physics & Technology, Wuhan University, China; Department of Computer Science, Central China Normal University, Wuhan, China; Department of Computer Science, Central China Normal University, Wuhan, China","2009 2nd International Conference on Power Electronics and Intelligent Transportation System (PEITS)","5 Feb 2010","2009","2","","120","123","Effective prediction of the fault-proneness plays a very important role in the analysis of software quality and balance of software cost, and it also is an important problem of software engineering. Importance of software quality is increasing leading to development of new sophisticated techniques, which can be used in constructing models for predicting quality attributes. In this paper, we use fuzzy c-means clustering (FCM) and radial basis function neural network (RBFNN) to construct prediction model of the fault-proneness, RBFNN is used as a classificatory, and FCM is as a cluster. Object-oriented software metrics are as input variables of fault prediction model. Experiments results confirm that designed model is very effective for predicting a class's fault-proneness, it has a high accuracy, and its implementation requires neither extra cost nor expert's knowledge. It also is automated. Therefore, proposed model was very useful in predicting software quality and classing the fault-proneness.","","978-1-4244-4544-8","10.1109/PEITS.2009.5406941","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5406941","FCM;fault-proneness;RBFNN;object-oriented;software metrics;software quality prediction","Object oriented modeling;Predictive models;Software systems;Computational intelligence;Software quality;Costs;Software engineering;Fuzzy neural networks;Radial basis function networks;Software metrics","fuzzy set theory;object-oriented methods;pattern clustering;radial basis function networks;software cost estimation;software fault tolerance;software metrics;software quality","quality prediction model;object-oriented software system;computational intelligence;fault-proneness;software quality analysis;software cost;software engineering;fuzzy c-means clustering;radial basis function neural network;classificatory;object-oriented software metrics;fault prediction model","","","","6","","5 Feb 2010","","","IEEE","IEEE Conferences"
"Better validation in a world-wide development environment","C. Ebert; C. Hernandez Parro; R. Suttels; H. Kolarczyk","Switching & Routing Div., Alcatel, Antwerp, Belgium; NA; NA; NA","Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","298","305","Increasingly, software projects are handled in a global and distributed project setup. Global software development, however, also challenges traditional techniques of software engineering, such as peer reviews or teamwork. In particular, validation activities during development, such as inspections, need to be adjusted to achieve results which are both efficient and effective. Effective teamwork and the coaching of engineers contribute highly to successful projects. In this article, we evaluate experiences with validation activities in a global setting within Alcatel's switching and routing business. We investigate three hypotheses related, respectively, to the effects of collocated inspections, intensive coaching and feature-oriented development teams on globally distributed projects. As all these activities mean initial investment compared to a standard process with scattered activities, the major validation criterion for the three hypotheses is cost reduction due to earlier defect detection and less defects introduced. The data is taken from a sample of over 60 international projects of various sizes, from which we have collected all types of software product and process metrics in the past four years.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915537","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915537","","Costs;Teamwork;Routing;Inspection;Programming;Continents;Face detection;Investments;Scattering;Outsourcing","program verification;software development management;inspection;investment;software cost estimation;training;software metrics","software validation;world-wide software development environment;global distributed software projects;software engineering;peer review;teamwork;software inspection;intensive coaching;Alcatel;switching;routing;collocated inspections;feature-oriented development teams;initial investment;cost reduction;early defect detection;software defect introduction;international projects;software product metrics;software process metrics;efficiency;nonquality cost;incremental development","","","","17","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Software Project Cost Estimation Based on Groupware","Y. Jin; J. Li; J. Lin; Q. Chen","Zhejiang Provincial Dept. of Finance, Inf. Centre, China; NA; Zhejiang Provincial Dept. of Finance, Inf. Centre, China; Coll. of Inf. Eng., Zhejiang Univ. of Technol., Hangzhou, China","2009 WRI World Congress on Software Engineering","10 Nov 2009","2009","2","","437","441","This paper combination of COCOMO2 cost structure model, Object Oriented Metric, groupware technology to research and achieve software project cost estimation based on groupware. Through the source codes calculation of inside groupware and function point assessment among groupware, we can improve range of error of the cost assessment and improve the accuracy of estimate.","","978-0-7695-3570-8","10.1109/WCSE.2009.268","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5319616","Cost Estimation;Function Point Analysis;COCOMO2;Groupware","Collaborative software;Collaborative work;Object oriented modeling;Lab-on-a-chip;Cost function;Documentation;Predictive models;Information technology;Life estimation;Size measurement","groupware;object-oriented methods;project management;software cost estimation;software metrics","software project cost estimation;groupware;object oriented metric;source codes calculation;COCOMO2 cost structure model","","","","8","","10 Nov 2009","","","IEEE","IEEE Conferences"
"An empirical study of effort estimation during project execution","M. C. Ohlsson; C. Wohlin","Dept. of Commun. Syst., Lund Inst. of Technol., Sweden; NA","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","91","98","Presents an empirical study of effort estimation in software engineering projects. In particular, this study is focused on improvements in effort estimations as more information becomes available. For example, after the requirements phase, the requirements specification is available, and the question is whether the knowledge regarding the number of requirements helps in improving the effort estimation of the project. The objective is twofold. First, it is important to find suitable measures that can be used in the re-planning of the projects. Second, the objective is to study how the effort estimations evolve as a software project is performed. The analysis is based on data from 26 projects. The analysis consists of two main steps: model building based on data from part of the projects, and evaluation of the models for the other projects. No single measure was found to be a particular good measure for an effort prediction model; instead, several measures from different phases were used. The prediction models were then evaluated, and it is concluded that it is difficult to improve effort estimations during project execution, at least if the initial estimate is fairly good. It is, however, believed that the prediction models are important for knowing that the initial estimate is of the right order, i.e. the estimates are needed to ensure that the initial estimate was fairly good. It is concluded that the re-estimation approach will help project managers to stay in control of their projects.","","0-7695-0403-5","10.1109/METRIC.1999.809730","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809730","","Predictive models;Particle measurements;Phase measurement;Statistical analysis;Phase estimation;Software performance;Project management;Control engineering education;Software engineering;Costs","software cost estimation;software metrics;software development management;planning;project management","effort estimation improvement;software engineering project execution;information availability;requirements phase;requirements specification;project replanning;software metrics;model building;model evaluation;effort prediction model;initial estimate;reestimation approach;project managers;project control;proxy-based estimation;empirical study;experience base;data collection;education;software measurements","","6","","14","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Metrics for controlling effort during adaptive maintenance of object oriented systems","F. Fioravanti; P. Nesi; F. Stortoni","Dept. of Syst. & Inf., Florence Univ., Italy; NA; NA","Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). 'Software Maintenance for Business Change' (Cat. No.99CB36360)","6 Aug 2002","1999","","","483","492","Object oriented modeling has been largely adopted in industry in the last few years. Several systems built 4 or 5 years ago may need an adaptive maintenance process in order to better satisfy market and customer needs. A model for effort estimation/prediction of the adaptive maintenance is presented. A selection of metrics for effort estimation has been applied to the general model for evaluating maintenance effort. The metrics presented have been validated against real data. The validation presented has shown that some metrics that can be profitably employed for effort estimation/prediction can be also used with success for the estimation/prediction of the maintenance effort. Moreover the results obtained give some guidelines for maintenance of control of relevant factors for adaptive maintenance.","1063-6773","0-7695-0016-1","10.1109/ICSM.1999.792646","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=792646","","Control systems;Programmable control;Adaptive control;Costs;Object oriented modeling;Adaptive systems;Informatics;Guidelines;Vehicle dynamics;Vehicles","object-oriented programming;software metrics;software maintenance;software cost estimation","software metrics;effort control;object oriented systems;object oriented modeling;adaptive maintenance process;customer needs;effort estimation/prediction;effort estimation;maintenance effort","","6","","27","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Metrics for agent-based software development","B. H. Far; T. Wanyama","Dept. of Electr. & Comput. Eng., Calgary Univ., Alta., Canada; Dept. of Electr. & Comput. Eng., Calgary Univ., Alta., Canada","CCECE 2003 - Canadian Conference on Electrical and Computer Engineering. Toward a Caring and Humane Technology (Cat. No.03CH37436)","4 Sep 2003","2003","2","","1297","1300 vol.2","In software engineering community an increasing effort has been put into design and development of multiagent systems (MAS). However, agent system development is currently dominated by informal guidelines, heuristics and inspirations rather than formal principles and well defined engineering techniques. In this paper we define a set of objective and subjective metrics to measure the complexity of MAS. The subjective metrics is a modified version of function point (FP) including the algorithmic complexity and knowledge complexity factor. The objective metrics is a measure for nearly-decomposability, measured by the communicative cohesion. Such metrics can be used to select the best architecture for the MAS. A methodology for agent-based software development based on such metrics is proposed.","0840-7789","0-7803-7781-8","10.1109/CCECE.2003.1226137","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1226137","","Programming;Object oriented modeling;Ontologies;Computer architecture;Multiagent systems;Guidelines;Drives;Software engineering;Software metrics;Software agents","software metrics;multi-agent systems;software cost estimation;software agents","software development;software engineering community;multiagent systems;MAS;function point;algorithmic complexity;knowledge complexity factor;software metrics","","9","","6","","4 Sep 2003","","","IEEE","IEEE Conferences"
"Estimating effort by use case points: method, tool and case study","S. Kusumoto; F. Matukawa; K. Inoue; S. Hanabusa; Y. Maegawa","Graduate Sch. of Inf. Sci. & Technol., Osaka Univ., Japan; Graduate Sch. of Inf. Sci. & Technol., Osaka Univ., Japan; Graduate Sch. of Inf. Sci. & Technol., Osaka Univ., Japan; NA; NA","10th International Symposium on Software Metrics, 2004. Proceedings.","22 Nov 2004","2004","","","292","299","Use case point (UCP) method has been proposed to estimate software development effort in early phase of software project and used in a lot of software organizations. Intuitively, UCP is measured by counting the number of actors and transactions included in use case models. Several tools to support calculating UCP have been developed. However, they only extract actors and use cases and the complexity classification of them are conducted manually. We have been introducing UCP method to software projects in Hitachi Systems & Services, Ltd. To effective introduction of UCP method, we have developed an automatic use case measurement tool, called U-EST. This paper describes the idea to automatically classify the complexity of actors and use cases from use case model. We have also applied the U-EST to actual use case models and examined the difference between the value by the tool and one by the specialist. As the results, UCPs measured by the U-EST are similar to ones by the specialist.","1530-1435","0-7695-2129-0","10.1109/METRIC.2004.1357913","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357913","","Computer aided software engineering;Programming;Phase estimation;Size measurement;Software measurement;Information science;Production systems;Project management;Software development management;Computer languages","software cost estimation;software development management;software metrics;software quality;project management;formal specification","use case point method;software development estimation;software organization;software projects;automatic use case measurement tool","","25","","18","","22 Nov 2004","","","IEEE","IEEE Conferences"
"Simulation and comparison of Albrecht's function point and DeMarco's function bang metrics in a CASE environment","R. Rask; P. Laamanen; K. Lyyttinen","Dept. of Comput. Sci., Joensuu Univ., Finland; Dept. of Comput. Sci., Joensuu Univ., Finland; NA","IEEE Transactions on Software Engineering","6 Aug 2002","1993","19","7","661","671","Software size estimates provide a basis for software cost estimation during software development. Hence, it is important to measure the system size reliably as early as possible. Two of the best known specification level metrics, Albrecht's function points (A.J. Albrecht, 1979) and DeMarco's function bang metrics (T. DeMarco, 1982) are compared by a simulation study in which automatically generated randomized dataflow diagrams (DFDs) were used as a statistical sample to automatically count function points and function bang in a built CASE environment. These value counts were correlated statistically using correlation coefficients and regression analysis. The simulation study permits sufficient variation in the base material to cover most types of system specifications. Moreover, it allows sufficient sampling sizes to make statistical analysis of data. The obtained results show that in certain cases there is a relatively good statistical correlation between these metrics.<>","1939-3520","","10.1109/32.238567","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=238567","","Computer aided software engineering;Cost function;Computer science;Programming;Size measurement;Regression analysis;Sampling methods;Statistical analysis;Software metrics;Software measurement","software cost estimation;software metrics;software tools","software size estimates;software cost estimation;software development;specification level metrics;function points;function bang metrics;simulation study;automatically generated randomized dataflow diagrams;DFDs;statistical sample;built CASE environment;system specifications;statistical correlation","","14","","26","","6 Aug 2002","","","IEEE","IEEE Journals"
"Factors that influence software project cost and schedule estimation","S. M. A. Suliman; G. Kadoda","Faculty of Mathematical Sciences, University of Khartoum, Khartoum, Sudan; Independent Researcher, Khartoum, Sudan","2017 Sudan Conference on Computer Science and Information Technology (SCCSIT)","15 Feb 2018","2017","","","1","9","Software Project Management is a core topic in software engineering courses because it teaches how software projects planned, implemented, controlled, monitored, and evaluated. The development of theories in software metrics and prediction models builds on the broader project management field but also attempt to overcome the difficulties inherent in measuring an intangible object like software. This paper is situated within research into the factors that influence cost and time estimation for software projects that continue to challenge software development organizations. The study described in this paper explored technical and non-technical factors seen by Sudanese software practitioners as critical in estimation, and if not managed, can result in cost and time overrun or in some cases lead to project failure. Using a mixed-method approach, the research project was first informed through a qualitative study that explored the kinds of problems that face the estimation process from the perspectives of different staff levels. This part of the study revealed a number of factors that can be broadly categorized as technical factors, e.g. the skills of those involved in the estimation process, and non-technical factors such as the high level of uncertainty in the local business environment. The second part of the study focused on one of the leading factors, software project staff training and experience, using the survey method to examine how well the software engineering curriculum is aligned with skills required in the software market, especially those related to estimation. The recommendations this study produced on reducing estimation errors, whether geared towards companies or academia, are preliminary and may only reflect the local setting. However, they also drew upon the vast literature on cost estimation techniques and case studies in similar and more advanced settings. The problem of software effort prediction and estimation models has been a thorny issue in the software engineering field since the concept of “software crisis” and the field itself, as a response to the crisis, emerged in the late 1960s. It still seems to some that “After forty years of currency the phrase `software engineering' still denotes no more than a vague and largely unfulfilled aspiration” [2]. This study develops our understanding of problems facing one of the young professions in the country, as well as contributes to the global body of research on developing techniques to manage the intricacy of software engineering compared to more established engineering disciplines.","","978-1-5386-0667-4","10.1109/SCCSIT.2017.8293053","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8293053","Software Project Management;Software Effort Prediction;Software Project Failure;Software Project Cost Estimation techniques","Software;Estimation;Software engineering;Companies;Project management;Tools;Schedules","computer science education;educational courses;mixture models;on-the-job training;personnel;project management;software cost estimation;software management;software metrics","software project management;software project cost estimation;software project schedule estimation;software engineering courses;software metrics;nontechnical factors;technical factors;Sudanese software practitioners;mixed-method approach;software project staff training;software project staff experience;software engineering curriculum;software market;software effort prediction;software effort estimation;software engineering field","","","","17","","15 Feb 2018","","","IEEE","IEEE Conferences"
"Re-planning for a successful project schedule","A. Rainer; M. Shepperd","Empirical Software Eng. Res. Group, Bournemouth Univ., Poole, UK; NA","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","72","81","Time-to-market or project duration has increasing significance for commercial software development. We report on a longitudinal study of a project at IBM Hursley Park. The focus of this study was schedule behaviour; however, we explored a range of related factors, including planned versus actual progress, resource allocation and functionality delivered. In the course of the 12-month study, evidence was collected from eight interviews, 49 project meetings, a number of project documents and a feedback workshop. The project leader considered the project to be a success, not only in terms of satisfying resource and schedule objectives, but also in the marketplace. Whilst many of the originally planned external commitments were met, it is clear that the project did not adhere to its original (detailed) plan and indeed there were no less than seven re-plans. These re-plans were mainly in response to mis-estimates in the original plan, rather than in response to the introduction of additional requirements (of which there were several) or problems with external dependencies. Furthermore, these re-plans suggest a distinction between the nature of the initial planning process and the nature of the re-planning process during the project. Attention is also directed at the implications these re-plans have for software metrics and cost estimation research.","","0-7695-0403-5","10.1109/METRIC.1999.809728","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809728","","Scheduling;Programming;Process planning;Project management;Software engineering;Time to market;Resource management;Feedback;Process design;Personnel","software development management;software metrics;software cost estimation;project management;scheduling;planning;resource allocation","successful project schedule replanning;time-to-market;project duration;commercial software development;longitudinal study;IBM;schedule behaviour;planned progress;actual progress;resource allocation;delivered functionality;interviews;project meetings;project documents;feedback workshop;marketplace;external commitments;misestimates;additional requirements;external dependencies;initial planning process;software metrics;software cost estimation research;case study","","3","","","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Stepping towards dynamic measurement for object oriented software","A. Jain; A. Chug","University School of Information and Communication Technology, Guru Gobind Singh Indraprastha University, Dwarka, New Delhi, India; University School of Information and Communication Technology, Guru Gobind Singh Indraprastha University, Dwarka, New Delhi, India","2016 1st India International Conference on Information Processing (IICIP)","13 Jul 2017","2016","","","1","6","Software metrics are very helpful in measuring the different aspects of software like cohesion, coupling, polymorphism, inheritance etc. The objective of measuring software metrics are quality assurance, defect prediction, maintainability prediction, cost estimation, debugging, etc. Many authors proposed the use of static metrics for the software maintainability prediction (SMP) and were successful, but static metrics don't take into account the run-time behavior of software. Hence, to capture this dynamic behavior, dynamic metrics are necessary to be evaluated. This paper presents the empirical investigation of dynamic metrics for SMP and also compares them with static metrics. Six machine learning algorithms are used to build the prediction models for both the static and dynamic metrics. The performance of all models is compared using prevalent accuracy measures. Results show that dynamic metrics perform better than static metrics, and can be used as a sound alternative for SMP.","","978-1-4673-6984-8","10.1109/IICIP.2016.7975323","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7975323","software metrics;software maintenance;software maintainability;machine learning algorithms;prediction","Software;Software metrics;Couplings;Object oriented modeling;Predictive models","learning (artificial intelligence);object-oriented programming;program debugging;quality assurance;software cost estimation;software maintenance;software metrics;software quality","dynamic measurement;object oriented software;software metrics;quality assurance;defect prediction;cost estimation;software debugging;static metrics;software maintainability prediction;SMP;run-time software behavior;dynamic behavior;dynamic metrics;machine learning algorithms;accuracy measures","","","","22","","13 Jul 2017","","","IEEE","IEEE Conferences"
"Measuring functionality and productivity in Web-based applications: a case study","M. Morisio; I. Stamelos; V. Spahos; D. Romano","Maryland Univ., College Park, MD, USA; NA; NA; NA","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","111","118","We explore the variation of the cost of writing code when object oriented framework based development of Web applications is encountered for the first time. Managers need such information to justify their investments in innovative development strategies. Size measurements are essential in this task and a number of metrics, namely: lines of code, classical function points, and object oriented function points, are employed. It is argued that lines of code and object oriented function points are more suitable in this case. Data analysis reveals that learning influences mainly the cost of writing new code, consisting of continuous calls to components provided by the framework. We also explore the applicability of an already proposed effort prediction model that is based on different reuse types. A cost estimation model is the by-product of this study, providing a helpful tool for managing the first projects in which the framework is employed.","","0-7695-0403-5","10.1109/METRIC.1999.809732","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809732","","Productivity;Costs;Writing;Object oriented modeling;Information management;Innovation management;Investments;Size measurement;Data analysis;Predictive models","software cost estimation;object-oriented programming;information resources;distributed programming;software reusability","Web based application functionality;case study;object oriented framework based development;development strategies;size measurements;lines of code;classical function points;object oriented function points;continuous calls;effort prediction model;reuse types;cost estimation model","","12","","10","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Estimating the implementation time for discrete-event simulation model building","L. Chwif; J. Banks; M. R. P. Barretto","Escola de Engenharia Mauá, Praça Mauá 1, São Caetano do Sul, 09580-900, BRAZIL; Tecnológico de Monterrey, 64849, NL, MÉXICO; Universidade de São Paulo, Av. Prof. Mello Moraes 2231, 05508-900, BRAZIL","Proceedings of the 2010 Winter Simulation Conference","6 Jan 2011","2010","","","1774","1785","There are several techniques for estimating cost and time for software development. These are known in software engineering as “software metrics.” LOC (lines of code), COCOMO (COnstructive COst Model), and FPA (Function Point Analysis) are examples of such techniques. Although Discrete Event Simulation Modeling (DESM) has some differences from classical software development, it is possible to draw a parallel between these techniques and DESM. This article reviews some of the metrics from software engineering, and, based on those, proposes a metric for estimating time for the implementation of a simulation model using one specific simulation software. The results obtained for 22 real simulation projects showed that the proposed technique can estimate the time for software development with acceptable accuracy (average error of 6% and maximum absolute error of 38%) for models that have less that 200 simulation objects.","1558-4305","978-1-4244-9865-9","10.1109/WSC.2010.5678891","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5678891","","Software;Programming;Complexity theory;Software metrics;Productivity;Lifting equipment","discrete event simulation;software cost estimation;software metrics","discrete-event simulation model building;cost estimation;software development;software engineering;software metrics;lines of code;constructive cost model;function point analysis","","1","","15","","6 Jan 2011","","","IEEE","IEEE Conferences"
"Cost Estimation Using Extended Use Case Point (e-UCP) Model","K. Periyasamy; A. Ghode","Dept. of Comput. Sci., Univ. of Wisconsin-La Crosse, La Crosse, WI, USA; Dept. of Comput. Sci., Univ. of Wisconsin-La Crosse, La Crosse, WI, USA","2009 International Conference on Computational Intelligence and Software Engineering","28 Dec 2009","2009","","","1","5","Estimating the cost of development is one of the most crucial and daunting tasks for a software project manager. A lot of cost estimation models were reported in the literature but many of these models became obsolete because of the rapid changes in technology. Earlier cost estimation models used the size of the ultimate software product as the primary factor which, in many cases, was difficult to estimate. For example, COCOMO model used the number of Delivered Source Instructions (DSI) which is hard to estimate for products developed using modern programming languages. On the other hand, models such as Function Point (FP) metrics were designed to consider functional requirements instead of lines of code. These models were applicable only to procedural paradigm, and are not directly applicable to software products developed using the object-oriented methodology. It is this idea that gave birth to the creation of Use Case Point (UCP) metrics, originally developed by Gustav Karner[1993]. UCP uses use cases as the primary factor; use case model is the first model developed in an object-oriented design process using UML. In this paper, the authors extended the original UCP model with additional information obtained from use case narratives.","","978-1-4244-4507-3","10.1109/CISE.2009.5364515","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5364515","","Costs;Object oriented modeling;Unified modeling language;Application software;Computer science;Project management;Software development management;Computer languages;Process design;Software design","object-oriented methods;software cost estimation;software metrics;Unified Modeling Language","software cost estimation;extended use case point model;cost estimation model;delivered source instructions;function point metrics;object-oriented design process;Unified Modeling Language","","14","","14","","28 Dec 2009","","","IEEE","IEEE Conferences"
"Early phase software effort estimation model","P. Agrawal; S. Kumar","CSE Department, Sushila Devi Bansal College of Technology, Indore(M.P.), India; CSE Department, Sushila Devi Bansal College of Technology, Indore(M.P.), India","2016 Symposium on Colossal Data Analysis and Networking (CDAN)","19 Sep 2016","2016","","","1","8","Software cost estimation is the measurement of the effort and resource required to develop a software system for a particular defined time period. From the last few years, many software cost estimation models have been proposed for the estimation of effort and development time. The cost of the software can be estimated easily in the mid of project development. But with further study, we found that the cost must be estimated before the start of the project, to satisfy customer as well as developer's needs. In earlier proposed cost estimation models, cost estimation is done with more than 20 parameters at the early conceptual phase and if input is not defined using logical approach, then the results of estimation are unpredictable. This paper presents simple approach for estimating software development effort with a minimum set of parameters yet sufficient, that can be easily identified at an early stage while considering all possible aspects. We also introduced a weight factor in the estimation of effort for improving the accuracy of the estimation and the proposed weight factor is calculated by expert learning system. Further, we developed a web based tool for the estimation of cost based on our proposed approach. Finally, we compare our result with previous works on early estimation and conclude with the points of accuracy that we observe while comparing the results with existing approaches.","","978-1-5090-0669-4","10.1109/CDAN.2016.7570914","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7570914","Project Estimation;Effort Estimation;Cost Models;KSLOC;SDLC;Early Phase Cost Estimation","Estimation;Software;Learning systems;Databases;Solid modeling;Analytical models;Data models","Internet;learning (artificial intelligence);software cost estimation;software metrics","software effort estimation model;software cost estimation;software system development;project development;expert learning system;weight factor;early phase cost estimation;Web-based tool","","1","","17","","19 Sep 2016","","","IEEE","IEEE Conferences"
"Human performance estimating with analogy and regression models: an empirical validation","E. Stensrud; I. Myrtveit","Andersen Consulting, Northbrook, IL, USA; NA","Proceedings Fifth International Software Metrics Symposium. Metrics (Cat. No.98TB100262)","6 Aug 2002","1998","","","205","213","Most cost estimation models seem to be validated without testing human performance and using data sets from custom software projects where the software typically is sized in lines of code (SLOC) or function points. From a practitioner's point of view this research seems not to address some important aspects of IT projects that we observe: estimating in an industrial environment is performed by people, not models; COTS projects are increasing their market share replacing traditional custom software projects; and industrial projects use a large variety of metrics to size the project deliverables and estimate the costs. Estimation by analogy tools like ANGEL and multiple regression analysis provide the necessary flexibility in terms of choice of input parameters. We describe an experiment to evaluate human performance where the subjects were aided by analogy and regression tools respectively. 68 partners and managers in Andersen Consulting estimated 48 different COTS projects. The results in terms of MMRE indicate that users benefit from both tools, however more from regression models than from analogy models as ANGEL. Furthermore, the performance of the ANGEL tool itself is not superior to the performance of the regression model. This result is contradictory to previous studies that claim that ANGEL outperforms multiple regression.","","0-8186-9201-4","10.1109/METRIC.1998.731247","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=731247","","Humans;Costs;Testing;Electrical capacitance tomography;Read only memory;Electronic switching systems;Reactive power;Ice;Blades;Life estimation","human factors;software cost estimation;statistical analysis;software development management;software metrics","human performance estimation;regression models;cost estimation models;data sets;custom software projects;lines of code;function points;IT projects;COTS projects;industrial projects;software metrics;analogy tools;ANGEL;multiple regression analysis;experiment;Andersen Consulting","","36","","7","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Using public domain metrics to estimate software development effort","R. Jeffery; M. Ruhe; I. Wieczorek","Centre for Adv. Empirical Software Res., New South Wales Univ., Sydney, NSW, Australia; NA; NA","Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","16","27","The authors investigate the accuracy of cost estimates when applying most commonly used modeling techniques to a large-scale industrial data set which is professionally maintained by the International Software Standards Benchmarking Group (ISBSG). The modeling techniques applied are ordinary least squares regression (OLS), analogy based estimation, stepwise ANOVA, CART, and robust regression. The questions addresses in the study are related to important issues. The first is the appropriate selection of a technique in a given context. The second is the assessment of the feasibility of using multi-organizational data compared to the benefits from company-specific data collection. We compare company-specific models with models based on multi-company data. This is done by using the estimates derived for one company that contributed to the ISBSG data set and estimates from using carefully matched data from the rest of the ISBSG data. When using the ISBSG data set to derive estimates for the company, generally poor results were obtained. Robust regression and OLS performed most accurately. When using the company's own data as the basis for estimation, OLS, a CART-variant, and analogy performed best. In contrast to previous studies, the estimation accuracy when using the company's data is significantly higher than when using the rest of the ISBSG data set. Thus, from these results, the company that contributed to the ISBSG data set, would be better off when using its own data for cost estimation.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915512","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915512","","Programming;Costs;Robustness;Computer science;Data engineering;Large-scale systems;Computer industry;Least squares approximation;Analysis of variance;Software standards","software cost estimation;software metrics;least squares approximations;data analysis","public domain metrics;software development effort estimation;software cost estimates;large-scale industrial data set;International Software Standards Benchmarking Group;modeling techniques;ordinary least squares regression;analogy based estimation;stepwise ANOVA;CART;robust regression;multi-organizational data;company-specific data collection;company-specific models;multi-company data;ISBSG data set;CART-variant;estimation accuracy;cost estimation","","32","","31","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Evaluating a functional size measurement method for Web applications: an empirical analysis","S. Abrahao; G. Poels; O. Pastor","Dept. of Inf. Syst. & Comput., Valencia Univ., Spain; NA; NA","10th International Symposium on Software Metrics, 2004. Proceedings.","22 Nov 2004","2004","","","358","369","This paper describes a laboratory experiment which evaluates OO-method function points for the Web. OOmFPWeb measures the functional size of Web applications using conceptual models that are developed with object-oriented Web solutions (OOWS), an automated software production method for Web applications. OOmFPWeb is evaluated on a range of performance-based and perception-based variables, including efficiency, reproducibility, perceived ease of use, perceived usefulness and intention to use. The results show that OOmFPWeb is efficient when compared to current industry practices. Furthermore, the method produces consistent functional size assessments and is perceived to be easy to use and useful by its users.","1530-1435","0-7695-2129-0","10.1109/METRIC.2004.1357921","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357921","","Size measurement;Object oriented modeling;Application software;Laboratories;Software measurement;Production;Project management;Information analysis;Information systems;Performance evaluation","software cost estimation;software metrics;object-oriented methods;program verification;software development management","functional size measurement;Web applications;conceptual modeling;software validation;method evaluation;empirical software engineering;OO-method function points;object-oriented Web solutions","","6","","40","","22 Nov 2004","","","IEEE","IEEE Conferences"
"On the sensitivity of COCOMO II software cost estimation model","P. Musilek; W. Pedrycz; Nan Sun; G. Succi","Dept. of Electr. & Comput. Eng., Alberta Univ., Edmonton, Alta., Canada; Dept. of Electr. & Comput. Eng., Alberta Univ., Edmonton, Alta., Canada; Dept. of Electr. & Comput. Eng., Alberta Univ., Edmonton, Alta., Canada; NA","Proceedings Eighth IEEE Symposium on Software Metrics","7 Aug 2002","2002","","","13","20","Software cost estimation techniques predict the amount of effort required to develop a software system. Cost estimates are needed throughout the software lifecycle to determine feasibility of software projects and to provide for appropriate allocation or reallocation of available resources. To assess the effect of imprecise evaluations, a comprehensive sensitivity analysis was performed on a major cost estimation model, COCOMO II. Results of this analysis are described and explicated in this paper. To reduce risk of drawing biased conclusions, three different methods for sensitivity analysis were employed: the mathematical analysis of the estimating equation, Monte Carlo simulation, and error propagation. The results of the first two methods are very consistent and confirm expected highest sensitivity of the model to the imprecision of the size estimate. Error propagation allows determination of the combined impact of imprecision in multiple inputs and it is therefore most valuable from the practical point of view. The results obtained by this technique also indicate very strong sensitivity to the imprecision in size estimates. A possible way to cope with imprecise information in software cost estimation is also indicated.","1530-1435","0-7695-1339-5","10.1109/METRIC.2002.1011321","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1011321","","Costs;Electrical capacitance tomography;Sensitivity analysis;Software systems;Resource management;Uncertainty;Performance evaluation;Programming;Sun;Computer science","software cost estimation;software development management;sensitivity analysis;error analysis","software cost estimation;uncertainty;sensitivity analysis;COCOMO II;error propagation;software development","","14","","19","","7 Aug 2002","","","IEEE","IEEE Conferences"
"A cost estimation model for OEM based military software support","Yuling Zhu; Y. Zheng","Systems Engineering Institute of Engineer Equipments, General Department of Armaments, Beijing, China; Institute of Software, Chinese Academy of Sciences, Beijing, China","The 2nd International Conference on Information Science and Engineering","17 Jan 2011","2010","","","4232","4234","Military software supportability increasingly becomes a key factor of equipment system supportability, and the proportion of software support cost in the system is rising significantly. Based on the analysis of the processes of supportability design and implementation, the paper proposes several effective methods for estimating software costs in the different stages and aspects, and constructs a general-purpose cost estimation model for military software support. Case studies on real-world projects demonstrate the feasibility and rationality of the model.","2160-1291","978-1-4244-7618-3","10.1109/ICISE.2010.5690862","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5690862","military software supportability;cost estimation;software metrics","Software;Estimation;Modeling;Software engineering;Presses;Military equipment;Economics","","","","","","","","17 Jan 2011","","","IEEE","IEEE Conferences"
"Estimating Procedure for Function Point Analysis in Korea","B. Kang; J. Lee","Dept. of Computer & Information Engineering, Daegu University, Daegu city, Republic of Korea; Dept. of Computer Engineering, Woosuk University, Jincheon eup, Repubic of Korea","2018 19th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)","23 Aug 2018","2018","","","230","233","This paper introduces the practical guidelines for function point analysis in the Republic of Korea. Function Point Analysis is adopted as a standard method for measuring the functional size of software by Korean government. It was proposed by an international organization. We will present the procedure of counting Function Point during the software implementation phase. The functional size and development cost of software can be estimated from the number of Function Point.","","978-1-5386-5889-5","10.1109/SNPD.2018.8441088","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8441088","Software Size;Development Cost Estimation;Function Point Analysis;korean Guidelines for FP","Complexity theory;Software;Mathematical model;Functional point analysis;Guidelines;Computer languages;Software measurement","software cost estimation;software metrics","function point analysis;Republic of Korea;Korean government;software implementation phase","","","","6","","23 Aug 2018","","","IEEE","IEEE Conferences"
"Investigating metrics for a development effort prediction model of Web applications","E. Mendes","Comput. Sci. Dept., Auckland Univ., New Zealand","Proceedings 2000 Australian Software Engineering Conference","6 Aug 2002","2000","","","31","41","Although there are metrics proposed in the hypermedia literature to measure hypermedia processes and products, many lack the necessary theoretical and empirical validation. To address these issues, this paper presents the results of a quantitative case study which validated empirically a set of metrics proposed to measure the development effort involved in authoring World Wide Web applications. These metrics adhere to the representational theory of measurement. The results obtained for the case study have shown that three out of four of the proposed metrics presented statistically significant correlations with development effort, suggesting that they may be useful parameters for a prediction model that estimates the effort involved in developing Web applications.","","0-7695-0631-3","10.1109/ASWEC.2000.844556","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=844556","","Predictive models","information resources;software metrics;software cost estimation;hypermedia;authoring systems","software metrics;software development effort prediction model;World Wide Web applications;hypermedia processes;hypermedia products;quantitative case study;authoring;development effort;representational measurement theory;statistically significant correlations","","3","","23","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Ensemble imputation methods for missing software engineering data","B. Twala; M. Cartwright","Brunei Univ., Manchester, UK; Brunei Univ., Manchester, UK","11th IEEE International Software Metrics Symposium (METRICS'05)","24 Oct 2005","2005","","","10 pp.","30","One primary concern of software engineering is prediction accuracy. We use datasets to build and validate prediction systems of software development effort, for example. However it is not uncommon for datasets to contain missing values. When using machine learning techniques to build such prediction systems, handling of incomplete data is an important issue for classifier learning since missing values in either training or test set or in both sets can affect prediction accuracy. Many works in machine learning and statistics have shown that combining (ensemble) individual classifiers is an effective technique for improving accuracy of classification. The ensemble strategy is investigated in the context of incomplete data and software prediction. An ensemble Bayesian multiple imputation and nearest neighbour single imputation method, BAMINNSI, is proposed that constructs ensembles based on two imputation methods. Strong results on two benchmark industrial datasets using decision trees support the method","1530-1435","0-7695-2371-4","10.1109/METRICS.2005.21","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1509308","Machine learning;decision trees;incomplete data;imputation;ensemble;software prediction","Software engineering;Accuracy;Machine learning;Software quality;Bayesian methods;Decision trees;Statistics;Industrial training;Robustness;Programming","Bayes methods;decision trees;learning (artificial intelligence);software cost estimation;software metrics","ensemble imputation methods;software engineering;prediction systems;software development;machine learning;data handling;classifier learning;software prediction;ensemble Bayesian multiple imputation method;nearest neighbour single imputation method;decision trees","","5","","29","","24 Oct 2005","","","IEEE","IEEE Conferences"
"PCA based cost estimation model for agile software development projects","S. Garg; D. Gupta","Department of Computer Engineering, Delhi Technological University (DTU), India; Department of Computer Engineering, Delhi Technological University (DTU), India","2015 International Conference on Industrial Engineering and Operations Management (IEOM)","31 Aug 2015","2015","","","1","7","Agile software development has been attached much importance as a new software engineering methodology as it emphasizes on good communication between the developers, the rapid delivery of software, and change on demand. The metrics and methods from conventional lifecycle models cannot predict accurately for agile projects. We have proposed a new cost estimation model for agile software development projects. In this model we apply Principal Component Analysis to reduce the dimensions of the attributes required and identify the key attributes which have maximum correlation to the development cost; and then use constraint solving approach to satisfy the criteria imposed by agile manifesto. The proposed methodology is found to bet suitable for agile projects as it uses constraint programming to explicitly check for satisfaction of agile manifestos. On comparison with other approaches under research we find that our model provides a low MMRE value i.e.50.63. Our methodology can also be used in case of unavailability of historical data or expert opinion. Hence we can safely say that the proposed cost estimation approach increases the precision and accuracy of estimates; and hence is better suited for the Agile Software Development Projects.","","978-1-4799-6065-1","10.1109/IEOM.2015.7228109","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7228109","agile development;software cost estimation;factor analysis principal components analysis","Complexity theory;ISO Standards;MATLAB","constraint handling;principal component analysis;project management;software cost estimation;software development management;software metrics;software prototyping","PCA based cost estimation model;agile manifestos;expert opinion;MMRE value;constraint programming;constraint solving approach;principal component analysis;lifecycle models;software engineering methodology;agile software development projects","","4","","18","","31 Aug 2015","","","IEEE","IEEE Conferences"
"Influence of team size and defect detection technique on inspection effectiveness","S. Biffl; W. Gutjahr","Inst. for Software Technol., Vienna Univ. of Technol., Austria; NA","Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","63","75","Inspection team size and the set of defect detection techniques used by the team are major characteristics of the inspection design, which influences inspection effectiveness, benefit and cost. The authors focus on the inspection performance of a nominal, that is non-communicating team, similar to the situation of an inspection team after independent individual preparation. We propose a statistical model based on empirical data to calculate the expected values for the inspection effectiveness and effort of synthetic nominal teams. Further, we introduce an economic model to compute the inspection benefits, net gain, and return on investment. With these models we determine (a) the best mix of reading techniques (RTs) to maximize the average inspection performance for a given team size, (b) the optimal team size and RT mix for a given inspection time budget, and (c) the benefit of an additional inspector for a given team size. Main results of the investigation with data from a controlled experiment are: (a) benefits of an additional inspector for a given RT diminished quickly with growing team size, thus, above a given team size a mix of different RTs is more effective and has a higher net gain than using only one RT; (b) the cost-benefit model limits team size, since the diminishing gain of an additional inspector at some point is more than offset by his additional cost.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915516","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915516","","Inspection;Statistics;Decision support systems;Investments;Costs;Financial management;Quality management;Project management;Feedback;Programming","software cost estimation;inspection;software metrics;economics","defect detection technique;inspection effectiveness;inspection team size;defect detection techniques;inspection design;inspection performance;non-communicating team;inspection team;statistical model;empirical data;synthetic nominal teams;economic model;inspection benefits;net gain;return on investment;reading techniques;average inspection performance;optimal team size;RT mix;inspection time budget;cost-benefit model","","3","","22","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Early Phase Cost Models for Agile Software Processes in the US DoD","W. Rosa; R. Madachy; B. Clark; B. Boehm","IT Estimating Div., Naval Center for Cost Anal., Washington, DC, USA; Dept. of Syst. Eng., Naval Postgrad. Sch., Monterey, CA, USA; Software Metrics, Inc., Haymarket, VA, USA; USC Center for Syst. & Software Eng., Univ. of Southern California, Los Angeles, CA, USA","2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)","11 Dec 2017","2017","","","30","37","Background: Software effort estimates are necessary and critical at an early phase for decision makers to establish initial budgets, and in a government context to select the most competitive bidder for a contract. The challenge is that estimated software requirements is the only size information available at this stage, compounded with the newly increasing adoption of agile processes in the US DoD. Aims: The objectives are to improve cost estimation by investigating available sizing measures, and providing practical effort estimation models for agile software development projects during the contract bidding phase or earlier. Method: The analysis explores the effects of independent variables for product size, peak staff, and domain on effort. The empirical data for model calibration is from 20 industrial projects completed recently for the US DoD, among a larger dataset of recent projects using other lifecycle processes. Results: Statistical results showed that initial software requirements is a valid size metric for estimating agile software development effort. Prediction accuracy improves when peak staff and domain are added as inputs to the cost models. Conclusion: These models may be used for estimates of agile projects, and evaluating software development contract cost proposals with inputs available during the bidding phase or earlier.","","978-1-5090-4039-1","10.1109/ESEM.2017.10","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8170082","agile software processes;software cost estimation;software effort;software size;software requirements;requirements volatility;peak staff;domain;productivity;interfaces","Software;US Department of Defense;Estimation;Complexity theory;Contracts;Size measurement","contracts;costing;military computing;project management;software cost estimation;software engineering","early phase cost models;software effort estimates;sizing measures;software development contract cost proposals;agile software development effort;peak staff;product size;agile software development projects;cost estimation;agile processes;estimated software requirements;competitive bidder;government context;decision makers;US DoD;agile software processes","","","","38","","11 Dec 2017","","","IEEE","IEEE Conferences"
"Estimating the size of Web applications by using a simplified function point method","E. J. D. Candido; R. Sanches","Inst. de Ciencias Matematica e de Computacao, Sao Paulo Univ., Brazil; Inst. de Ciencias Matematica e de Computacao, Sao Paulo Univ., Brazil","WebMedia and LA-Web, 2004. Proceedings","6 Dec 2004","2004","","","98","105","Software size estimation is a key factor to determine the amount of time and effort needed to develop software systems, and the Web applications are no exception. In this paper a simplified way of the IFPUG (International Function Point Users Group) function points based on the simplification ideas suggested by NESMA (Netherlands Software Metrics Association) to estimate size of management information systems is presented. In an empirical study, twenty Web applications were analyzed. The estimates using the simplified method were close to the ones using the IFPUG detailed method. Based on the results, it was possible to establish a simplified method to estimate the size of Web applications according to the development characteristics of the studied company.","","0-7695-2237-8","10.1109/WEBMED.2004.1348154","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1348154","","Application software;Software quality;Management information systems;Software maintenance;Software measurement;Software systems;Software metrics;Quality management;Software development management;Costs","Internet;software metrics;software cost estimation;management information systems","Web application size estimation;simplified function point method;software size estimation;International Function Point Users Group;Netherlands Software Metrics Association;management information systems","","5","","29","","6 Dec 2004","","","IEEE","IEEE Conferences"
"Experimental Study of Quantitative Analysis of Maintenance Effort Using Program Slicing-Based Metrics","R. G. Kula; K. Fushida; N. Yoshida; H. Iida","NAIST, Ikoma, Japan; R&D Headquarters, NTT Data Corp., Tokyo, Japan; NAIST, Ikoma, Japan; NAIST, Ikoma, Japan","2012 19th Asia-Pacific Software Engineering Conference","18 Feb 2013","2012","2","","50","57","During the software development lifecycle, studies have shown that over 75% of project costs originate from the maintenance phase. Analysis of the processes within the maintenance phase could prove beneficial since most maintenance activities revolve around source code. Accurate estimations of the maintenance effort spent on code changes would enable cost effective management of resources. In this research, we investigate a quantitative approach to express maintenance effort, for which a set of program-sliced metrics is proposed. Using the time to resolve an issue as a measure of maintenance effort, we evaluated our proposed metrics against the basic code-based metrics Lines of Code and McCabe's Cyclomatic Complexity. To eliminate outside factors, we performed an experimental case study on a set of pre-defined maintenance activities. Results suggest that program slicing metrics have the strongest correlation with maintenance effort, exhibiting a moderate degree of correlation with maintenance effort. In contrast, Lines of Code has a weak correlation with maintenance effort. This study contributes to our ongoing research into the analysis of maintenance processes.","1530-1362","978-1-4673-4930-7","10.1109/APSEC.2012.105","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6462781","Micro Process;Software Metrics;Program Slicing;Software Maintenance","Maintenance engineering;Software;Complexity theory;Correlation;Size measurement;Layout","program diagnostics;project management;software cost estimation;software maintenance;software management;software metrics","quantitative analysis;maintenance effort;program slicing-based metrics;software development lifecycle;project cost;maintenance phase;source code;cost effective management;code-based metrics;lines of code;cyclomatic complexity;maintenance process;software metrics","","2","","33","","18 Feb 2013","","","IEEE","IEEE Conferences"
"MONSET-a prototype software development estimating tool","B. Srinivasan; G. Martin","Dept. of Comput. Technol., Monash Univ., Clayton, Vic., Australia; Dept. of Comput. Technol., Monash Univ., Clayton, Vic., Australia","Proceedings of 3rd Symposium on Assessments of Quality Software Development Tools","6 Aug 2002","1994","","","70","82","The development of large-scale computer software has traditionally been a difficult cost estimation problem. Software has been developed for more than thirty years and it is reasonable to expect that the experience gained in this time, would make software development effort predictions more reliable. One way by which an organisation can benefit from past projects is to measure, track and control each project and use the collected results to assist future project estimation. This paper describes a hybrid model for software effort prediction and its validation against available data on some large software projects. A prototype software development estimation system (MONSET-Monash Software Estimating Tool) based on the proposed model is described. The system aims to provide guidance for project managers during the software development process.<>","","0-8186-5660-3","10.1109/AQSDT.1994.315761","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=315761","","Software prototyping;Programming;Costs;Predictive models;Software metrics;Software measurement;Software development management;Lab-on-a-chip;Large-scale systems;Software tools","software metrics;software cost estimation;software tools","prototype software development estimating tool;MONSET;large-scale computer software;cost estimation problem;project estimation;hybrid model;software effort prediction;large software projects;prototype software development estimation system;Monash Software Estimating Tool;project managers","","1","","17","","6 Aug 2002","","","IEEE","IEEE Conferences"
"A fuzzy logic based set of measures for software project similarity: validation and possible improvements","A. Idri; A. Abran","Software Eng. Manage. Res. Lab., UQAM, Montreal, Que., Canada; NA","Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","85","96","The software project similarity attribute has not yet been the subject of in-depth study, even though it is often used when estimating software development effort by analogy. Among the inadequacies identified (M. Shepperd et al., 1996; 1997) in most of the proposed measures for the similarity attribute, the most critical is that they are used only when the software projects are described by numerical variables (interval, ratio or absolute scale). However, in practice, many factors which describe software projects, such as the experience of programmers and the complexity of modules, are measured in terms of an ordinal (or nominal) scale composed of qualifications such as 'low' and 'high'. To overcome this limitation, we propose a set of new measures based on fuzzy logic for similarity when the software projects are described by categorical data. The proposed measures are validated by means of an axiomatic validation approach. We also present the results of an empirical validation of our similarity measures, based on the COCOMO'81 database.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915518","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915518","","Fuzzy logic;Software measurement;Qualifications;Programming profession;Databases;Software engineering;Engineering management;Laboratories;Computer science;Software metrics","project management;software metrics;fuzzy logic;software cost estimation","fuzzy logic based measures;software project similarity attribute;software development effort estimation;similarity attribute;software projects;numerical variables;programmers;fuzzy logic;categorical data;axiomatic validation approach;empirical validation;similarity measures;COCOMO 81 database","","10","","24","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Rough set-based data analysis in goal-oriented software measurement","G. Ruhe","Inst. for Exp. Software Eng., Fraunhofer Gesellschaft, Kaiserslautern, Germany","Proceedings of the 3rd International Software Metrics Symposium","6 Aug 2002","1996","","","10","19","The analysis of software engineering data is often concerned with the treatment of incomplete knowledge, the management of inconsistent pieces of information and the manipulation of various data representation levels. Existing techniques of data analysis are mainly based on quite strong assumptions (some knowledge about dependencies, probability distributions, and a large number of experiments), are unable to derive conclusions from incomplete knowledge, or cannot manage inconsistent pieces of information. A rough set is a collection of objects which, in general, cannot be precisely characterized in terms of the values of the set of attributes, while a lower and an upper approximation of the collection can do so. Rough sets have been successfully applied for data analysis in different areas. In this paper, the approach is applied to the analysis of software engineering data resulting from goal-oriented measurement. Fundamental principles and concepts of rough sets are presented. They are illustrated by an example predicting the criticality of software modules based on metrics data from the early development phases. In a further application, analysis of COCOMO (COnstructive COst MOdel) cost drivers is studied.","","0-8186-7365-6","10.1109/METRIC.1996.492439","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=492439","","Data analysis;Software measurement;Software engineering;Knowledge management;Rough sets;Costs;Information analysis;Engineering management;Probability distribution;Application software","software metrics;data analysis;fuzzy set theory;software cost estimation;subroutines","rough sets;data analysis;goal-oriented software measurement;software engineering data;incomplete knowledge;inconsistent information;data representation levels;dependencies;probability distributions;conclusions derivation;attribute set values;approximation;software module criticality prediction;software metrics;early development phases;COCOMO cost drivers;constructive cost model;learning by example;uncertainty management","","6","","29","","6 Aug 2002","","","IEEE","IEEE Conferences"
"A vector-based approach to software size measurement and effort estimation","T. E. Hastings; A. S. M. Sajeev","Sch. of Comput. Sci. & Software Eng., Monash Univ., Caulfield East, Vic., Australia; NA","IEEE Transactions on Software Engineering","7 Aug 2002","2001","27","4","337","350","Software size is a fundamental product measure that can be used for assessment, prediction and improvement purposes. However, existing software size measures, such as function points, do not address the underlying problem complexity of software systems adequately. This can result in disproportional measures of software size for different types of systems. We propose a vector size measure (VSM) that incorporates both functionality and problem complexity in a balanced and orthogonal manner. The VSM is used as the input to a vector prediction model (VPM) which can be used to estimate development effort early in the software life-cycle. We theoretically validate the approach against a formal framework. We also empirically validate the approach with a pilot study. The results indicate that the approach provides a mechanism to measure the size of software systems, classify software systems, and estimate development effort early in the software life-cycle to within /spl plusmn/20% across a range of application types.","1939-3520","","10.1109/32.917523","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=917523","","Size measurement;Software measurement;Software systems;Software quality;Predictive models;Life estimation;Application software;Testing;Software metrics;Programming","software cost estimation;software metrics;size measurement;algebraic specification;computational complexity;vectors","software size measurement;software development effort estimation;vector size measure;vector prediction model;problem complexity;functionality;software life-cycle;formal framework;pilot study;software systems classification;application types;algebraic specification;gradient;magnitude;semantic properties;software metrics;software specification;syntactic properties;validation","","52","","32","","7 Aug 2002","","","IEEE","IEEE Journals"
"Understanding of estimation accuracy in software development projects","S. Grimstad","Simula Res. Lab., Lysaker, Norway","11th IEEE International Software Metrics Symposium (METRICS'05)","24 Oct 2005","2005","","","2 pp.","42","Over the past decades large investments in software engineering research and development have been made by academia and the software industry. These efforts have produced considerably insight in the complex domain of software development, and have paid off in the shape of the improved tools, languages, methodologies and techniques. However, a recent review of estimation survey documents that less progress has been made in the area of estimation performance. This is a major concern for the software industry, as lack of estimation performance often causes budget overruns, delays, lost contracts or poor quality software. Because of these rather dramatic consequences, there is a high demand for more research on the topic of effort estimation in software development projects. That demand motivated this PhD. The thesis is written at the Estimation Group at Simula Research Laboratory in Oslo, Norway. The work is supervised by professor Magne Jorgensen, and is part of the SPIKE (Software Process Improvement based on Knowledge and Experience) project which is funded by the Norwegian Research Council","1530-1435","0-7695-2371-4","10.1109/METRICS.2005.50","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1509320","","Programming;Computer industry;Software performance;Software quality;Delay estimation;Investments;Software engineering;Research and development;Shape;Contracts","software cost estimation;software development management;software metrics;software process improvement;software quality","software estimation;software development projects;software engineering;software industry;software quality;software process improvement","","2","","5","","24 Oct 2005","","","IEEE","IEEE Conferences"
"Estimating the size of changes for evolving object oriented systems: a case study","G. Antoniol; G. Canfora; A. De Lucia","Fac. of Eng., Sannio Univ., Benevento, Italy; NA; NA","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","250","258","Size related measures have traditionally been the basis for effort estimation models to predict costs of software activities along the entire software product life cycle. Object-Oriented (OO) systems are developed and evolve by adding/removing new classes and modifying existing entities. We propose an approach to predict the size of changes of evolving OO systems based on the analysis of the classes impacted by a change request. Our approach can be used both in iterative development processes or during software maintenance. A first empirical evaluation of the proposed approach has been obtained by applying our tools to the post-release evolution of OO software systems available on the net. The systems were analyzed, and models to predict added modified LOCs from added/modified classes were statistically validated. In the paper preliminary results of the above outlined evaluation is presented.","","0-7695-0403-5","10.1109/METRIC.1999.809746","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809746","","Object oriented modeling;Predictive models;Size measurement;Software measurement;Life estimation;Costs;Iterative methods;Software maintenance;Software systems;Lab-on-a-chip","software maintenance;software cost estimation;object-oriented programming","object oriented systems;size related measures;software cost estimation;software product life cycle;software maintenance","","5","","40","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Early & Quick function point: sizing more with less","L. Santillo; M. Conte; R. Meli","Data Process. Organ., Italy; Data Process. Organ., Italy; Data Process. Organ., Italy","11th IEEE International Software Metrics Symposium (METRICS'05)","24 Oct 2005","2005","","","6 pp.","6","The Early & Quick technique was originally proposed in 1997 for IFPUG Function Points, to size software in early stages of the development process, when functional requirements are still to be established in a detailed form and/or when a rapid measure is needed for existing software from a high-level viewpoint, within limited time. Typical lack of measurement details and requirements volatility in early project stages are overcome by the E&Q approach to provide a size estimate as a significant contribution to early project planning needs. Fundamental principles of the technique are classification by analogy, functionality structured aggregation, and multilevel approach, with statistical validation of numerical ranges. Recently, the technique has evolved, to fully comply with any functional size measurement method (ISO/IEC 14143:1998), so to cover new generation methods (e.g., COSMIC Full FP 2.2) and updated releases of existing methods (e.g., IFPUG FP 4.1 and 4.2). This paper describes the current technique release 2.0, application cases, validation results, supporting tools, and further improvement directions","1530-1435","0-7695-2371-4","10.1109/METRICS.2005.33","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1509284","","Productivity;High performance computing;Costs;Software measurement;Educational institutions;Time measurement;Environmental economics;Software libraries;Computer science;Radio access networks","software cost estimation;software development management;software metrics;statistical analysis","Early & Quick function point technique;software size;software development;functional requirements;size estimation;project planning;functionality structured aggregation;statistical validation;size measurement","","6","","11","","24 Oct 2005","","","IEEE","IEEE Conferences"
"A neuro-fuzzy tool for software estimation","X. Huang; D. Ho; J. Ren; L. F. Capretz","Western Ontario Univ., Canada; NA; NA; NA","20th IEEE International Conference on Software Maintenance, 2004. Proceedings.","22 Nov 2004","2004","","","520","","Accurate software estimation such as cost estimation, quality estimation and risk analysis is a major issue in software project management. We present a soft computing framework to tackle this challenging problem. We first use a preprocessing neuro-fuzzy inference system to handle the dependencies among contributing factors and decouple the effects of the contributing factors into individuals. Then we use a neuro-fuzzy bank to calibrate the parameters of contributing factors. In order to extend our framework into fields that lack of an appropriate algorithmic model of their own, we propose a default algorithmic model that can be replaced when a better model is available. Validation using industry project data shows that the framework produces good results when used to predict software cost.","1063-6773","0-7695-2213-0","10.1109/ICSM.2004.1357862","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357862","","Software tools;Software quality;Costs;Risk analysis;Project management;Inference algorithms;Computer industry;Software metrics;Predictive models;USA Councils","software cost estimation;risk analysis;fuzzy reasoning;project management;software development management;software quality;fuzzy neural nets;fuzzy systems","neuro-fuzzy tool;software estimation;cost estimation;quality estimation;risk analysis;software project management;soft computing;preprocessing neuro-fuzzy inference system;neuro-fuzzy bank","","8","","3","","22 Nov 2004","","","IEEE","IEEE Conferences"
"Why we should use function points [software metrics]","S. Furey","American Manage. Syst., USA","IEEE Software","6 Aug 2002","1997","14","2","28","","Function point analysis helps developers and users quantify the size and complexity of software application functions in a way that is useful to software users. Are function points a perfect metric? No. Are they a useful metric? In the author's experience, yes. Function points are technologically independent, consistent, repeatable, and help normalize data, enable comparisons, and set project scope and client expectations. The author addresses these issues from the perspective of a practitioner who uses the International Function Point Users Group's Counting Practices Manual, Release 4.0 rules for counting function points. Of course, other function point standards exist, including Mark II and Albrecht's original rules.","1937-4194","","10.1109/52.582971","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=582971","","Lab-on-a-chip;Application software;Scheduling;Size measurement;Counting circuits;Software development management;Software measurement;Project management;Technology management;Books","software cost estimation;software metrics;software quality;software standards","function point analysis;software application function complexity;software users;useful metric;technologically independent;project scope;client expectations;practitioner;Counting Practices Manual;function point standards;Mark II;Albrecht rules","","17","","2","","6 Aug 2002","","","IEEE","IEEE Magazines"
"Evaluating software reuse alternatives: a model and its application to an industrial case study","A. Tomer; L. Goldin; T. Kuflik; E. Kimchi; S. R. Schach","RAFAEL Ltd., Haifa, Israel; NA; NA; NA; NA","IEEE Transactions on Software Engineering","24 Aug 2004","2004","30","9","601","612","We propose a model that enables software developers to systematically evaluate and compare all possible alternative reuse scenarios. The model supports the clear identification of the basic operations involved and associates a cost component with each basic operation in a focused and precise way. The model is a practical tool that assists developers to weigh and evaluate different reuse scenarios, based on accumulated organizational data, and then to decide which option to select in a given situation. The model is currently being used at six different companies for cost-benefit analysis of alternative reuse scenarios; we give a case study that illustrates how it has been used in practice.","1939-3520","","10.1109/TSE.2004.50","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1324647","Index Terms- Reuse models;cost estimation;maintenance management;software libraries;process metrics;process measurement;planning.","Application software;Computer industry;Computer aided software engineering;Computer Society;Software systems;Cost benefit analysis;Software maintenance;Software libraries;Software measurement;Process planning","software cost estimation;software reusability;software maintenance;software management;software metrics;cost-benefit analysis;software libraries","cost-benefit analysis;software reuse model;software cost estimation;maintenance management;software libraries;process metrics;process measurement;industrial case study","","34","","13","","24 Aug 2004","","","IEEE","IEEE Journals"
"An empirical assessment of function point-like object-oriented metrics","V. Del Bianco; L. Lavazza","CEFRIEL, Politecnico di Milano, Milan, Italy; CEFRIEL, Politecnico di Milano, Milan, Italy","11th IEEE International Software Metrics Symposium (METRICS'05)","24 Oct 2005","2005","","","10 pp.","40","Since object-oriented programming became a popular development practice, researchers and practitioners have defined several techniques aimed at measuring object-oriented software. Among these, several function point-like approaches have been proposed. However, mapping the concepts at the basis of function point analysis onto object-oriented concepts is not straightforward; therefore, there is the need to test the validity of FP-based object-oriented metrics. This paper presents an analysis of a set of programs developed by masteral students of a software engineering course employing object-oriented techniques (UML and Java). Different kinds of FP-based object-oriented metrics were applied, and the results analysed. The work done addresses questions like the following: is there a correlation between object-oriented FPs and LOCs? How do object-oriented FPs compare with the function points defined by Albrecht? How do object-oriented FPs compare with non FP-like OO metrics? How do object-oriented FPs compare with each other?","1530-1435","0-7695-2371-4","10.1109/METRICS.2005.9","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1509318","Object-oriented systems;size measures;Function Point Analysis;empirical validation","Software measurement;Software engineering;Unified modeling language;Object oriented programming;Testing;Java;Computer industry;Lab-on-a-chip;Size measurement;Availability","computer science education;educational courses;Java;object-oriented programming;software cost estimation;software metrics;Unified Modeling Language","function point-like object-oriented metrics;object-oriented programming;object-oriented software measurement;concept mapping;function point analysis;masteral students;software engineering course;UML;Java;object-oriented systems;size measurement","","5","","10","","24 Oct 2005","","","IEEE","IEEE Conferences"
"Analyzing Effect of Ensemble Models on Multi-Layer Perceptron Network for Software Effort Estimation","S. Shukla; S. Kumar; P. R. Bal",Indian Institute of Technology Roorkee; Indian Institute of Technology Roorkee; Indian Institute of Technology Roorkee,"2019 IEEE World Congress on Services (SERVICES)","29 Aug 2019","2019","2642-939X","","386","387","Effort Estimation is a very challenging task in the software development life cycle. Inaccurate estimations may cause client dissatisfaction and thereby, decrease the quality of the product. Considering the problem of software cost and effort estimation, it is conceivable to call attention to that the estimation procedure considers the qualities present in the data set, as well as the aspects of the environment in which the model is embedded. Existing literature have the instances where machine learning techniques have been used to estimate the effort required to develop any software. Yet it is quite uncertain for any particular model to perform well with all the data sets. In this paper, Multi-Layer Perceptron (MLPNN) and its ensembles are explored in order to improve the performance of software effort estimation process. Firstly, MLPNN, Ridge-MLPNN, Lasso-MLPNN, Bagging-MLPNN, and AdaBoost-MLPNN models are developed and, then, the performance of these models are compared on the basis of R2 score to find the best model fitting this dataset. Results obtained from the study demonstrate that the R2 score of AdaBoost-MLPNN is 82.213%, which is highest among all the models.","2642-939X","978-1-7281-3851-0","10.1109/SERVICES.2019.00116","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8817267","Machine Learning;Software Metrics;Predictive Model;Effort Estimation","Software;Estimation;Machine learning;Computer science;Correlation;Task analysis;Data models","learning (artificial intelligence);multilayer perceptrons;software cost estimation;software development management;software metrics","ensemble models;multilayer perceptron network;software development life cycle;software cost;software effort estimation process;Ridge-MLPNN;Lasso-MLPNN;Bagging-MLPNN;AdaBoost-MLPNN models;machine learning;software metrics;software development management","","1","","8","","29 Aug 2019","","","IEEE","IEEE Conferences"
"Features-Level Software Effort Estimation Using Machine Learning Algorithms","M. Hammad; A. Alqaddoumi","Department of Computer Science, Mutah University, Al Karak, Jordan; Department of Computer Science, University of Bahrain, Sakheer, Bahrain","2018 International Conference on Innovation and Intelligence for Informatics, Computing, and Technologies (3ICT)","3 Oct 2019","2018","","","1","3","Software effort estimation is a paramount mission in the software development process, which covered by project managers and software engineers. In the early stages, software system features are the only available measures. Therefore, cost estimation is a mission that comes under the planning stage of software venture management. In this paper, various machine learning algorithms are used to build software effort estimation models from software features. Artificial Neural Network (ANN), Support Vector Machines (SVM), K-star, and Linear Regression machine learning algorithms are evaluated on a public dataset with actual software efforts. Results showed that machine learning approach can be dependable on predicting the future effort of a software system.","","978-1-5386-9207-3","10.1109/3ICT.2018.8855752","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8855752","machine learning;software development;effort estimation;cost estimation","Software;Estimation;Machine learning algorithms;Support vector machines;Predictive models;Computational modeling;Artificial neural networks","learning (artificial intelligence);neural nets;project management;regression analysis;software cost estimation;software metrics;support vector machines","software venture management;software effort estimation models;software features;machine learning approach;features-level software effort estimation;software development process;software engineers;software system features;cost estimation;planning stage;support vector machines;linear regression machine learning algorithms;artificial neural network;K-star algorithm;ANN;SVM","","","","20","","3 Oct 2019","","","IEEE","IEEE Conferences"
"Applications of measurement in product-focused process improvement: a comparative industrial case study","A. Birk; P. Derks; D. Hamann; J. Hirvensalo; M. Oivo; E. Rodenbach; R. van Solingen; J. Taramaa","Fraunhofer IESE, Kaiserslautern, Germany; NA; NA; NA; NA; NA; NA; NA","Proceedings Fifth International Software Metrics Symposium. Metrics (Cat. No.98TB100262)","6 Aug 2002","1998","","","105","108","In ESPRIT project PROFES, measurement according to the Goal/Question/Metric (GQM) approach is conducted in industrial software projects at Drager Medical Technology, Ericsson Finland, and Schlumberger Retail Petroleum Systems. A comparative case study investigates three different ways of applying GQM in product-focused process improvement: long-term GQM measurement programmes at the application sites to better understand and improve software products and processes; GQM-based construction and validation of product/process dependency models, which describe the process impact on software quality; and cost/benefit investigation of the PROFES improvement methodology using GQM for (meta-) analysis of improvement programmes. This paper outlines how GQM is applied for these three purposes.","","0-8186-9201-4","10.1109/METRIC.1998.731234","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=731234","","Computer aided software engineering;Application software;Software measurement;Telecommunications;Research and development;Computer industry;Petroleum industry;Software quality;Embedded software;Patient monitoring","software metrics;software quality;software process improvement;research initiatives;cost-benefit analysis;software cost estimation","measurement;product-focused process improvement;industrial case study;ESPRIT project;PROFES;Goal Question Metric approach;industrial software projects;Drager Medical Technology;Ericsson Finland;Schlumberger Retail Petroleum Systems;GQM;software products;product process dependency models;software quality;cost benefit analysis","","5","","8","","6 Aug 2002","","","IEEE","IEEE Conferences"
"An Analysis of Cost-Overrun Projects Using Financial Data and Software Metrics","H. Uwano; Y. Kamei; A. Monden; K. Matsumoto","Dept. of Inf. Eng., Nara Nat. Coll. of Technol., Nara, Japan; Fac. of Inf. Sci. & Electr. Eng., Kyushu Univ., Fukuoka, Japan; Grad. Sch. of Inf. Sci., Nara Inst. of Sci. & Technol., Nara, Japan; Grad. Sch. of Inf. Sci., Nara Inst. of Sci. & Technol., Nara, Japan","2011 Joint Conference of the 21st International Workshop on Software Measurement and the 6th International Conference on Software Process and Product Measurement","29 Dec 2011","2011","","","227","232","To clarify the characteristics of cost-overrun software projects, this paper focuses on the cost to sales ratio of software development, computed from financial information of a midsize software company in the embedded systems domain, and analyzes the correlation with outsourcing ratio as well as code reuse ratio and relative effort ratio per development phase. As a result, we found that the lower cost to sales ratio projects had the higher relative effort ratio in external design phase, which indicates that spending less effort in external design can cause decrease of profit. We also found that high outsourcing ratio projects had higher cost to sales ratio, and that projects having moderate code reuse ratio had lower and disperse cost to sales ratio, which suggests troubles in code reuse can damage the profit of a project.","","978-1-4577-1930-1","10.1109/IWSM-MENSURA.2011.9","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6113064","Cost overrun project;Cost to sales ratio;Development phase;Outsourcing;Reuse","Marketing and sales;Outsourcing;Software;Testing;Companies;Maintenance engineering;Programming","DP industry;outsourcing;profitability;project management;software cost estimation;software development management;software metrics;software reusability","financial data;software metrics;cost-overrun software project;software development;financial information;midsize software company;embedded systems domain;outsourcing ratio;code reuse ratio;sales ratio;project profit","","1","","8","","29 Dec 2011","","","IEEE","IEEE Conferences"
"A simulation study of the model evaluation criterion MMRE","T. Foss; E. Stensrud; B. Kitchenham; I. Myrtveit","Norwegian Sch. of Manage., Sandvika, Norway; NA; NA; NA","IEEE Transactions on Software Engineering","17 Nov 2003","2003","29","11","985","995","The mean magnitude of relative error, MMRE, is probably the most widely used evaluation criterion for assessing the performance of competing software prediction models. One purpose of MMRE is to assist us to select the best model. In this paper, we have performed a simulation study demonstrating that MMRE does not always select the best model. Our findings cast some doubt on the conclusions of any study of competing software prediction models that use MMRE as a basis of model comparison. We therefore recommend not using MMRE to evaluate and compare prediction models. At present, we do not have any universal replacement for MMRE. Meanwhile, we therefore recommend using a combination of theoretical justification of the models that are proposed together with other metrics proposed in this paper.","1939-3520","","10.1109/TSE.2003.1245300","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1245300","","Predictive models;Software engineering;Costs;Regression tree analysis;Computational modeling;Software performance;Regression analysis;Accuracy;Classification tree analysis;Analysis of variance","software metrics;software cost estimation;digital simulation","simulation study;model evaluation criterion MMRE;mean magnitude of relative error;performance assessment;software prediction models;software metrics;software cost estimation;software engineering","","244","","52","","17 Nov 2003","","","IEEE","IEEE Journals"
"Empirical studies of software cost estimation: training of effort estimation uncertainty assessment skills","T. Gruschke","Oslo Univ., Norway","11th IEEE International Software Metrics Symposium (METRICS'05)","24 Oct 2005","2005","","","3 pp.","48","This research abstract describes my proposed doctorial work within the field of software project cost and effort estimation. My work focuses on assessment of uncertainty of software development cost or effort estimates. In particular, the work focuses on to which degree this assessment is a skill that can be improved with better training. Work completed includes one small scale experiment with student participants. A follow-up, larger, experiment with professional software developers is currently in progress. Studies targeted towards better understanding of the mental processes of development of work effort estimates and uncertainty assessments will be the next step. This work aims at the development of effective training processes of estimation and uncertainty assessment skills. Through the METRICS05 dissertation forum I hope to receive feedback on the viability and relevance of the proposed work within the software cost and effort estimation field","1530-1435","0-7695-2371-4","10.1109/METRICS.2005.19","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1509326","","Costs;Uncertainty;Programming;Software engineering;Psychology;Feedback;State estimation;Project management;Laboratories;Writing","computer science education;software cost estimation;software management;software metrics;training","software cost estimation;uncertainty assessment skills training;software project effort estimation","","3","","7","","24 Oct 2005","","","IEEE","IEEE Conferences"
"The impact of design properties on development cost in object-oriented systems","L. C. Briand; J. Wust","Dept. of Syst. & Comput. Eng., Carleton Univ., Ottawa, Ont., Canada; NA","Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","260","271","In the context of software cost estimation, system size is widely taken as a main driver of system development effort, but other structural design properties, such as coupling, cohesion and complexity, have been suggested as additional cost factors. In this paper, using effort data from an object-oriented development project, we empirically investigate the relationship between class size and the development effort for a class, and what additional impact structural properties such as class coupling have on effort. We use Poisson regression and regression trees to build cost prediction models from size and design measures, and use these models to predict the system development effort. We also investigate a technique to combine regression trees with regression analysis, which aims at building more accurate models. The results indicate that fairly accurate predictions of class effort can be made based on simple measures of the class interface size alone; mean MREs (magnitudes of relative error) are below 30%. Effort predictions at the system level are even more accurate as, using bootstrapping, the estimated 95% confidence interval for MREs is 3%-23%, but more sophisticated coupling and cohesion measures do not help to improve these predictions to a degree that would be practically significant. However, the use of hybrid models, combining Poisson regression and CART (classification and regression trees) clearly improves the accuracy of the models as compared to using Poisson regression alone.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915534","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915534","","Costs;Size measurement;Regression tree analysis;Object oriented modeling;Software measurement;Time measurement;Predictive models;Software engineering;Systems engineering and theory;Drives","object-oriented programming;software cost estimation;statistical analysis;Poisson distribution;trees (mathematics);object-oriented methods;software metrics","structural design properties;software development cost;object-oriented systems;software cost estimation;system size;system development effort;module coupling;module cohesion;software complexity;object class size;class coupling;Poisson regression;regression trees;cost prediction models;design measures;regression analysis;accurate models;class effort;class interface size;relative error magnitude;bootstrapping;confidence interval;CART;object-oriented measurement;empirical validation","","1","","23","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Conceptual Association of Functional Size Measurement Methods","O. Demirors; C. Gencel",Middle East Technical University; Blekinge Institute of Technology,"IEEE Software","17 Apr 2009","2009","26","3","71","78","Functional size determines how much functionality software provides by measuring the aggregate amount of its cohesive execution sequences. Alan Albrecht first introduced the concept in 1979. Since he originally described the function point analysis (FPA) method, researchers and practitioners have developed variations of functional size metrics and methods. The authors discuss the conceptual similarities and differences between functional size measurement methods and introduce a model for unification.","1937-4194","","10.1109/MS.2009.60","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4814963","management;cost estimation;product metrics","Size measurement;Software measurement;ISO standards;Phase measurement;Measurement standards;Software standards;Standards development;Standards organizations;Software metrics;Documentation","software cost estimation;software metrics","functional size measurement methods;functionality software;cohesive execution sequences;function point analysis method;functional size metrics","","19","","11","","17 Apr 2009","","","IEEE","IEEE Magazines"
"US DoD Application Domain Empirical Software Cost Analysis","R. Madachy; B. Boehm; B. Clark; T. Tan; W. Rosa","Dept. of Syst. Eng., Naval Postgrad. Sch., Monterey, CA, USA; USC Center for Syst. & Software Eng., Univ. of Southern California, Los Angeles, CA, USA; USC Center for Syst. & Software Eng., Univ. of Southern California, Los Angeles, CA, USA; USC Center for Syst. & Software Eng., Univ. of Southern California, Los Angeles, CA, USA; Inf. Technol. Div., Air Force Cost Anal. Agency, Arlington, VA, USA","2011 International Symposium on Empirical Software Engineering and Measurement","1 Dec 2011","2011","","","392","395","General software cost parameters such as size, effort distribution, and productivity are necessarily imprecise due to variations by domain. To improve this situation, empirical software cost analysis using the primary US DoD cost database has been segmented by domain. This analysis supports a software cost estimation metrics manual for improvements in acquisition policies, procedures and tools. We have addressed the challenges of consistent data definitions and taxonomies across diverse stakeholder communities, data integrity, data formats, and others. We highlight example analysis results from an application domain demonstrating cost estimating relationships, benchmarks on reuse parameters and effort distributions for estimators to use.","1949-3789","978-1-4577-2203-5","10.1109/ESEM.2011.56","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6092596","software cost estimation;software metrics;software cost models;software productivity;Department of Defense","Software;US Department of Defense;Estimation;Taxonomy;Productivity;Aerospace electronics;Educational institutions","costing;data integrity;defence industry;military computing;software metrics","application domain empirical software cost analysis;US DoD cost database;software cost estimation metrics manual;data integrity;stakeholder communities","","4","","6","","1 Dec 2011","","","IEEE","IEEE Conferences"
"A Structured Framework for Software Metrics Based on Three Primary Metrics","K. Akingbehin","Dept. of Comput. & Inf. Sci., Univ. of Michigan-Dearborn, Dearborn, MI, USA","2010 IEEE/ACIS 9th International Conference on Computer and Information Science","30 Sep 2010","2010","","","749","752","This paper presents a structured unifying framework for software metrics (numerical software measurements), based on the three ""primary metrics"" of function points (FP), person-months (PM), and lines of code (LOC). The framework is based on a layered model, with the three primary metrics constituting the lowest layer. An important property of the primary metrics, referred to as the ""convertibility property"" is that a primary metric can easily be converted to another primary metric. Time is also included in this layer as a fundamental (not necessarily software) primary metric. The second layer consists of general-purpose metrics such as productivity measures, which are computed from the primary metrics, and the third layer consists of specialpurpose metrics such as reliability and quality measures. This third layer is inherently extensible. The framework readily lends itself for use in both instructional and practitioner environments.","","978-1-4244-8198-9","10.1109/ICIS.2010.158","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=5591049","software;metrics","Software;Software metrics;Software engineering;Productivity;Unified modeling language;Conferences","software cost estimation;software metrics;software quality;software reliability","software metrix;structured unifying framework;primary metrix;function point;lines of code;layered model;convertibility property","","1","","16","","30 Sep 2010","","","IEEE","IEEE Conferences"
"Definition and experimental evaluation of function points for object-oriented systems","G. Caldiera; G. Antoniol; R. Fiutem; C. Lokan","Price Waterhouse Coopers, Fairfax, VA, USA; NA; NA; NA","Proceedings Fifth International Software Metrics Symposium. Metrics (Cat. No.98TB100262)","6 Aug 2002","1998","","","167","178","We present a method for estimating the size, and consequently effort and duration, of object oriented software development projects. Different estimates may be made in different phases of the development process, according to the available information. We define an adaptation of traditional function points, called Object Oriented Function Points, to enable the measurement of object oriented analysis and design specifications. Tools have been constructed to automate the counting method. The novel aspect of our method is its flexibility. An organisation can experiment with different counting policies, to find the most accurate predictors of size, effort, etc. in its environment. The method and preliminary results of its application in an industrial environment are presented and discussed.","","0-8186-9201-4","10.1109/METRIC.1998.731242","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=731242","","Programming;Phase measurement;Costs;Object oriented modeling;Software measurement;Australia;Application software;Project management;Size measurement;Particle measurements","software cost estimation;software development management;software metrics;object-oriented programming;software tools","experimental evaluation;function point analysis;software tools;object oriented software development projects;Object Oriented Function Points;measurement;object oriented analysis;counting policies;industrial environment;object oriented design specification;software metrics","","19","","19","","6 Aug 2002","","","IEEE","IEEE Conferences"
"A Two-Step Model for Defect Density Estimation","O. Kutlubay; B. Turhan; A. B. Bener",Bogazici University; Bogazici University; Bogazici University,"33rd EUROMICRO Conference on Software Engineering and Advanced Applications (EUROMICRO 2007)","17 Sep 2007","2007","","","322","332","Identifying and locating defects in software projects is a difficult task. Further, estimating the density of defects is more difficult. Measuring software in a continuous and disciplined manner brings many advantages such as accurate estimation of project costs and schedules, and improving product and process qualities. Detailed analysis of software metric data gives significant clues about the locations and magnitude of possible defects in a program. The aim of this research is to establish an improved method for predicting software quality via identifying the defect density of fault prone modules using machine-learning techniques. We constructed a two-step model that predicts defect density by taking module metric data into consideration. Our proposed model utilizes classification and regression type learning methods consecutively. The results of the experiments on public data sets show that the two-step model enhances the overall performance measures as compared to applying only regression methods.","2376-9505","978-0-7695-2977-6","10.1109/EUROMICRO.2007.13","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4301095","","Predictive models;Software measurement;Learning systems;Software quality;Costs;Software metrics;Software testing;Fault diagnosis;Size measurement;Data mining","learning (artificial intelligence);regression analysis;software cost estimation;software fault tolerance;software metrics;software process improvement;software quality","software defect density estimation;software project cost estimation;software metric analysis;software quality;fault prone module;machine learning technique;classification-regression type learning method;software complexity measurement","","3","","28","","17 Sep 2007","","","IEEE","IEEE Conferences"
"Reliability and validity in comparative studies of software prediction models","I. Myrtveit; E. Stensrud; M. Shepperd","Norwegian Sch. of Manage. BI, Sandvika, Norway; NA; NA","IEEE Transactions on Software Engineering","6 Jun 2005","2005","31","5","380","391","Empirical studies on software prediction models do not converge with respect to the question ""which prediction model is best?"" The reason for this lack of convergence is poorly understood. In this simulation study, we have examined a frequently used research procedure comprising three main ingredients: a single data sample, an accuracy indicator, and cross validation. Typically, these empirical studies compare a machine learning model with a regression model. In our study, we use simulation and compare a machine learning and a regression model. The results suggest that it is the research procedure itself that is unreliable. This lack of reliability may strongly contribute to the lack of convergence. Our findings thus cast some doubt on the conclusions of any study of competing software prediction models that used this research procedure as a basis of model comparison. Thus, we need to develop more reliable research procedures before we can have confidence in the conclusions of comparative studies of software prediction models.","1939-3520","","10.1109/TSE.2005.58","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1438374","Index Terms- Software metrics;cost estimation;cross-validation;empirical methods;arbitrary function approximators;machine learning;estimation by analogy;regression analysis;simulation;reliability;validity;accuracy indicators.","Predictive models;Machine learning;Convergence;Mathematical model;Regression analysis;Artificial neural networks;Cost function;Analytical models;Programming;Maximum likelihood estimation","software reliability;software cost estimation;software metrics;program verification;convergence;regression analysis;function approximation;learning (artificial intelligence)","software reliability;software validity;software prediction model;convergence;data sample;accuracy indicator;cross validation;machine learning model;regression model;simulation;software metrics;cost estimation;empirical method;arbitrary function approximators;analogy estimation","","136","","44","","6 Jun 2005","","","IEEE","IEEE Journals"
"Software defect prediction using software metrics - A survey","K. Punitha; S. Chitra","Bhajarang Engineering College, Tiruvallur, Chennai, TamilNadu, India; Er. Perumal Manimekalai College of Engineering, Hosur, Krishnagiri, Tamil Nadu, India","2013 International Conference on Information Communication and Embedded Systems (ICICES)","25 Apr 2013","2013","","","555","558","Traditionally software metrics have been used to define the complexity of the program, to estimate programming time. Extensive research has also been carried out to predict the number of defects in a module using software metrics. If the metric values are to be used in mathematical equations designed to represent a model of the software process, metrics associated with a ratio scale may be preferred, since ratio scale data allow most mathematical operations to meaningfully apply. Work on the mechanics of implementing metrics programs. The goal of this research is to help developers identify defects based on existing software metrics using data mining techniques and thereby improve software quality which ultimately leads to reducing the software development cost in the development and maintenance phase. This research focuses in identifying defective modules and hence the scope of software that needs to be examined for defects can be prioritized. This allows the developer to run test cases in the predicted modules using test cases. The proposed methodology helps in identifying modules that require immediate attention and hence the reliability of the software can be improved faster as higher priority defects can be handled first. Our goal in this research focuses to improve the classification accuracy of the Data mining algorithm. To initiate this process we initially propose to evaluate the existing classification algorithms and based on its weakness we propose a novel Neural network algorithm with a degree of fuzziness in the hidden layer to improve the classification accuracy.","","978-1-4673-5788-3","10.1109/ICICES.2013.6508369","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6508369","Software defect prediction;software defectproneness prediction;machine learning;scheme evaluation","Software;Predictive models;Accuracy;Computer bugs;Measurement;Software reliability;Testing","data mining;fuzzy set theory;neural nets;pattern classification;program diagnostics;software cost estimation;software maintenance;software metrics;software quality;software reliability","software defect prediction;software metrics;program complexity;programming time estimation;mathematical equations;software process;ratio scale data;mathematical operations;metrics programs;data mining techniques;software quality;software development cost;software maintenance phase;software development phase;defective module identification;software reliability;data mining algorithm;neural network algorithm;fuzziness degree","","7","","10","","25 Apr 2013","","","IEEE","IEEE Conferences"
"MMWA: a software sizing model for Web applications","L. Mangia; R. Paiano","Dipto. Ingegneria dell'Innovazione, Universita di Lecce, Italy; Dipto. Ingegneria dell'Innovazione, Universita di Lecce, Italy","Proceedings of the Fourth International Conference on Web Information Systems Engineering, 2003. WISE 2003.","19 Feb 2004","2003","","","53","61","Estimating time and costs is a crucial factor in application development projects and low error margins are a priority. In line with the very fast evolution of Internet technologies, all applications are quickly becoming Web applications, which are growing without a consolidated project methodology. Thus there is a clear need for an estimation model for these applications' development projects. The aim of the present paper is to illustrate a new Web application cost estimation model that can form the starting point for any development project. The estimation model described in this paper is called MMWA (metrics model for Web applications). This is an ""early measures model"", since the measurements are effected at the start of the software life cycle, with a view to accurately estimate time and costs so that the right decisions can be taken concerning the development of the Web application in hand.","","0-7695-1999-7","10.1109/WISE.2003.1254469","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1254469","","Application software;Costs;Information systems;Software engineering;Laboratories;Internet;Software measurement;Time measurement;Navigation;Life estimation","software metrics;software cost estimation;Internet;software maintenance","MMWA;software sizing model;Web applications;software metrics;application development;Internet;cost estimation;software life cycle;time estimation","","16","","23","","19 Feb 2004","","","IEEE","IEEE Conferences"
"Function point measurement tool for UML design specification","T. Uemura; S. Kusumoto; K. Inoue","Graduate Sch. of Eng. Sci., Osaka Univ., Japan; NA; NA","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","62","69","Function point analysis (FPA) was originally proposed to help measure the size of a computerized business information system. It is now widely used in actual software development. However, it has been reported that, since function point counting involves judgment on the part of the counter, some differences would be caused between copies of the same product, even within the same organization. In this paper, we propose detailed FPA measurement rules for design specifications based on UML (Unified Modeling Language) and we develop a function point measurement tool, whose input products are design specifications on Rational Rose. We have also applied the tool in an actual design specification and have examined the difference between the values obtained using the tool and those given by an FPA specialist. The results show the applicability of our tool.","","0-7695-0403-5","10.1109/METRIC.1999.809727","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809727","","Unified modeling language;Size measurement;Lab-on-a-chip;Programming;Software measurement;Computer aided software engineering;Counting circuits;Computer languages;Software metrics;Information science","specification languages;formal specification;software cost estimation;software metrics;software tools;human factors","function point measurement tool;UML design specification;function point analysis;computerized business information system size measurement;software development;function point counting;counter judgment;software product copies;Unified Modeling Language;Rational Rose","","30","","14","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Analyzing effects of cost estimation accuracy on quality and productivity","O. Mizuno; T. Kikuno; K. Inagaki; Y. Takagi; K. Sakamoto","Graduate Sch. of Eng. Sci., Osaka Univ., Japan; NA; NA; NA; NA","Proceedings of the 20th International Conference on Software Engineering","6 Aug 2002","1998","","","410","419","This paper discusses the effects of estimation accuracy for software development cost on both the quality of the delivered code and the productivity of the development team. The estimation accuracy is measured by metric RE (relative error). The quality and productivity are measured by metrics FQ (field quality) and TP (team productivity). Using actual project data on thirty-one projects at a certain company, the following are verified by correlation analysis and testing of statistical hypotheses. There is a high correlation between the faithfulness of the development plan to standards and the value of RE (a coefficient of correlation between them is -0.60). Both FQ and TP are significantly different between projects with -10%<RE<+10% and projects with RE/spl ges/+10% (the level of significance is chosen as 0.05).","0270-5257","0-8186-8368-6","10.1109/ICSE.1998.671596","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=671596","","Costs;Productivity;Standards development;Software quality;Writing;System buses;Programming;Embedded software;Marketing and sales;Software engineering","software cost estimation;software quality;software metrics;statistical analysis;software development management","software cost estimation;software quality;software metrics;estimation accuracy;software development team;relative error metric;field quality metric;team productivity metric;correlation analysis;statistical hypotheses testing;standards;software projects","","5","","15","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Measuring metadata-based aspect-oriented code in model-driven engineering","S. Sunkle; V. Kulkarni; S. Roychoudhury","Tata Research Development and Design Center, Tata Consultancy Services, 54B, Industrial Estate, Hadapsar, Pune, 411013 India; Tata Research Development and Design Center, Tata Consultancy Services, 54B, Industrial Estate, Hadapsar, Pune, 411013 India; Tata Research Development and Design Center, Tata Consultancy Services, 54B, Industrial Estate, Hadapsar, Pune, 411013 India","2012 3rd International Workshop on Emerging Trends in Software Metrics (WETSoM)","28 Jun 2012","2012","","","2","8","Metrics measurement for cost estimation in model-driven engineering (MDE) is complex because of number of different artifacts that can potentially be generated. The complexity arises as auto-generated code, manually added code, and non-code artifacts must be sized separately for their contribution to overall effort. In this paper, we address measurement of a special kind of code artifacts called metadata-based aspect-oriented code. Our MDE toolset delivers large database-centric business-critical enterprise applications. We cater to special needs of enterprises by providing support for customization along three concerns, namely design strategies, architecture, and technology platforms (〈d, a, t〉) in customer-specific applications. Code that is generated for these customizations is conditional in nature, in the sense that model-to-text transformation takes place differently based on choices along these concerns. In our recent efforts to apply Constructive Cost Model (COCOMO) II to our MDE practices, we discovered that while the measurement of the rest of code and non-code artifacts can be easily automated, product-line-like nature of code generation for specifics of 〈d, a, t〉 requires special treatment. Our contribution is the use of feature models to capture variations in these dimensions and their mapping to code size estimates. Our initial implementation suggests that this approach scales well considering the size of our applications and takes a step forward in providing complete cost estimation for MDE applications using COCOMO II.","2327-0969","978-1-4673-1762-7","10.1109/WETSoM.2012.6226990","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6226990","","Generators;Unified modeling language;Weaving;Radiation detectors;Business;Object oriented modeling;Automation","aspect-oriented programming;business data processing;database management systems;meta data;software metrics","metadata-based aspect-oriented code;model-driven engineering;metrics measurement;cost estimation;auto-generated code;manually added code;noncode artifacts;database-centric business-critical enterprise applications;design strategies;technology platforms;customer-specific applications;model-to-text transformation;constructive cost model;COCOMO II","","1","","15","","28 Jun 2012","","","IEEE","IEEE Conferences"
"The Internal Revenue Service function point analysis program: a brief","C. B. Tichenor",NA,"Proceedings Twenty-First Annual International Computer Software and Applications Conference (COMPSAC'97)","6 Aug 2002","1997","","","591","592","The Internal Revenue Service (IRS) Information Systems has been using function point analysis since 1993 as the foundation of its software metrics program. Using function point analysis, the IRS has significantly improved the quality of its software project management as measured by the SEI Capability Maturity Model. The IRS can determine the size of its software about four times faster than industry averages can estimate software size and resource requirements for new development projects as soon as the central data model is known, and can accurately size small software work orders and estimate corresponding resources needed without examining the software or meeting with the project team. Each of these methodologies qualify at least at CMM Level 2.","0730-3157","0-8186-8105-5","10.1109/CMPSAC.1997.625077","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=625077","","Management information systems;Information analysis;Software metrics;Software quality;Project management;Software measurement;Capability maturity model;Computer industry;Data models;Coordinate measuring machines","government data processing;tax preparation;software cost estimation;project management;financial data processing","Internal Revenue Service function point analysis program;software metrics program;IRS Information Systems;software project management;SEI Capability Maturity Model;software size estimation;resource requirements;development projects;central data model;small software work orders;project team;CMM Level 2","","1","","2","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Test blueprint: an effective visual support for test coverage","V. P. Araya","University of Chile, Santiago, Chile","2011 33rd International Conference on Software Engineering (ICSE)","10 Oct 2011","2011","","","1140","1142","Test coverage is about assessing the relevance of unit tests against the tested application. It is widely acknowledged that a software with a ""good"" test coverage is more robust against unanticipated execution, thus lowering the maintenance cost. However, insuring a coverage of a good quality is challenging, especially since most of the available test coverage tools do not discriminate software components that require a ""strong"" coverage from the components that require less attention from the unit tests. HAPAO is an innovative test covepage tool, implemented in the Pharo Smalltalk programming language. It employs an effective and intuitive graphical representation to visually assess the quality of the coverage. A combination of appropriate metrics and relations visually shapes methods and classes, which indicates to the programmer whether more effort on testing is required. This paper presents the essence of HAPAO using a real world case study.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986022","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=6032614","coverage;pharo;testing;visualization","Software;Testing;Complexity theory;Visualization;Measurement;Context;Computer languages","object-oriented languages;object-oriented programming;program testing;program visualisation;software cost estimation;software maintenance;software metrics;software quality;software tools","test blueprint;test coverage visual support;unit tests;software test coverage;software maintenance cost;software quality;software component;HAPAO test coverage tool;Pharo Smalltalk programming language;graphical representation;software metrics","","5","","4","","10 Oct 2011","","","IEEE","IEEE Conferences"
"A change prediction model for embedded software applications","K. J. Cronin; D. G. Linton","Lockheed Martin, Orlando, FL, USA; NA","Proceedings IEEE Southeastcon '98 'Engineering for a New Era'","6 Aug 2002","1998","","","5","8","A key aspect of effective software development is the ability to quantify and predict software product quality. Software quality is the degree to which software possesses desired attributes, including portability, reliability, testability and maintainability. Insofar as software with high change traffic affects its maintainability and reliability, a model which produces a change-traffic predictor metric may be useful. The information such a model would provide could be used to help estimate the development cost and effort. Resources could be better allocated to those areas where additional attention may be required. Software changes normally occur due to new requirements or errors in the software, and so a change-traffic metric is not necessarily a good proxy for errors. Users should define their thresholds and ranges of acceptability. This paper identifies metrics collected from embedded Ada software that had a correlation with the change traffic of that software. Using multiple linear regression analysis and sample data from up to 287 embedded Ada software modules, change prediction models yielded values for the average absolute difference between predicted and actual changes per module of less than 3, and an adjusted-R/sup 2/ value of 0.57 for the full sample.","","0-7803-4391-3","10.1109/SECON.1998.673277","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=673277","","Predictive models;Embedded software;Application software;Software quality;Software maintenance;Traffic control;Programming;Software testing;Costs;Resource management","real-time systems;software maintenance;software cost estimation;software quality;software metrics;Ada;software reliability","change prediction model;embedded software applications;software development;software product quality;desired software attributes;software portability;software reliability;software testability;software maintainability;change-traffic predictor metric;development cost estimation;development effort estimation;resource allocation;new software requirements;software errors;acceptability threshold;acceptability range;embedded Ada software modules;correlation;multiple linear regression analysis;adjusted-R/sup 2/ value","","","","4","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Building a software cost estimation model based on categorical data","L. Angelis; I. Stamelos; M. Morisio","Dept. of Inf., Thessaloniki Univ., Greece; NA; NA","Proceedings Seventh International Software Metrics Symposium","7 Aug 2002","2001","","","4","15","The paper explores the possibility of generating a multi-organisational software cost estimation model by analysing the software cost data collected by the International Software Benchmarking Standards Group. This database contains data about recently developed projects characterised mostly by attributes of categorical nature such as the project business area, organisation type, application domain and usage of certain tools or methods. The generation of the model is based on a statistical technique which has been proposed as alternative to the standard regression approach, namely the categorical regression or regression with optimal scaling. This technique starts with the quantification of the qualitative attributes (expressed either on nominal or ordinal scale), that appear frequently within such data, and proceeds by using the obtained scores as independent variables of a regression model. The generated model is validated by measuring certain indicators of accuracy.","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915511","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=915511","","Costs;Informatics;Databases;Software measurement;Application software;Software engineering;Predictive models;Software maintenance;Statistical analysis;Programming","software cost estimation;statistical analysis;data analysis;database management systems","software cost estimation model;categorical data;multi-organisational software cost estimation model;software cost data;International Software Benchmarking Standards Group;categorical attributes;project business area;organisation type;application domain;statistical technique;standard regression approach;categorical regression;optimal scaling;qualitative attributes;ordinal scale;independent variables;regression model;generated model","","11","","31","","7 Aug 2002","","","IEEE","IEEE Conferences"
"Impact of Budget and Schedule Pressure on Software Development Cycle Time and Effort","N. Nan; D. E. Harter","University of Oklahoma, Norman; Syracuse University, Syracuse","IEEE Transactions on Software Engineering","2 Oct 2009","2009","35","5","624","637","As excessive budget and schedule compression becomes the norm in today's software industry, an understanding of its impact on software development performance is crucial for effective management strategies. Previous software engineering research has implied a nonlinear impact of schedule pressure on software development outcomes. Borrowing insights from organizational studies, we formalize the effects of budget and schedule pressure on software cycle time and effort as U-shaped functions. The research models were empirically tested with data from a 25 billion/year international technology firm, where estimation bias is consciously minimized and potential confounding variables are properly tracked. We found that controlling for software process, size, complexity, and conformance quality, budget pressure, a less researched construct, has significant U-shaped relationships with development cycle time and development effort. On the other hand, contrary to our prediction, schedule pressure did not display significant nonlinear impact on development outcomes. A further exploration of the sampled projects revealed that the involvement of clients in the software development might have ldquoerodedrdquo the potential benefits of schedule pressure. This study indicates the importance of budget pressure in software development. Meanwhile, it implies that achieving the potential positive effect of schedule pressure requires cooperation between clients and software development teams.","1939-3520","","10.1109/TSE.2009.18","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4815275","Cost estimation;time estimation;schedule and organizational issues;systems development.","Programming;Job shop scheduling;Software performance;Computer industry;Financial management;Software development management;Software engineering;Testing;Pressure control;Size control","budgeting;DP industry;project management;sampling methods;scheduling;software cost estimation;software development management;software metrics;software quality;statistical testing","budget pressure;schedule pressure;software development cycle time estimation;software development effort estimation;software industry;software development performance;software engineering research;nonlinear impact;organizational study;U-shaped function;empirical testing;international technology firm;potential confounding variable;software process control;software size control;software complexity control;software conformance quality control;sampled project management;potential positive effect;software development team management strategy;software cost estimation","","43","","74","","17 Apr 2009","","","IEEE","IEEE Journals"
"Development of analogy-based estimation method for software development cost estimation in government agencies","I. Kurniawan; A. A. Arman; S. Mardiyanto","School of Electrical Engineering and Informatics, Institut Teknologi Bandung, Bandung, Indonesia; School of Electrical Engineering and Informatics, Institut Teknologi Bandung, Bandung, Indonesia; School of Electrical Engineering and Informatics, Institut Teknologi Bandung, Bandung, Indonesia","2017 6th International Conference on Electrical Engineering and Informatics (ICEEI)","12 Mar 2018","2017","","","1","6","Cost estimation for software development in Government Agencies is still considered as a challenge. Owner Estimate Cost (OEC) should be estimated based on the specifications at the early stage of the procurement. There is no standard used by the government in formulating technical specifications. This affects the OEC value that tends to be highly subjective. Therefore, it is important to develop an estimation method that is able to represent software complexity at the early stage of procurement. The approach that can be considered in the early stages is the Use Case approach. UCP is a method to calculating effort algorithmically using use case complexity. However, UCP has a limitation, which only provides a level of fixed complexity and cannot handle uncertain conditions. In the other hand, Some previous research result shows that the analogy method has better performance than the algorithmic method. In this study, we developed the effort and cost estimation methods based on analogy by building a new dataset using the use case complexity parameters. Datasets are collected from 100 historical software projects data that have been built using the UCP method approach. Cost components for the project follow the current procurement regulations in Indonesia. Dataset evaluation for effort estimation using the proposed analogy method shows the best results of MMRE of 0.36 and PRED(0.25) of 0.57. MMRE shows the average difference of actual effort and estimated effort, whereas PRED (0.25) shows prediction level with error value smaller or equal to 25%. Furthermore, the estimated cost of the three software projects resulted in an average percentage deviation of 7.37%.","2155-6830","978-1-5386-0475-5","10.1109/ICEEI.2017.8312460","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=8312460","Analogy-Based Estimation;Use Case Points;Software Cost Estimation;Effort Estimation","Software;Estimation;Complexity theory;Procurement;Government;Mathematical model;Software algorithms","project management;software cost estimation;software development management;software metrics","software development cost estimation;government agencies;Owner Estimate Cost;procurement;software complexity;analogy method;algorithmic method;use case complexity parameters;UCP method approach;Cost components;historical software projects data;MMRE;PRED","","","","28","","12 Mar 2018","","","IEEE","IEEE Conferences"
"Further comparison of cross-company and within-company effort estimation models for Web applications","E. Mendes; B. Kitchenham","Dept. of Comput. Sci., Auckland Univ., New Zealand; NA","10th International Symposium on Software Metrics, 2004. Proceedings.","22 Nov 2004","2004","","","348","357","This paper extends a previous study, using data on 67 Web projects from the Tukutuku database, investigating to what extent a cross-company cost model can be successfully employed to estimate effort for projects that belong to a single company, where no projects from this company were used to build the cross-company model. Our within-company model employed data on 14 Web projects from a single Web company. Our results were similar to those from the previous study, showing that predictions based on the within-company model were significantly more accurate than those based on the cross-company model. We also found that predictions were very poor when the within-company cost model was used to estimate effort for 53 Web projects from different companies. We analysed the data using two techniques, forward stepwise regression and case-based reasoning. We found estimates produced using stepwise regression models were better for the within company model while case-based reasoning predictions were better for the cross-company model.","1530-1435","0-7695-2129-0","10.1109/METRIC.2004.1357920","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357920","","Predictive models;Application software;Costs;Computer science;Databases;Data analysis;Productivity;Sampling methods;Software engineering;Software metrics","software cost estimation;project management;Internet;software development management;case-based reasoning;software metrics;regression analysis","effort estimation;Web projects;cross-company estimation models;within-company estimation model;regression-based estimation models;replication study;case-based reasoning;forward stepwise regression","","50","","17","","22 Nov 2004","","","IEEE","IEEE Conferences"
"Comparative Study on Applicability of WEBMO in Web Application Cost Estimation within Klang Valley in Malaysia","T. C. Hooi; Y. Yusoff; Z. Hassan",NA; NA; NA,"2008 IEEE 8th International Conference on Computer and Information Technology Workshops","18 Jul 2008","2008","","","116","121","Parametric Web application cost estimation is referred to the usage of mathematical model to derive the estimated effort and duration of Web application development. Typically, majority of Web application developers are applying expert judgment and estimation by analogy in Web application development. This paper is focusing on feasibility study of WEBMO (Web model), a parametric Web application cost estimation model, in Web application development within Klang Valley in Malaysia. WEBCOMO, a parametric Web application tool is developed based on WEBMOpsilas methodology to fulfill the objective of the study.","","978-0-7695-3242-4","10.1109/CIT.2008.Workshops.48","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4568489","WEBMO;web application cost estimation;WEBCOMO;parametric software cost estimation;software cost estimation tool;software cost estimation;parametric cost estimation tool","Costs;Application software;Software tools;Programming;Context modeling;Software metrics;Information technology;Conferences;Mathematical model;Software engineering","software cost estimation;Web services","WEBMO;Web application cost estimation;Klang Valley;mathematical model usage;Web application development;Web model;software cost estimation","","5","","10","","18 Jul 2008","","","IEEE","IEEE Conferences"
"An empirical validation of the relationship between the magnitude of relative error and project size","E. Stensrud; T. Foss; B. Kitchenham; I. Myrtveit","Norwegian Sch. of Manage., Norway; Norwegian Sch. of Manage., Norway; NA; NA","Proceedings Eighth IEEE Symposium on Software Metrics","7 Aug 2002","2002","","","3","12","Cost estimates are important deliverables of a software project. Consequently, a number of cost prediction models have been proposed and evaluated. The common evaluation criteria have been MMRE, MdMRE and PRED(k). MRE is the basic metric in these evaluation criteria. The implicit rationale of using a relative error measure like MRE, rather than an absolute one, is presumably to have a measure that is independent of project size. We investigate if this implicit claim holds true for several data sets: Albrecht, Kemerer, Finnish, DMR and Accenture-ERP. The results suggest that MRE is not independent of project size. Rather, MRE is larger for small projects than for large projects. A practical consequence is that a project manager predicting a small project may falsely believe in a too low MRE. Vice versa when predicting a large project. For researchers, it is important to know that MMRE is not an appropriate measure of the expected MRE of small and large projects. We recommend therefore that the data set be partitioned into two or more subsamples and that MMRE is reported per subsample. In the long term, we should consider using other evaluation criteria.","1530-1435","0-7695-1339-5","10.1109/METRIC.2002.1011320","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1011320","","Electrical capacitance tomography;Costs;Project management;Size measurement;Investments;Software engineering;Accuracy;Q measurement;Measurement uncertainty;Artificial intelligence","software metrics;software cost estimation;project management;software development management","software project size;MMRE;software cost estimates;cost prediction models;common evaluation criteria;magnitude of relative error;MRE;software metrics;MdMRE;PRED;Albrecht data set;Kemerer data set;Finnish data set;DMR data set;Accenture-ERP data set;relative error measure","","27","","19","","7 Aug 2002","","","IEEE","IEEE Conferences"
"A Size Estimation Model for Board-Based Desktop Games","N. Sabahat; A. A. Malik; F. Azam","Department of Computer Engineering, National University of Sciences and Technology, Islamabad, Pakistan; Department of Computer Science, National University of Computer and Emerging Sciences, Lahore, Pakistan; Department of Computer Engineering, National University of Sciences and Technology, Islamabad, Pakistan","IEEE Access","24 Apr 2017","2017","5","","4980","4990","Software size estimation plays a key role in the planning of projects at the time of project inception. This paper describes the derivation, validation, and usage of a parametric model meant for estimating the size of board-based desktop games. This model is derived using forward stepwise multiple linear regression on a data set comprising over 60 open source board-based games collected from multiple open source repositories. A variety of prediction accuracy metrics (e.g., MMRE, PRED(x), MdMRE, and so on) are used to assess this model and K-fold cross-validation is used to validate this model. Model assessment and validation exercises yield promising results. The utility of this model is demonstrated by presenting a worked-out game size estimation example followed by some size-related what-if analyses.","2169-3536","","10.1109/ACCESS.2017.2678459","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7875479","Linear regression;model fitting;model validation;open source software;software cost estimation;software games;software project management;software sizing","Games;Estimation;Software;Object oriented modeling;Complexity theory;Predictive models;Size measurement","computer games;project management;public domain software;regression analysis;software cost estimation;software management;software metrics","software size estimation;project planning;project inception;parametric model;forward stepwise multiple linear regression;data set;multiple open source repositories;prediction accuracy metrics;K-fold cross-validation;model assessment;model validation;worked-out game size estimation;open source board-based desktop games;software cost estimation","","3","","53","","10 Mar 2017","","","IEEE","IEEE Journals"
"Resource estimation for Web applications","P. Umbers; G. Miles","Internistic Ltd., Birmingham, UK; NA","10th International Symposium on Software Metrics, 2004. Proceedings.","22 Nov 2004","2004","","","370","381","In the field of software engineering, several empirical methods have been developed to model software projects before they are undertaken to provide an estimate of required effort, development time and cost. In the case of Web applications, this process is complicated by their complexity, multitiered nature, extensive use of noncode artifacts such as multimedia and often short time-scales. In this paper we describe a simple, highly adaptable model using COSMIC full function points for application size measurement and design patterns as a measurement reference. Rather than a true derived model the aim is to provide a procedural framework for expert judgement which guides the practitioner through the estimation process, seeking to limit or mitigate variance in their judgement through algorithmic or statistical techniques. This hybrid has so far proven as accurate as expert judgement while remaining capable of application by a relatively inexperienced estimator.","1530-1435","0-7695-2129-0","10.1109/METRIC.2004.1357922","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1357922","","Application software;Software metrics","project management;software cost estimation;software metrics;software development management;object-oriented methods","resource estimation;Web applications;software engineering;software project;effort estimation;software development time;software cost estimation;function point size measurement;design patterns","","5","","14","","22 Nov 2004","","","IEEE","IEEE Conferences"
"Optimal project feature weights in analogy-based cost estimation: improvement and limitations","M. Auer; A. Trendowicz; B. Graser; E. Haunschmid; S. Biffl","Inst. of Software Technol. & Interactive Syst., Vienna Univ. of Technol., Austria; NA; NA; NA; NA","IEEE Transactions on Software Engineering","27 Feb 2006","2006","32","2","83","92","Cost estimation is a vital task in most important software project decisions such as resource allocation and bidding. Analogy-based cost estimation is particularly transparent, as it relies on historical information from similar past projects, whereby similarities are determined by comparing the projects' key attributes and features. However, one crucial aspect of the analogy-based method is not yet fully accounted for: the different impact or weighting of a project's various features. Current approaches either try to find the dominant features or require experts to weight the features. Neither of these yields optimal estimation performance. Therefore, we propose to allocate separate weights to each project feature and to find the optimal weights by extensive search. We test this approach on several real-world data sets and measure the improvements with commonly used quality metrics. We find that this method 1) increases estimation accuracy and reliability, 2) reduces the model's volatility and, thus, is likely to increase its acceptance in practice, and 3) indicates upper limits for analogy-based estimation quality as measured by standard metrics.","1939-3520","","10.1109/TSE.2006.1599418","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=1599418","Software cost estimation;analogy-based cost estimation;project clustering;project features.","Cost function;Spatial databases;Resource management;Portfolios;Risk management;User interfaces;Yield estimation;Testing;Measurement standards;Human factors","software cost estimation;software process improvement;software reliability;software quality;project management;software metrics;software management","optimal project feature weights;analogy-based cost estimation;software project decisions;software quality metrics;software cost estimation;software process improvement;software reliability;software project management","","69","","22","","27 Feb 2006","","","IEEE","IEEE Journals"
"An empirical study of the correlations between function point elements [software metrics]","C. J. Lokan","Sch. of Comput. Sci., Australian Defence Force Acad., Canberra, ACT, Australia","Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)","6 Aug 2002","1999","","","200","206","Researchers and practitioners have noted correlations between the five types of elements in function point analysis. Practitioners exploit them; researchers have raised concerns about them. Two previous studies of the correlations between the elements have agreed in some findings, but differed on others. A large data set is analyzed here to gain further insight into the correlations. Two elements (inputs and logical files) are found to be correlated always, and one element (external files) is found to be generally uncorrelated with the others. Correlations are strongest in new development projects that use 4GLs. These results confirm some findings of previous researchers, and suggest explanations for differences between previous findings.","","0-7695-0403-5","10.1109/METRIC.1999.809741","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=809741","","Australia;Size measurement;Computer science;Data analysis;Data processing;Software measurement;Software standards;Software engineering","software cost estimation;software metrics","empirical study;function point elements;data set;4GLs;software metrics","","9","","8","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Software cost estimation using homeostasis mutation based differential evolution","S. P. Singh; A. Kumar","Department Computer Science and Engineering, Motilal Nehru National Institute of Technology Allahabad, UP, India; Department Computer Science and Engineering, Motilal Nehru National Institute of Technology Allahabad, UP, India","2017 11th International Conference on Intelligent Systems and Control (ISCO)","16 Feb 2017","2017","","","173","181","The main concern in the field of software development is estimation of the cost of software at its initial phase of development. The cost estimation usually depends upon the size of the project, which may use lines of code or function points as metrics. In COCOMO, for the accuracy of the cost estimation, cost factors need to be formulated in the individual development environment. In this paper, some new mutation strategies are proposed to improve the accuracy of cost estimation by modifying parameters of COCOMO using Homeostasis mutation based differential evolution(HMBDE). The proposed method adds one more vector named as Homeostasis mutation vector in the existing mutation vector to provide more bandwidth for selecting effective mutant solutions providing a wide search space for probable solution. The proposed approach provides more accurate solutions to guide the evolution. Performance of proposed algorithm is compared with software cost estimation models. The result verifies that our proposed HMBDE performs better than COCOMO based DE and PSO algorithm and other soft computing models.","","978-1-5090-2717-0","10.1109/ISCO.2017.7855976","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=7855976","Software Cost Estimation;Differential Evolution;Homeostasis;COCOMO Model","Software;Estimation;Mathematical model;Software algorithms;Computational modeling;Sociology;Statistics","evolutionary computation;software cost estimation;software metrics;vectors","software cost estimation;differential evolution;software development;software metrics;COCOMO;HMBDE;homeostasis mutation vector;soft computing","","3","","42","","16 Feb 2017","","","IEEE","IEEE Conferences"
"Optimal test distributions for software failure cost estimation","W. J. Gutjahr","Dept. of Stat., Oper. Res. & Comput. Sci., Wien Univ., Austria","IEEE Transactions on Software Engineering","6 Aug 2002","1995","21","3","219","228","We generalize the input domain based software reliability measures by E.C. Nelson (1973) and by S.N. Weiss and E.J. Weyuker (1988), introducing expected failure costs under the operational distribution as a measure for software unreliability. This approach incorporates in the reliability concept a distinction between different degrees of failure severity. It is shown how to estimate the proposed quantity by means of random testing, using the Importance Sampling technique from Rare Event Simulation. A test input distribution that yields an unbiased estimator with minimum variance is determined. The practical application of the presented method is outlined, and a detailed numerical example is given.<>","1939-3520","","10.1109/32.372149","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=372149","","Software testing;Cost function;Software reliability;Software measurement;Application software;Fault detection;Reliability theory;Monte Carlo methods;Discrete event simulation;Yield estimation","software cost estimation;software reliability;software metrics;program testing","optimal test distributions;software failure cost estimation;input domain based software reliability measures;expected failure costs;operational distribution;software unreliability;failure severity;random testing;Importance Sampling technique;Rare Event Simulation;test input distribution;unbiased estimator;minimum variance","","26","","23","","6 Aug 2002","","","IEEE","IEEE Journals"
"Enhanced software project management by application of metrics and cost estimation techniques","P. Fitzhenry; G. Gardiner","Manuf. Group, Cambridge Univ., UK; NA","IEE Colloquium on Project Management for Software Engineers","6 Aug 2002","1995","","","4/1","4/4","This paper describes elements of an improvement project within a collaborative partnership between the University of Cambridge and GPT Ltd, the UK's largest supplier of telecommunications solutions. The project aims to identify, formulate and collect a series of key measures to aid project planning and control through the provision of valid quantitative project data, and to stimulate software process improvement. In the paper the approach to metrics implementation is discussed and recently developed cost estimation techniques are introduced.","","","10.1049/ic:19951542","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=494938","","Project management;Software development management;Software economics;Software metrics","project management;software development management;software cost estimation;software metrics","software project management;software metrics;software cost estimation;collaborative partnership;GPT Ltd;telecommunications;project planning;software process improvement","","1","","","","6 Aug 2002","","","IET","IET Conferences"
"Beyond Total Cost of Ownership: Applying Balanced Scorecards to Open-Source Software","L. Lavazza",University of Insubria,"International Conference on Software Engineering Advances (ICSEA 2007)","10 Sep 2007","2007","","","74","74","Potential users of Open Source Software (OSS) face the problem of evaluating OSS, in order to assess the convenience of adopting OSS instead of commercial software, or to choose among different OSS proposals. Different metrics were defined, addressing different OSS properties: the Total Cost of Ownership (TCO) addresses the cost of acquiring, adapting and operating OSS; the Total Account Ownership (TAO) represents the degree of freedom of the user with respect to the technology provider; indexes like the Open Business Quality Rating (Open BQR) assess the quality of the software with respect to the user's needs. However, none of the proposed methods and models addresses all the aspects of OSS in a balanced and complete way. For this purpose, the paper explores the possibility of adapting the Balanced Scorecard (BSC) technique to OSS. A preliminary definition of the BSC for OSS is given and discussed.","","0-7695-2937-2","10.1109/ICSEA.2007.19","","https://ieeexplore-ieee-org.recursos.biblioteca.upc.edu/stamp/stamp.jsp?arnumber=4299954","","Open source software;Costs;Software engineering","public domain software;software cost estimation;software metrics","balanced scorecards;open-source software;total ownership cost;total account ownership;open business quality rating;OSS properties;BSC technique;software metrics;IT departments","","6","","6","","10 Sep 2007","","","IEEE","IEEE Conferences"
