DataBase,Title,Abstract,Keywords,Authors,Year,DocumentType,PublicationTitle,DOI,Affiliations,Publisher,Language,ISSN,ISBN
Compendex,High-performance parallel computations using python as high-level language,"High-performance and parallel computations have always represented a challenge in terms of code optimization and memory usage, and have typically been tackled with languages that allow a low-level management of resources, like Fortran, C and C++. Nowadays, most of the implementation effort goes into constructing the bookkeeping logic that binds together functionalities taken from standard libraries. Because of the increasing complexity of this kind of codes, it becomes more and more necessary to keep it well organized through proper software engineering practices. Indeed, in the presence of chaotic implementations, reasoning about correctness is difficult, even when limited to specific aspects like concurrency; moreover, due to the lack in flexibility of the code, making substantial changes for experimentation becomes a grand challenge. Since the bookkeeping logic only accounts for a tiny fraction of the total execution time, we believe that for such a task it can be afforded to introduce an overhead due to a high-level language. We consider Python as a preliminary candidate with the intent of improving code readability, flexibility and, in turn, the level of confidence with respect to correctness. In this study, the bookkeeping logic of SMP-MRRR, a C & Fortran highly optimized multi-core eigensolver, is ported to Python. We report here on the porting process and on the pros and cons of using a high-level language in a high-performance parallel library. © 2011 Springer-Verlag Berlin Heidelberg.",Code development - Code optimization - Code readability - High performance computation - Parallel Computation - Python - Software engineering practices - Standard libraries,"Masini, Stefano(1); Bientinesi, Paolo(1)",2011.0,Conference,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),10.1007/978-3-642-21878-1_66,"(1) RWTH Aachen, AICES, Aachen, Germany",Springer Verlag,English,03029743,
Compendex,Experience report: Haskell as a reagent - Results and observations on the use of Haskell in a python project,"In system administration, the languages of choice for solving automation tasks are scripting languages, owing to their flexibility, extensive library support and quick development cycle. Functional programming is more likely to be found in software development teams and the academic world. This separation means that system administrators cannot use the most effective tool for a given problem; in an ideal world, we should be able to mix and match different languages, based on the problem at hand. This experience report details our initial introduction and use of Haskell in a mature, medium size project implemented in Python. We also analyse the interaction between the two languages, and show how Haskell has excelled at solving a particular type of real-world problems. © 2010 ACM.",ganeti - Haskell - python - Real-world problem - Scripting languages - Software development teams - System administration - System administrators,"Pop, Iustin(1)",2010.0,Conference,"Proceedings of the ACM SIGPLAN International Conference on Functional Programming, ICFP",10.1145/1863543.1863595,"(1) Google Switzerland, Zürich, Switzerland",Association for Computing Machinery,English,,
Compendex,Experience report: Haskell as a reagent: Results and observations on the use of Haskell in a Python project,"In system administration, the languages of choice for solving automation tasks are scripting languages, owing to their flexibility, extensive library support and quick development cycle. Functional programming is more likely to be found in software development teams and the academic world. This separation means that system administrators cannot use the most effective tool for a given problem; in an ideal world, we should be able to mix and match different languages, based on the problem at hand. This experience report details our initial introduction and use of Haskell in a mature, medium size project implemented in Python. We also analyse the interaction between the two languages, and show how Haskell has excelled at solving a particular type of realworld problems. Copyright © 2010 ACM.",Ganeti - Haskell - Python - Real-world problem - Scripting languages - Software development teams - System administration - System administrators,"Pop, Iustin(1)",2010.0,Conference,ACM SIGPLAN Notices,10.1145/1932681.1863595,"(1) Google, Switzerland",Association for Computing Machinery,English,15232867,
Compendex,A dynamic and service-oriented component model for python long-lived applications,"Dynamic runtime adaptations are a key feature for long-running applications. One of the most used languages for writing this kind of applications is Java, due to its reflection features, popularity and dynamism. However, as dynamic scripting languages (such as Python and Javascript) increase in popularity, it is desirable to be able to conceive long-running applications with them too. This paper introduces iPOPO and Pelix, a Python-based service-oriented component model and dynamic service platform respectively, which are inspired on two popular Java technologies for the development of long-running applications: the iPOJO component model and the OSGi Service Platform. To illustrate the approach, a usage of iPOPO and Pelix is presented on the context of mediation software. Copyright © 2012 ACM.",Component model - Dynamism - Java technologies - Long-running applications - Python - Runtime adaptation - Scripting languages - Service oriented components,"Calmant, Thomas(1,2); Americo, Joao Claudio(1); Gattaz, Olivier(2); Donsez, Didier(1); Gama, Kiev(3)",2012.0,Conference,CBSE'12 - Proceedings of the 15th ACM SIGSOFT Symposium on Component Based Software Engineering,10.1145/2304736.2304744,"(1) Université de Grenoble, INRIA/LIG SARDES Team, Grenoble, France; (2) IsandlaTech, Grenoble, France; (3) Recife Center for Advanced Studies and Systems (CESAR), Recife, Brazil",Association for Computing Machinery,English,,
Compendex,GNU library in python language applied to education in information security,"This work develops an open source library in Python with applications in academic settings, for educational purposes. It can also be used for general software development. It allows users to implement Number Theory applications commonly employed in Cryptography and Information System Security. Improvements in teaching quality, user software readability, and time savings at the encoding stage could be expected.",Information system security - Open-source libraries - Python - PYTHON language - Teaching quality - Theory applications,"Benaben, Alejandro(1); Lechtaler, Antonio Castro(1); Cipriano, Marcelo(2,3); Liporace, Julio(2); Arzubi, Alejandro Arroyo(2)",2010.0,Conference,"ICSIT 2010 - International Conference on Society and Information Technologies, Proceedings",,"(1) Universidad Tecnológica Nacional, Buenos Aires; C1179AAQ, Argentina; (2) Escuela Superior Técnica, IESE, Argentina; (3) Instituto Fátima, Argentina","International Institute of Informatics and Systemics, IIIS",English,,
Compendex,The python computer vision framework,"PyCVF is an open source framework for computer vision and video-mining. It allows rapid development of applications and it provides standardized tools for common operations such as : browsing datasets, applying transformations to one dataset on-the-fly, computing features, indexing multimedia datasets, querying for nearest-neighbors, training a statistical model, or browsing the result in a 3d-space. PyCVF has a Python API, it also provides command line programs, QT Gui, and a web front-end. It can interacts nicely with other leading frameworks such as Weka, Orange, OpenCV, Django... © 2010 ACM.",Command line programs - Common operations - Nearest neighbors - Open source frameworks - python - Software frameworks - Statistical modeling - videomining,"Nouvel, Bertrand(1); Satoh, Shinlchi(2)",2010.0,Conference,MM'10 - Proceedings of the ACM Multimedia 2010 International Conference,10.1145/1873951.1874253,"(1) Japanese-French Laboratory for Informatics, LIA CNRS, NII, 2-1-2 Hitotsubashi, Chiyoda-ku, 101-8430 Tokyo, Japan; (2) National Institute of Informatics, NII, 2-1-2 Hitotsubashi, Chiyoda-ku, 101-8430 Tokyo, Japan",Association for Computing Machinery,English,,
Compendex,Enhancing PowerFactory Dynamic Models with Python for Rapid Prototyping,"DIgSILENT PowerFactory is among the most widely adopted power system analysis tools in research and industry. It provides a comprehensive library of device models and it allows users to define their own. Models for dynamic simulation can be defined in the DIgSILENT Simulation Language (DSL). When the functionality of DSL is insufficient, new DSL functions can be defined in C or C++. However, C and C++ can be challenging for inexperienced programmers. Furthermore, every time the C or C++ code is modified, it needs to be recompiled and PowerFactory needs to be restarted for the changes to take effect, which slows down the workflow, model development, and inhibits rapid prototyping. In this paper we present an open source library that allows users to call Python functions and methods from DSL with minimal effort. Python is a powerful and much easier to use language than C or C++. Additionally, Python programs do not need to be compiled. Furthermore, with this library PowerFactory does not need to be restarted every time the Python code is changed. To illustrate what can be accomplished with our library we present three example use cases related to load modeling, co-simulation, and fault detection based on machine learning. The examples show that it becomes straightforward to enhance DSL with Python and that sophisticated models can be produced with reduced effort using popular open source Python libraries. As a consequence, PowerFactory users gain access to enhanced modeling capabilities and user-friendliness, and a more speedy workflow, which is beneficial for rapid prototyping. © 2019 IEEE.",Cosimulation - Load modeling - Model development - Open-source libraries - Power system analysis tools - PowerFactory - Python - User friendliness,"Lopez, Claudio David(1); Cvetkovic, Milos(1); Palensky, Peter(1)",2019.0,Conference,IEEE International Symposium on Industrial Electronics,10.1109/ISIE.2019.8781432,"(1) Department of Electrical Sustainable Energy, Delft University of Technology, Netherlands",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,A tutorial on machine learning and data science tools with python,"In this tutorial, we will provide an introduction to the main Python software tools used for applying machine learning techniques to medical data. The focus will be on open-source software that is freely available and is cross platform. To aid the learning experience, a companion GitHub repository is available so that you can follow the examples contained in this paper interactively using Jupyter notebooks. The notebooks will be more exhaustive than what is contained in this chapter, and will focus on medical datasets and healthcare problems. Briefly, this tutorial will first introduce Python as a language, and then describe some of the lower level, general matrix and data structure packages that are popular in the machine learning and data science communities, such as NumPy and Pandas. From there, we will move to dedicated machine learning software, such as SciKit-Learn. Finally we will introduce the Keras deep learning and neural networks library. The emphasis of this paper is readability, with as little jargon used as possible. No previous experience with machine learning is assumed. We will use openly available medical datasets throughout. © Springer International Publishing AG 2016.",Cross-platform - Healthcare problems - Learning experiences - Machine learning software - Machine learning techniques - Medical data sets - Python - Science community,"Bloice, Marcus D.(1); Holzinger, Andreas(1)",2016.0,Book Chapter,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),10.1007/978-3-319-50478-0_22,"(1) Holzinger Group HCI-KDD, Institute for Medical Informatics, Statistics and Documentation, Medical University of Graz, Graz, Austria",Springer Verlag,English,03029743,
Compendex,Exploring decision-making processes in python,"The process by which norms are developed to become policies, the normative decision-making process, is not often explicit to stakeholders of Open Source Software (OSS) projects. Understanding the normative decision-making process is crucial for members if such projects are to evolve and succeed. In this paper, we investigated aspects of the normative decision-making processes of OSS development through the use of Python Enhancement Proposals (PEPs). We compared extracted process models with those that are advertised by the Python community to evaluate the extent to which those processes overlap. In addition, we assess members' involvement and contribution to these processes. Our work used structural and behavioral analysis techniques, and social network analysis metrics. We found that there were differences between the extracted processes and Python's advertised process, with the extracted processes being significantly more complex. These differences also extended to granular models used for managing social and technical aspects of the Python project. Furthermore, some key members were largely responsible for PEPs' success. Our extracted models could go a far way in helping the Python community to quickly understand decision-making processes in Python. © 2016 ACM.",Decision making process - Developers' involvement - Governance - Norms - Python enhancement proposals,"Keertipati, Smitha(1); Licorish, Sherlock A.(1); Savarimuthu, Bastin Tony Roy(1)",2016.0,Conference,ACM International Conference Proceeding Series,10.1145/2915970.2915993,"(1) Department of Information Science, University of Otago, PO Box 56, Dunedin; 9016, New Zealand",Association for Computing Machinery,English,,
Compendex,"Data structure based performance evaluation of emerging technologies - A comparison of Scala, Ruby, Groovy, and Python","Considering the accelerating rate at which software application development is progressing, emerging technologies like Scala, Ruby, and Groovy almost run in a neck to neck competition. This paper presents our study of these languages which are most commonly used in telecommunication/ middleware video streaming applications as compared to the long standing Python technology. © 2012 IEEE.",Emerging technologies - Groovy - Performance - Python - Scala - Software applications - Structure-based - Video Streaming Applications,"Bhat, Miti S.(1); Nair, Deepthi G.(1); Bansal, Devyani(1); Vaishnavi, J.(1)",2012.0,Conference,"2012 CSI 6th International Conference on Software Engineering, CONSEG 2012",10.1109/CONSEG.2012.6349515,"(1) Infosys Limited, Bangalore, India",IEEE Computer Society,English,,
Compendex,Lean python: Learn just enough python to build useful tools,"Learn only the essential aspects of Python without cluttering up your mind with features you may never use. This compact book is not a ""best way to write code"" type of book; rather, the author goes over his most-used functions, which are all you need to know as a beginner and some way beyond. Lean Python takes 58 Python methods and functions and whittles them down to 15: as author Paul Gerrard says, ""I haven’t found a need for the rest."" What You’ll Learn • Discover lean Python and how to learn just enough to build useful tools • Use Python objects, program structure, I/O, modules and more • Handle errors and exceptions • Test your code • Access the Web; do searching; and persist data Who This Book Is For This book is aimed at three categories of reader: The experienced programmer - if you already know a programming language, this book gives you a shortcut to understanding the Python language and some of its design philosophy. You work in IT and need a programming primer - you might be a tester who needs to have more informed technical discussions with programmers. Working through the examples will help you to appreciate the challenge of good programming. First-timer - you want a first book on programming that you can assimilate quickly to help you decide whether programming is for you. © 2016 by Paul Gerrard.",Design philosophy - Program structures - PYTHON language - Three categories,"Gerrard, Paul(1)",2016.0,Book,Lean Python: Learn Just Enough Python to Build Useful Tools,10.1007/978-1-4842-2385-7,"(1) Maidenhead, Berkshire, United Kingdom",Apress Media LLC,English,,
Compendex,Squeak Makes a Good Python Debugger Bringing Other Programming Languages Into Smalltalk's Tools,"Interactive debuggers are indispensable in many software development scenarios. However, they are often hard to extend and more importantly, their capabilities are limited to an application programming interface (api) provided by the runtime executing the corresponding programming language. We propose an approach that allows to use the live tools of a Smalltalk environment for other programming languages. The approach is based on interpreter-level composition, ultimately making a full-fledged integrated development environment (ide) part of the language execution process. This allows to directly control interpreters of foreign languages from Smalltalk. It also enables tool reuse and provides the ability to rapidly build new tools. We demonstrate how we have combined Squeak/Smalltalk and PyPy's Python implementation. We then reused Squeak's debugger, so that it enables edit-And-continue style debugging of Python applications-which is currently not supported by Python's PDB or any Python ide, but which has proven to be invaluable in many debugging scenarios. © 2017 ACM.",Debuggers - Development scenarios - Execution process - Foreign language - Ides - Integrated development environment - Python - Smalltalk,"Niephaus, Fabio(1); Felgentreff, Tim(1); Pape, Tobias(1); Hirschfeld, Robert(1)",2017.0,Conference,ACM International Conference Proceeding Series,10.1145/3079368.3079402,"(1) Hasso Plattner Institute, University of Potsdam, Potsdam, Germany",Association for Computing Machinery,English,,
Compendex,Python accelerators for high-performance computing,"Python became the preferred language for teaching in academia, and it is one of the most popular programming languages for scientific computing. This wide popularity occurs despite the weak performance of the language. This weakness is the motivation that drives the efforts devoted by the Python community to improve the performance of the language. In this article, we are following these efforts while we focus on one specific promised solution that aims to provide high-performance and performance portability for Python applications. © 2017, Springer Science+Business Media, LLC, part of Springer Nature.",High performance computing - Just-in-time compilation - Numba - Performance portability - Python,"Marowka, Ami(1)",2018.0,Journal,Journal of Supercomputing,10.1007/s11227-017-2213-5,"(1) Parallel Research Lab, Jerusalem; 52900, Israel",Springer New York LLC,English,09208542,
Compendex,Python based 3-Axis CNC plotter,This paper discusses on an open source python based three-axis CNC system. Python being one of the easiest languages to understand exempts the user from requiring extreme programming skills to amend the code for personal use. This paper features a novel way of directly importing the CAD file into the system without the use of any G-code parser. This system is economical as it utilizes Arduino UNO board as a signal generator without compromising on the performance of the system. © 2016 IEEE.,Arduino - Cnc softwares - Learning tool - Motion controller - Python,"Shivakumar, Tekumatla(1); Sravan, Manne Sai(1); Selvajyothi, K.(1)",2016.0,Conference,"PECON 2016 - 2016 IEEE 6th International Conference on Power and Energy, Conference Proceeding",10.1109/PECON.2016.7951672,"(1) Mechanical (Design and Manufacturing) Engineering, IIITDM Kancheepuram, Chennai, India",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Tracing dynamic features in Python programs,"Recent years have seen a number of proposals for adding (retrofitting) static typing to dynamic programming languages, a natural consequence of their growing popularity for non-toy applications across a multitude of domains. These proposals often make assumptions about how programmers write code, and in many cases restrict the way the languages can be used. In the context of Python, this paper describes early results from trace-based collection of run-time data about the use of built-in language features which are inherently hard to type, such as dynamic code generation. The end goal of this work is to facilitate static validation tooling for Python, in particular retrofitting of type systems. Copyright is held by the author/owner(s). Publication rights licensed to ACM.",Dynamic code generation - Dynamic features - Dynamic languages - Language features - Natural consequences - Open sources - Python - Run-time data,"Åkerblom, Beatrice(1); Stendahl, Jonathan(1); Tumlin, Mattias(1); Wrigstad, Tobias(2)",2014.0,Conference,"11th Working Conference on Mining Software Repositories, MSR 2014 - Proceedings",10.1145/2597073.2597103,"(1) Stockholm University, Sweden; (2) Uppsala University, Sweden","Association for Computing Machinery, Inc",English,,
Compendex,Medical image processing using python and open cv,"This paper presents the implementation of the Python programming language and the Open CV library in medical image processing. Medical images play an important role in identifying diseases and detecting whether organs are functioning properly. Image processing related to medical images is an active research field where various techniques are used to facilitate diagnosis and various image processing techniques can be used. In this study, image processing was performed including image preprocessing, histogram equalization, smoothening, erosion, and dilation. The use of python was chosen because this programming language is open source with a lot of available resources. The open CV library is also available free of charge and provides tons of image processing functions. The software can also be installed in a small Raspberry Pi computer and low electrical power usage making it very suitable as an efficient resource of the medical image processing system. © Published under licence by IOP Publishing Ltd.",Electrical power - Histogram equalizations - Image preprocessing - Image processing functions - Image processing technique - Medical image processing systems - Open cv libraries - Python programming language,"Widodo, C.E.(1); Adi, K.(1); Gernowo, R.(1)",2020.0,Conference,Journal of Physics: Conference Series,10.1088/1742-6596/1524/1/012003,"(1) Department of Physics, Faculty of Science and Mathematics Diponegoro University, Semarang, Indonesia",Institute of Physics Publishing,English,17426588,
Compendex,Static and dynamic method unboxing for python,"The Python programming language supports object-oriented programming using a simple and elegant model that treats member variables, methods, and various metadata as instances of a single kind of 'attribute'. While this allows a simple implementation of an interpreter that supports advanced metaprogramming features, it can inhibit the performance of certain very common special cases. This paper deals with the optimization of code that loads and then calls object methods. We modify Python's compiler to emit special bytecode sequences for load/call pairs on object attributes to avoid unnecessary allocation of method objects. This can result in considerable speedups, but may cause slowdowns at call sites that refer to builtin functions or other special attributes rather than methods. We therefore extend this static compile-time approach by a dynamic runtime quickening scheme that falls back to the generic load/call sequence at such call sites. The experimental evaluation of dynamic unboxing shows speedups of up to 8% and rare slowdowns caused by as yet unresolved excessive instruction cache misses. A comparison with a common manual optimization of method calls in Python programs shows that our automatic method is not as powerful but more widely applicable. © Gesellschaft für Informatik, Bonn 2013.",Automatic method - Built-in functions - Dynamic method - Experimental evaluation - Instruction cache miss - Meta Programming - Object attributes - Python programming language,"Barany, Gergö(1)",2013.0,Conference,"Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)",,"(1) Institute of Computer Languages (E185), Vienna University of Technology, Argentinierstraße 8, Vienna; 1040, Austria",Gesellschaft fur Informatik (GI),English,16175468,
Compendex,A Python extension for the massively parallel multiphysics simulation framework waLBerla,"We present a Python extension to the massively parallel HPC simulation toolkit waLBerla. waLBerla is a framework for stencil based algorithms operating on block-structured grids, with the main application field being fluid simulations in complex geometries using the lattice Boltzmann method. Careful performance engineering results in excellent node performance and good scalability to over 400,000 cores. To increase the usability and flexibility of the framework, a Python interface was developed. Python extensions are used at all stages of the simulation pipeline: they simplify and automate scenario setup, evaluation, and plotting. We show how our Python interface outperforms the existing text-file-based configuration mechanism, providing features like automatic nondimensionalization of physical quantities and handling of complex parameter dependencies. Furthermore, Python is used to process and evaluate results while the simulation is running, leading to smaller output files and the possibility to adjust parameters dependent on the current simulation state. C++ data structures are exported such that a seamless interfacing to other numerical Python libraries is possible. The expressive power of Python and the performance of C++ make development of efficient code with low time effort possible. © 2015 Taylor & Francis.",Configuration mechanisms - High performance computing - Lattice Boltzmann method - Multiphysics simulations - Nondimensionalization - Performance engineering - Python - Seamless interfacing,"Bauer, Martin(1); Schornbaum, Florian(1); Godenschwager, Christian(1); Markl, Matthias(1); Anderl, Daniela(1); Köstler, Harald(1); Rüde, Ulrich(1)",2016.0,Journal,"International Journal of Parallel, Emergent and Distributed Systems",10.1080/17445760.2015.1118478,"(1) Department of Computer Science 10 System Simulation, Friedrich-Alexander-Universität Erlangen-Nürnberg, Erlangen, Germany",Taylor and Francis Ltd.,English,17445760,
Compendex,The fast azimuthal integration Python library: PyFAI,"pyFAI is an open-source software package designed to perform azimuthal integration and, correspondingly, two-dimensional regrouping on area-detector frames for small-and wide-angle X-ray scattering experiments. It is written in Python (with binary submodules for improved performance), a language widely accepted and used by the scientific community today, which enables users to easily incorporate the pyFAI library into their processing pipeline. This article focuses on recent work, especially the ease of calibration, its accuracy and the execution speed for integration.",Area detectors - Execution speed - Geometry calibration - GPU programming - Powder diffraction - Python - Scientific community - Small and wide angle x ray scatterings,"Ashiotis, Giannis(1); Deschildre, Aurore(1); Nawaz, Zubair(2); Wright, Jonathan P.(1); Karkoulis, Dimitrios(1); Picca, Frédéric Emmanuel(3); Kieffer, Jérôme(1)",2015.0,Journal,Journal of Applied Crystallography,10.1107/S1600576715004306,"(1) European Synchrotron Radiation Facility, 71 Avenue des Martyrs, Grenoble; 38000, France; (2) SESAME, PO Box 7, Allan; 19252, Jordan; (3) Synchrotron Soleil, L'Orme des Merisiers, Saint-Aubin; 91190, France","International Union of Crystallography, 5 Abbey Square, Chester, CH1 2HU, United Kingdom",English,00218898,
Compendex,PyPLT: Python Preference Learning Toolbox,"There is growing evidence suggesting that subjective values such as emotions are intrinsically relative and that an ordinal approach is beneficial to their annotation and analysis. Ordinal data processing yields more reliable, valid and general predictive models, and preference learning algorithms have shown a strong advantage in deriving computational models from such data. To enable the extensive use of ordinal data processing and preference learning, this paper introduces the Python Preference Learning Toolbox. The toolbox is open source, features popular preference learning algorithms and methods, and is designed to be accessible to a wide audience of researchers and practitioners. The toolbox is evaluated with regards to both the accuracy of its predictive models across two affective datasets and its usability via a user study. Our key findings suggest that the implemented algorithms yield accurate models of affect while its graphical user interface is suitable for both novice and experienced users. © 2019 IEEE.",Computational model - Models of affects - Open sources - Ordinal annotation - Predictive models - Preference learning - Python - User study,"Camilleri, Elizabeth(1); Yannakakis, Georgios N.(1); Melhart, David(1); Liapis, Antonios(1)",2019.0,Conference,"2019 8th International Conference on Affective Computing and Intelligent Interaction, ACII 2019",10.1109/ACII.2019.8925482,"(1) Institute of Digital Games, University of Malta, Msida, Malta",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,SysPy: Using python for processor-centric SoC design,"Although software engineers have high performance algorithms that could be implemented power-efficiently as embedded Systems on Chip (SoC) with modem FPGAs, there is still no easy path for them to a hardware realization, mainly due to the lack of appropriate design tools. We present an overview of a tool we have developed to boost the productivity of processor-centric SoC designs for FPGAs. Our tool called SysPy (System Python) exploits the strengths of the popular Python scripting language and acts as a ""glue software"" between mature HDLs, ready-to-use VHDL components and programmable processor soft IP cores. SysPy can be used to: (i) describe hardware components in Python that the tool will automatically translate to correct high quality VHDL, (ii) build top-level structural descriptions of SoCs based on components that are defined in Python, VHDL or pre-synthesized netlist files, (iii) implement without any user effort all the steps needed to take the user's C code for a programmable processor soft IP core and automatically produce a synthesizable VHDL description for the targeted Xilinx FPGA device. The top-level SoC description is in Python, facilitating Hw/Sw re-partitioning and efficient iterative design for SoC performance tuning. ©2010 IEEE.",High performance algorithms - HW/SW Codesign - Programmable processors - Python - Python scripting languages - Scripting languages - Structural descriptions - SysPy,"Logaras, Evangelos(1); Manolakos, Elias S.(1)",2010.0,Conference,"2010 IEEE International Conference on Electronics, Circuits, and Systems, ICECS 2010 - Proceedings",10.1109/ICECS.2010.5724624,"(1) Department of Informatics and Telecommunications, National and Kapodistrian University of Athens, Greece",IEEE Computer Society,English,,
Compendex,Foundations of agile python development,"The agile development movement represents the latest advances in tools and techniques intended to boost developer productivity. Programming language-agnostic, this movement is capturing the attention of developers of all disciplines, and is particularly prevalent in cutting-edge open source communities such as Python and Ruby. This is the first book to apply these sought after principles to Python developers, introducing both the tools and techniques built and supported by the Python community. Authored by Jeff Younker, a well-known member of Python's agile community who is perhaps best known for his creation of a popular Python testing framework, this book is sure to be a hit among readers who may have reached their limits of knowledge regarding the Python language, yet are seeking to improve their understanding of how sound processes can boost productivity to unparalleled heights. Copyright © 2008 by Jeff Younker.",Agile development - Cutting edges - Open source communities - PYTHON language - Testing framework - Tools and techniques,"Younker, Jeff",2008.0,Book,Foundations of Agile Python Development,10.1007/978-1-4302-0635-4,,Apress Media LLC,English,,1590599810
Compendex,Efficient multi-objective calibration of a computationally intensive hydrologic model with parallel computing software in Python,"With enhanced data availability, distributed watershed models for large areas with high spatial and temporal resolution are increasingly used to understand water budgets and examine effects of human activities and climate change/variability on water resources. Developing parallel computing software to improve calibration efficiency has received growing attention of the watershed modeling community as it is very time demanding to run iteratively complex models for calibration. In this research, we introduce a Python-based parallel computing package, PP-SWAT, for efficient calibration of the Soil and Water Assessment Tool (SWAT) model. This software employs Python, MPI for Python (mpi4py) and OpenMPI to parallelize A Multi-method Genetically Adaptive Multi-objective Optimization Algorithm (AMALGAM), allowing for simultaneously addressing multiple objectives in calibrating SWAT. Test results on a Linux computer cluster showed that PP-SWAT can achieve a speedup of 45-109 depending on model complexity. Increasing the processor count beyond a certain threshold does not necessarily improve efficiency, because intensified resource competition may result in an I/O bottleneck. The efficiency achieved by PP-SWAT also makes it practical to implement multiple parameter adjustment schemes operating at different scales in affordable time, which helps provide SWAT users with a wider range of options of parameter sets to choose from for model(s) selection. PP-SWAT was not designed to address errors associated with other sources (e.g. model structure) and cautious supervision of its power should be exercised in order to attain physically meaningful calibration results. © 2013 Elsevier Ltd.",Evolutionary multiobjective optimization - High performance computers - Parallel processing - Parameter calibration - Soil and Water assessment tools,"Zhang, Xuesong(1); Beeson, Peter(2); Link, Robert(1); Manowitz, David(1); Izaurralde, Roberto C.(1); Sadeghi, Ali(2); Thomson, Allison M.(1); Sahajpal, Ritvik(3); Srinivasan, Raghavan(4); Arnold, Jeffrey G.(5)",2013.0,Journal,Environmental Modelling and Software,10.1016/j.envsoft.2013.03.013,"(1) Joint Global Change Research Institute, Pacific Northwest National Laboratory, University of Maryland, College Park, MD 20740, United States; (2) Agricultural Research Service, United Stated Department of Agriculture, Beltsville, MD 20705, United States; (3) Department of Geographical Sciences, University of Maryland, College Park, MD 20740, United States; (4) Spatial Sciences Laboratory in the Department of Ecosystem Science and Management, Texas A andM University, College Stations, TX 77845, United States; (5) Grassland, Soil and Water Research Laboratory USDA-ARS, Temple, TX 76502, United States",Elsevier Ltd,English,13648152,
Compendex,"Pyo, the python DSP toolbox","This paper introduces pyo, a python module dedicated to the digital processing of sound. This audio engine distinguishes itself from other alternatives by being natively integrated to a common general programming language. This integration allows incorporating audio processes quickly to other pro- gramming tasks, like mathematical computations, network communications or graphical interface programming. We will expose the main features of the library as well as the different contexts of use where pyo can be of a great benefit to composers and audio software developers. © 2016 Copyright held by the owner/author(s).",Audio engines - Audio software - Graphical interface - Mathematical computation - Network communications - Python,"Bélanger, Olivier(1)",2016.0,Conference,MM 2016 - Proceedings of the 2016 ACM Multimedia Conference,10.1145/2964284.2973804,"(1) Faculty of Music, University of Montreal, 200 rue Vincent d'Indy, Montréal; QC, Canada","Association for Computing Machinery, Inc",English,,
Compendex,"Performance analysis of parallel master-slave Evolutionary strategies (μ,λ) model python implementation for CPU and GPGPU","Evolutionary strategies is a heuristic, guided-search based evolutionary algorithm, widely used as optimization technique for computationally intensive problems. Python is a high-level programming language known for code readability, reusability and the ease of use, making it preferable choice for quick and robust software development, although it is lacking in performance and concurrency area. Emerging technologies such as Anaconda Accelerate Python compiler attempt to combine Python's ease of use with both declarative and explicit parallelization and high performance in computationally intensive problems. In this paper an example of master - slave parallel Evolutionary strategy ES(μ,λ) implementation in Python is given, and its performance on CPU and GPU are analyzed. © 2014 MIPRO.",Computationally intensive problems - Evolutionary strategies - Explicit parallelization - High-level programming language - Multi-threading - Optimization techniques - Python-Anaconda - Test functions,"Zubanovic, D.(1); Hidic, A.(1); Hajdarevic, A.(1); Nosovic, N.(1); Konjicija, S.(1)",2014.0,Conference,"2014 37th International Convention on Information and Communication Technology, Electronics and Microelectronics, MIPRO 2014 - Proceedings",10.1109/MIPRO.2014.6859822,"(1) Faculty of Electrical Engineering, University of Sarajevo, Sarajevo, Bosnia and Herzegovina",IEEE Computer Society,English,,
Compendex,UPy: A ubiquitous CG python API with biological-modeling applications,"The uPy Python extension module provides a uniform abstraction of the APIs of several 3D computer graphics programs (called hosts), including Blender, Maya, Cinema 4D, and DejaVu. A plug-in written with uPy can run in all uPy-supported hosts. Using uPy, researchers have created complex plug-ins for molecular and cellular modeling and visualization. uPy can simplify programming for many types of projects (not solely science applications) intended for multihost distribution. It's available at http://upy.scripps.edu. The first featured Web extra is a video that shows interactive analysis of a calcium dynamics simulation. YouTube URL: http://youtu.be/wvs-nWE6ypo. The second featured Web extra is a video that shows rotation of the HIV virus. YouTube URL: http://youtu.be/vEOybMaRoKc. © 2012 IEEE.",3D molecular visualizations - Blender - Cinema 4D - Maya - Python - Scientific data visualization - Software plug-ins,"Autin, Ludovic(1); Johnson, Graham(2); Hake, Johan(2); Olson, Arthur(1); Sanner, Michel(1)",2012.0,Journal,IEEE Computer Graphics and Applications,10.1109/MCG.2012.93,"(1) Scripps Research Institute's, Molecular Graphics Laboratory, United States; (2) Bioengineering Department, University of California, San Diego, United States",IEEE Computer Society,English,02721716,
Compendex,Empirical study of python call graph,"In recent years, the extensive application of the Python language has made its analysis work more and more valuable. Many static analysis algorithms need to rely on the construction of call graphs. In this paper, we did a comparative empirical analysis of several widely used Python static call graph tools both quantitatively and qualitatively. Experiments show that the existing Python static call graph tools have a large difference in the construction effectiveness, and there is still room for improvement. © 2019 IEEE.",Call graphs - Empirical studies - Python - Qualitative - Quantitative,"Yu, Li(1)",2019.0,Conference,"Proceedings - 2019 34th IEEE/ACM International Conference on Automated Software Engineering, ASE 2019",10.1109/ASE.2019.00160,"(1) Nanjing University, China",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Smote-variants: A python implementation of 85 minority oversampling techniques,"Imbalanced classification problems are definitely around He and Gracia (2009), and a successful approach to avoid the overfitting of majority classes is the synthetic generation of minority training samples Fernandez et al. (2018). Despite the large number of minority oversampling algorithms proposed, open source implementations are available for only a handful of techniques. The package smote-variants provides a Python implementation of 85 oversampling techniques to boost the applications and development in the field of imbalanced learning. The source code, documentation and examples are available in the GitHub repository http://github.com/gykovacs/smote_variants/. © 2019 Elsevier B.V.",Imbalanced Learning - Over sampling - Python - SMOTE - Smote-variants,"Kovács, György(1)",2019.0,Journal,Neurocomputing,10.1016/j.neucom.2019.06.100,"(1) Analytical Minds Ltd., Hungary",Elsevier B.V.,English,09252312,
Compendex,Optics simulations: A Python workshop,"Numerical simulations allow teachers and students to indirectly perform sophisticated experiments that cannot be realizable otherwise due to cost and other constraints. During the past few decades there has been an explosion in the development of numerical tools concurrently with open source environments such as Python software. This availability of open source software offers an incredible opportunity for advancing teaching methodologies as well as in research. More specifically it is possible to correlate theoretical knowledge with experimental measurements using ""virtual"" experiments. We have been working on the development of numerical simulation tools using the Python program package and we have concentrated on geometric and physical optics simulations. The advantage of doing hands-on numerical experiments is that it allows the student learner to be an active participant in the pedagogical/learning process rather than playing a passive role as in the traditional lecture format. Even in laboratory classes because of constraints of space, lack of equipment and often-large numbers of students, many students play a passive role since they work in groups of 3 or more students. Furthermore these new tools help students get a handle on numerical methods as well simulations and impart a ""feel"" for the physics under investigation. © 2017 ICO, IEEE, OSA, SPIE.",Active Learning - Laboratory class - Numerical experiments - Numerical tools - Optics simulations - Program packages - Python programming language - Teaching methodologies,"Ghalila, H.(1,2); Ammar, A.(1,2); Varadharajan, S.(4); Majdi, Y.(1,2); Zghal, M.(2,5); Lahmar, S.(1,2); Lakshminarayanan, V.(3)",2017.0,Conference,Proceedings of SPIE - The International Society for Optical Engineering,10.1117/12.2268377,"(1) Laboratoire de Spectroscopie Atomique, Moléculaire et Applications, Faculté des Sciences de Tunis, Université de Tunis El Manar, Tunis, Tunisia; (2) Société Tunisienne d'Optique, Tunis, Tunisia; (3) School of Optometry and Vision Science, University of Waterloo, Waterloo; ON; N2L 3G1, Canada; (4) Brien Holden Institute of Optometry and Vision Science, Prof. Brien Holden Eye Research Center, L v Prasad Eye Institute, Hyderabad, India; (5) University of Carthage, Engineering School of Communication of Tunis (sup'Com), Gres'Com Laboratory, Ghazala Technopark, Ariana; 2083, Tunisia",SPIE,English,0277786X,
Compendex,Arpeggio: A flexible PEG parser for Python,"Arpeggio is a recursive descent parser with full backtracking and memoization based on PEG (Parsing Expression Grammar) grammars. This category of parsers is known as packrat parsers. It is implemented in the Python programming language and works as a grammar interpreter. Arpeggio has a very good support for error reporting, debugging, and grammar and parse tree visualization. It is used in industrial environments and teaching Domain-Specific Languages course at the Faculty of Technical Sciences in Novi Sad. Arpeggio is a foundation of a high-level DSL meta-language and tool - textX. It is a free and open-source software available at GitHub under MIT license. © 2015 Elsevier B.V. All rights reserved.",Domain specific languages - Free and open source softwares - Packrat - Parser - Parsing expression grammars - Python - Python programming language - TextX,"Dejanovi, I.(1); Milosavljevi, G.(1); Vaderna, R.(1)",2016.0,Journal,Knowledge-Based Systems,10.1016/j.knosys.2015.12.004,"(1) Faculty of Technical Sciences, University of Novi Sad, Serbia",Elsevier B.V.,English,09507051,
Compendex,Analysis of mutation operators for the Python language,"A mutation introduced into a source code of a dynamically typed program can generate an incompetent mutant. Such a mutant manifests a typerelated error that cannot be detected before the mutant execution. To avoid this problem, a program mutation can be provided at run-time, or incompetent mutants should be automatically detected and eliminated. We showed that the latter solution can effectively be applied providing selected mutation operators. This paper discusses mutation operators to be used for mutation testing of Python programs. Standard and object-oriented mutation operators were applied to the Python language. Python-related operators dealing with decorators and collection slices were proposed. The operators were implemented in MutPy, the tool for mutation testing of Python programs, and experimentally evaluated. © Springer International Publishing Switzerland 2014.",Mutation operators - Mutation testing - Object oriented - Python - PYTHON language - Runtimes - Source codes,"Dereziska, Anna(1); Halas, Konrad(1)",2014.0,Conference,Advances in Intelligent Systems and Computing,10.1007/978-3-319-07013-1_15,"(1) Institute of Computer Science, Warsaw University of Technology, Nowowiejska 15/19, Warsaw; 00-665, Poland",Springer Verlag,English,21945357,
Compendex,A Python framework for microphone array data processing,"Acoular is an open source object-oriented Python package for microphone array data processing. It supports various methods for sound source characterization and mapping. The background of these methods, which rely on synchronously captured microphone signals, is shortly introduced, and the requirements for a software that implements these methods are discussed. The object-oriented design based on Python allows for easy-to-use scripting and graphical user interfaces, the practical combination with other data handling and scientific computing libraries, and the possibility to extend the software by implementing new processing methods with minimal effort. Built-in result caching and fast C++ based parallelized implementation of core routines is explained. Together with data handling procedures that can accommodate the huge amounts of measured data needed, this makes the application of Acoular to industrial-scale problems possible. Basic examples of Acoular use and extension are given. © 2016 Elsevier Ltd",Industrial scale - Microphone array data - Microphone arrays - Microphone signals - Object oriented - Object oriented design - Processing method - Python,"Sarradj, Ennes(1); Herold, Gert(2)",2017.0,Journal,Applied Acoustics,10.1016/j.apacoust.2016.09.015,"(1) Institute of Fluid Mechanics and Engineering Acoustics, Technische Universität Berlin, Berlin; 10587, Germany; (2) Chair of Technical Acoustics, Brandenburg University of Technology, Cottbus; 03046, Germany",Elsevier Ltd,English,0003682X,
Compendex,PSTM: Python software transactional memory,"TMs are becoming a mainstream parallel programming paradigm, but TM armed multicores are still not widely available and appropriate STMs for some popular languages like Python do not exist. These facts motivated as to develop our STM for Python (PSTM). In this paper, we firstly designed the PSTM architecture. Secondly, we implemented the PSTM prototype (PSTM-PT) which is based on Python Queue and Pipe mechanisms. Thirdly, we evaluated the PSTM-PT on the banking benchmarks and compared experimental results with previous theoretical results. The results presented in the paper are positive and stimulate follow-up work on PSTM. © 2014 IEEE.",,"Popovic, Miroslav(1); Kordic, Branislav(1)",2014.0,Conference,"2014 22nd Telecommunications Forum, TELFOR 2014 - Proceedings of Papers",10.1109/TELFOR.2014.7034600,"(1) Faculty of Technical Sciences, University of Novi Sad, Trg Dositeja Obradovica 6, Serbia",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,"PyGrav, a Python-based program for handling and processing relative gravity data","pyGrav is a Python-based open-source software dedicated to the complete processing of relative-gravity data. It is particularly suited for time-lapse gravity surveys where high precision is sought. Its purpose is to bind together single-task processing codes in a user-friendly interface for handy and fast treatment of raw gravity data from many stations of a network. The intuitive object-based implementation allows to easily integrate additional functions (reading/writing routines, processing schemes, data plots) related to the appropriate object (a station, a loop, or a survey). This makes pyGrav an evolving tool. Raw data can be corrected for tides and air pressure effects. The data selection step features a double table-plot graphical window with either manual or automatic selection according to specific thresholds on data channels (tilts, gravity values, gravity standard deviation, duration of measurements, etc.). Instrumental drifts and gravity residuals are obtained by least square analysis of the dataset. This first step leads to the gravity simple differences between a reference point and any point of the network. When different repetitions of the network are done, the software computes then the gravity double differences and associated errors. The program has been tested on two specific case studies: a large dataset acquired for the study of water storage changes on a small catchment in West Africa, and a dataset operated and processed by several different users for geothermal studies in northern Alsace, France. In both cases, pyGrav proved to be an efficient and easy-to-use solution for the effective processing of relative-gravity data. © 2016 Elsevier Ltd.",Air pressure effects - Automatic selection - Least square analysis - Object oriented - Python - Standard deviation - Time-variable gravity - User friendly interface,"Hector, Basile(1,2); Hinderer, Jacques(1)",2016.0,Journal,Computers and Geosciences,10.1016/j.cageo.2016.03.010,"(1) Institut de Physique du Globe de Strasbourg UMR 7516 CNRS/Université de Strasbourg, 5 rue Descartes, Strasbourg; 67084, France; (2) CNES/IRD/UJF-Grenoble 1/CNRS/G-INP, LTHE, UMR 5564, Grenoble; 38041, France",Elsevier Ltd,English,00983004,
Compendex,Python: An ecosystem for scientific computing,"As the relationship between research and computing evolves, new tools are required to not only treat numerical problems, but also to solve various problems that involve large datasets in different formats, new algorithms, and computational systems such as databases and Internet servers. Python can help develop these computational research tools by providing a balance of clarity and flexibility without sacrificing performance. © 2011 IEEE.",arrays - Computational researches - Computational system - Internet servers - Large datasets - Numerical problems - Programming environment - Python,"Pérez, Fernando(1); Granger, Brian E.(2); Hunter, John D.(3)",2011.0,Journal,Computing in Science and Engineering,10.1109/MCSE.2010.119,"(1) University of California, Berkeley, United States; (2) California Polytechnic State University, San Luis Obispo, United States; (3) TradeLink Securities, United States",IEEE Computer Society,English,15219615,
Compendex,Python to learn programming,"Today we have a lot of programming languages that can realize our needs, but the most important question is how to teach programming to beginner students. In this paper we suggest using Python for this purpose, because it is a programming language that has neatly organized syntax and powerful tools to solve any task. Moreover it is very close to simple math thinking. Python is chosen as a primary programming language for freshmen in most of leading universities. Writing code in python is easy. In this paper we give some examples of program codes written in Java, C++ and Python language, and we make a comparison between them. Firstly, this paper proposes advantages of Python language in relation to C++ and JAVA. Then it shows the results of a comparison of short program codes written in three different languages, followed by a discussion on how students understand programming. Finally experimental results of students' success in programming courses are shown. © IOP Publishing Ltd 2013.",Program code - Programming course - PYTHON language - Writing codes,"Bogdanchikov, A.(1); Zhaparov, M.(1); Suliyev, R.(1)",2013.0,Conference,Journal of Physics: Conference Series,10.1088/1742-6596/423/1/012027,"(1) Suleyman Demirel University, 1/1 Abylaikhan St., Kaskelen, Almaty, Kazakhstan",Institute of Physics Publishing,English,17426588,
Compendex,"Constraint network analysis (CNA): A python software package for efficiently linking biomacromolecular structure, flexibility, (thermo-)stability, and function","For deriving maximal advantage from information on biomacromolecular flexibility and rigidity, results from rigidity analyses must be linked to biologically relevant characteristics of a structure. Here, we describe the Python-based software package Constraint Network Analysis (CNA) developed for this task. CNA functions as a front-and backend to the graph-based rigidity analysis software FIRST. CNA goes beyond the mere identification of flexible and rigid regions in a biomacromolecule in that it (I) provides a refined modeling of thermal unfolding simulations that also considers the temperature-dependence of hydrophobic tethers, (II) allows performing rigidity analyses on ensembles of network topologies, either generated from structural ensembles or by using the concept of fuzzy noncovalent constraints, and (III) computes a set of global and local indices for quantifying biomacromolecular stability. This leads to more robust results from rigidity analyses and extends the application domain of rigidity analyses in that phase transition points (""melting points"") and unfolding nuclei (""structural weak spots"") are determined automatically. Furthermore, CNA robustly handles small-molecule ligands in general. Such advancements are important for applying rigidity analysis to data-driven protein engineering and for estimating the influence of ligand molecules on biomacromolecular stability. CNA maintains the efficiency of FIRST such that the analysis of a single protein structure takes a few seconds for systems of several hundred residues on a single core. These features make CNA an interesting tool for linking biomacromolecular structure, flexibility, (thermo-)stability, and function. CNA is available from http://cpclab.uni- duesseldorf.de/software for nonprofit organizations. © 2013 American Chemical Society.",Analysis softwares - Constraint network analysis - Hydrophobic tethers - Phase transition point - Protein engineering - Protein structures - Temperature dependence - Thermal unfolding,"Pfleger, Christopher(1); Rathi, Prakash Chandra(1); Klein, Doris L.(1); Radestock, Sebastian(1,2); Gohlke, Holger(1)",2013.0,Journal,Journal of Chemical Information and Modeling,10.1021/ci400044m,"(1) Institute for Pharmaceutical and Medicinal Chemistry, Department of Mathematics and Natural Sciences, Heinrich-Heine-University, Universitätsstr. 1, 40225, Düsseldorf, Germany; (2) Information Systems GmbH, Frankfurt am Main, Germany",American Chemical Society,English,15499596,
Compendex,Principles of development of product lifecycle management system for threaded connections based on the Python programming language,"The principles of the development of PLM-system for threaded connections of oil and gas equipment are described. In order to ensure efficiency, the PLM-system must be isomorphic to other complex systems and have their laws, in particular, the emergence and ""requisite variety"". The proposed system belongs to the class of hybrid multi-agent intelligent systems that combine various methods of knowledge representation and decision making. The system contains a knowledge base with inference rules, an inference engine, a code editor, simulation models of threaded connections, the results of their simulations, and other components. The knowledge base contains facts, in which the factors that affect the reliability and durability of threaded connections, are connected by cause-effect relations ""is the cause"" and ""is the effect"". Facts can have such properties as an information source, dependence of quantities, a simulation model, etc. The rules of inference allow you to get new facts from the knowledge base and simulation models. All system components or their software interfaces are developed in a high-level general-purpose programming language Python, which simplifies the implementation of the system and the integration of components with different types. In particular, any Python package can be easily connected to the system. Classes and individuals of ontology are declaratively described by Python classes and objects, attributes and relationships are Python-attributes. For easy editing, the system code is divided into parts, which are combined before execution. © Published under licence by IOP Publishing Ltd.",General-purpose programming language - Information sources - Multi-agent intelligent systems - Product lifecycle management systems - Python programming language - Reliability and durabilities - Software interfaces - Threaded connection,"Kopei, V.B.(1); Onysko, O.R.(1); Panchuk, V.G.(1)",2020.0,Conference,Journal of Physics: Conference Series,10.1088/1742-6596/1426/1/012033,"(1) Ivano-Frankivsk National Technical University of Oil and Gas, Department of Computerized Mechanical Engineering, Karpatska str., no. 15, Ivano-Frankivsk; 76019, Ukraine",Institute of Physics Publishing,English,17426588,
Compendex,High-level parallel software development with Python and BSP,"One of the main obstacles to a more widespread use of parallel computing in computational science is the difficulty of implementing, testing, and maintaining parallel programs. The combination of a simple parallel computation model, BSP, and a highlevel programming language, Python, simplifies these tasks significantly. It allows the rapid development facilities of Python to be applied to parallel programs, providing interactive development as well as interactive debugging of parallel programs.",Parallel programming - Parallel programs,"Hinsen, Konrad(1)",2003.0,Journal,Parallel Processing Letters,10.1142/S0129626403001434,"(1) Ctr. de Biophys. Molec. (CNRS), Rue Charles Sadron, 45071 Orléans Cedex 2, France",World Scientific Publishing Co. Pte Ltd,English,01296264,
Compendex,Qudi: A modular python suite for experiment control and data processing,"Qudi is a general, modular, multi-operating system suite written in Python 3 for controlling laboratory experiments. It provides a structured environment by separating functionality into hardware abstraction, experiment logic and user interface layers. The core feature set comprises a graphical user interface, live data visualization, distributed execution over networks, rapid prototyping via Jupyter notebooks, configuration management, and data recording. Currently, the included modules are focused on confocal microscopy, quantum optics and quantum information experiments, but an expansion into other fields is possible and encouraged. © 2017 The Authors",Configuration management - Framework - Hardware abstractions - Laboratory experiments - Measurement software - Modular - Python 3 - Structured environment,"Binder, Jan M.(1); Stark, Alexander(1,2); Tomek, Nikolas(1); Scheuer, Jochen(1); Frank, Florian(1); Jahnke, Kay D.(1); Müller, Christoph(1); Schmitt, Simon(1); Metsch, Mathias H.(1); Unden, Thomas(1); Gehring, Tobias(2); Huck, Alexander(2); Andersen, Ulrik L.(2); Rogers, Lachlan J.(1); Jelezko, Fedor(1,3)",2017.0,Journal,SoftwareX,10.1016/j.softx.2017.02.001,"(1) Institute for Quantum Optics, Ulm University, Albert-Einstein-Allee 11, Ulm; 89081, Germany; (2) Department of Physics, Technical University of Denmark, Fysikvej, Kongens Lyngby; 2800, Denmark; (3) Center for Integrated Quantum Science and Technology (IQst), Ulm University, 89081, Germany",Elsevier B.V.,English,,
Compendex,Enabling Empirical Research: A Corpus of Large-Scale Python Systems,"The Python programming language has been picking up traction in Industry for the past few years in virtually all application domains. Python is known for its high calibre and passionate community of developers. Empirical research on Python systems has potential to promote a healthy environment, where claims and beliefs held by the community are supported by data. To facilitate such research, a corpus of 132 open source python projects have been identified, basic information, quality as well as complexity metrics has been collected and organized into CSV files. Collectively, the list consists of 36, 635 python modules, 59, 532 classes, 253, 954 methods and 84, 892 functions. Projects in the selected list span various application domains including Web/APIs, Scientific Computing, Security and more. © 2020, Springer Nature Switzerland AG.",Complexity metrics - Corpus - Empirical research - Python - Quality metrics,"Omari, Safwan(1); Martinez, Gina(1)",2020.0,Conference,Advances in Intelligent Systems and Computing,10.1007/978-3-030-32523-7_49,"(1) Department of Computer and Mathematical Sciences, Lewis University, Romeoville; IL, United States",Springer,English,21945357,
Compendex,pybliometrics: Scriptable bibliometrics using a Python interface to Scopus,"We present a wrapper for the Scopus RESTful API written for Python 3. The wrapper allows users to access the Scopus database via user-friendly interfaces and can be used without prior knowledge of RESTful APIs. The package provides classes to interact with different Scopus APIs to retrieve information as diverse as citation counts, author information or document abstracts. Files are cached to speed up subsequent analysis. The package addresses all users of Scopus data, such as researchers working in Science of Science or evaluators. It facilitates reproducibility of research projects and enhances data integrity for researchers using Scopus data. © 2019 The Authors",Bibliometrics - Python - Python interfaces - Reproducibilities - Scientometrics - Scopus - Scopus database - User friendly interface,"Rose, Michael E.(1); Kitchin, John R.(2)",2019.0,Journal,SoftwareX,10.1016/j.softx.2019.100263,"(1) Max Planck Institute for Innovation and Competition, Germany; (2) Carnegie Mellon University, Department of Chemical Engineering, United States",Elsevier B.V.,English,,
Compendex,Finite element analysis about the properties of CFG-pile composite foundation based on parametric language PYTHON,"As an international general finite element analysis software, ABAQUS has super nonlinear analysis function and is playing an increasingly important role in the numerical calculation analysis of geotechnical engineering structures. CAE module of its own provides a certain amount of convenience for the beginners, but it is inadequate in the face of more complex geotechnical engineering problems. Based on parametric language PYTHON, using its modular model code, bypassing the CAE module, the ABAQUS finite element analysis calculated and analyzed the influence of ER on the CFG pile composite foundation settlement and pile side friction. Finite element analysis and the results show that: the process of ABAQUS finite element analysis, which is based on the parameter language PYTHON, is simple and has very high computational efficiency and accuracy in the analysis complex geotechnical engineering problems. © (2011) Trans Tech Publications, Switzerland.",CFG pile - Composite foundations - Finite element analysis software - Numerical calculation - PYTHON - Side friction,"Pan, Weidong(1); Gu, Renguo(1); Zhu, Ke(1); Lv, Yonggang(2)",2011.0,Conference,Advanced Materials Research,10.4028/www.scientific.net/AMR.320.20,"(1) College of Civil Engineering and Transportation, South China University of Technology, Guangzhou, China; (2) CCCC Highway Consultants CO., Ltd., Beijing, China","Trans Tech Publications, P.O. Box 1254, Clausthal-Zellerfeld, D-38670, Germany",English,10226680,
Compendex,Bash2py: A bash to Python translator,"Shell scripting is the primary way for programmers to interact at a high level with operating systems. For decades bash shell scripts have thus been used to accomplish various tasks. But Bash has a counter-intuitive syntax that is not well understood by modern programmers and is no longer adequately supported, making it now difficult to maintain. Bash also suffers from poor performance, memory leakage problems, and limited functionality which make continued dependence on it problematic. At the request of our industrial partner, we therefore developed a source-to-source translator, bash2py, which converts bash scripts into Python. Bash2py leverages the open source bash code, and the internal parser employed by Bash to parse any bash script. However, bash2py re-implements the variable expansion that occurs in Bash to better generate correct Python code. Bash2py correctly converts most Bash into Python, but does require human intervention to handle constructs that cannot easily be automatically translated. In our experiments on real-world open source bash scripts bash2py successfully translates 90% of the code. Feedback from our industrial partner confirms the usefulness of bash2py in practice. © 2015 IEEE.",Bash - Human intervention - Industrial partners - Leakage problems - Open sources - Python - scripting - Source-to-source translators,"Davis, Ian J.(1); Wexler, Mike(1); Zhang, Cheng(1); Holt, Richard C.(1); Weber, Theresa(1)",2015.0,Conference,"2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2015 - Proceedings",10.1109/SANER.2015.7081866,"(1) David Cheriton School of Computer Science, University of Waterloo, Waterloo; ON, Canada",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,SunPy - Python for solar physics,"This paper presents SunPy (version 0.5), a community-developed Python package for solar physics. Python, a free, cross-platform, general-purpose, high-level programming language, has seen widespread adoption among the scientific community, resulting in the availability of a large number of software packages, from numerical computation (NumPy, SciPy) and machine learning (scikit-learn) to visualization and plotting (matplotlib). SunPy is a data-analysis environment specializing in providing the software necessary to analyse solar and heliospheric data in Python. SunPy is open-source software (BSD licence) and has an open and transparent development workflow that anyone can contribute to. SunPy provides access to solar data through integration with the Virtual Solar Observatory (VSO), the Heliophysics Event Knowledgebase (HEK), and the HELiophysics Integrated Observatory (HELIO) webservices. It currently supports image data from major solar missions (e.g., SDO, SOHO, STEREO, and IRIS), time-series data from missions such as GOES, SDO/EVE, and PROBA2/LYRA, and radio spectra from e-Callisto and STEREO/SWAVES. We describe SunPys functionality, provide examples of solar data analysis in SunPy, and show how Python-based solar data-analysis can leverage the many existing tools already available in Python. We discuss the future goals of the project and encourage interested users to become involved in the planning and development of SunPy. © 2015 IOP Publishing Ltd.",High-level programming language - Numerical computations - Planning and development - Python - Scientific community - scientific Python - Solar physics - Virtual solar observatories,"Mumford, Stuart J.(1); Christe, Steven(2); Pérez-Suárez, David(3); Ireland, Jack(2,4); Shih, Albert Y.(2); Inglis, Andrew R.(2,5); Liedtke, Simon(6); Hewett, Russell J.(7); Mayer, Florian(8); Hughitt, Keith(9); Freij, Nabil(1); Meszaros, Tomas(10); Bennett, Samuel M.(1); Malocha, Michael(11); Evans, John(12); Agrawal, Ankit(13); Leonard, Andrew J.(14); Robitaille, Thomas P.(15); Mampaey, Benjamin(16); Campos-Rozo, Jose Iván(17); Kirk, Michael S.(2); The SunPy Community(17)",2015.0,Journal,Computational Science and Discovery,10.1088/1749-4699/8/1/014009,"(1) Solar Physics and Space Plasma Research Centre (SPRC), School of Mathematics and Statistics, University of Sheffield, Hounsfield Road, Sheffield; S3 7RH, United Kingdom; (2) NASA Goddard Space Flight Center, Greenbelt; MD, United States; (3) South African National Space Agency - Space Science, Hospital Street, Hermanus, Western Cape; 7200, South Africa; (4) ADNET Systems Inc., Mail Code 671.1, NASA Goddard Space Flight Center, Greenbelt; MD, United States; (5) Catholic University of America, Washington; DC, United States; (6) University of Bremen, Bibliothekstraße 1, Bremen; D-28359, Germany; (7) Department of Mathematics, Massachusetts Institute of Technology, 77 Massachusetts Ave, E17-317, Cambridge; MA, United States; (8) Vienna University of Technology, Karlsplatz 13, Vienna; A-1040, Austria; (9) Department of Cell Biology and Molecular Genetics, University of Maryland, College Park; MD, United States; (10) Masaryk University, Faculty of Informatics, Botanicka 68a, Brno, Czech Republic; (11) Humboldt State University, 1 Harpst St, Arcata; CA, United States; (12) Boston Python User Group, Boston; MA, United States; (13) Indian Institute of Technology, Bombay, India; (14) Department of Mathematics and Physics, Aberystwyth University, Physical Sciences Building, Aberystwyth; SY23 3BZ, United Kingdom; (15) Max-Planck-Institut für Astronomie, Königstuhl 17, Heidelberg; D-69117, Germany; (16) Royal Observatory of Belgium, Brussels, Belgium; (17) Observatorio Astronómico Nacional, Universidad Nacional de Colombia, Bogotá, D.C., Colombia",Institute of Physics Publishing,English,17494680,
Compendex,Development and debugging of information measurement and control systems for mobile robots with python dynamic language,"This paper presents some of the authors' experience in using Python dynamic language for development and debugging of information measurement and control systems for mobile robots. The new development methodologies are proposed. This methodology makes possible to modify MR on-board software with no need to reboot. Unlike the traditional architecture, where all software components are compiled into an immutable binary code, new approach will help to accelerate the development and provide abilities to debug and refine on-board control programs in the field. New approaches for control protocols are proposed.",Control protocols - Development methodology - Dynamic languages - Information measurement - On board softwares - Python - Software component - Traditional architecture,"Kirsanov, Kirill",2009.0,Conference,Annals of DAAAM and Proceedings of the International DAAAM Symposium,,,"Danube Adria Association for Automation and Manufacturing, DAAAM",English,17269679,
Compendex,A geant4-python interface: Development and its applications,"We present a Geant4-Python interface called ""Geant4Py"", which provides a set of Python modules for using Geant4 on Python. Also we show various applications using Geant4Py, including compile-free scripts, on-line histogramming analysis with ROOT, web applications, GUI applications and tools for physics validation, educational uses and medical simulation, discussing runtime performance which can be tuned between execution speed and interactivity for each use-case. These applications show the flexibility and usefulness of dynamic configuration of user applications using Python. ©2006 IEEE.",Medical simulation - Python - ROOT - Scripting,"Murakami, K.(1); Yoshida, H.(2)",2006.0,Conference,IEEE Nuclear Science Symposium Conference Record,10.1109/NSSMIC.2006.356115,"(1) High Energy Accelerator Research Organization (KEK), Tsukuba, Japan; (2) Naruto University of Education, Naruto, Japan",Institute of Electrical and Electronics Engineers Inc.,English,10957863,1424405610
Compendex,Nagini: A static verifier for python,"We present Nagini, an automated, modular verifier for statically-typed, concurrent Python 3 programs, built on the Viper verification infrastructure. Combining established concepts with new ideas, Nagini can verify memory safety, functional properties, termination, deadlock freedom, and input/output behavior. Our experiments show that Nagini is able to verify non-trivial properties of real-world Python code. © The Author(s) 2018.",Deadlock freedom - Functional properties - Input/output behaviors - Memory safety - Non-trivial - Python code - Real-world,"Eilers, Marco(1); Müller, Peter(1)",2018.0,Conference,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),10.1007/978-3-319-96145-3_33,"(1) Department of Computer Science, ETH Zurich, Zurich, Switzerland",Springer Verlag,English,03029743,
Compendex,Instrumentino: An open-source modular Python framework for controlling Arduino based experimental instruments,"Instrumentino is an open-source modular graphical user interface framework for controlling Arduino based experimental instruments. It expands the control capability of Arduino by allowing instruments builders to easily create a custom user interface program running on an attached personal computer. It enables the definition of operation sequences and their automated running without user intervention. Acquired experimental data and a usage log are automatically saved on the computer for further processing. The use of the programming language Python also allows easy extension. Complex devices, which are difficult to control using an Arduino, may be integrated as well by incorporating third party application programming interfaces into the Instrumentino framework. Program summary Program title: Instrumentino, Controlino Catalogue identifier: AETJ-v1-0 Program summary URL:http://cpc.cs.qub.ac.uk/summaries/AETJ-v1-0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU General Public License, version 3 No. of lines in distributed program, including test data, etc.: 17 097 No. of bytes in distributed program, including test data, etc.: 3 425 023 Distribution format: tar.gz Programming language: Python, C. Computer: i386, x86-64. Operating system: Linux, Mac OS X, Windows. RAM: 60 MB Classification: 16.4. External routines: wxPython, pySerial, matplotlib, agw (Instrumentino), SoftwareSerial (Controlino) Nature of problem: Control and monitor purpose-made experimental instruments Solution method: Modular Graphical User Interface for hardware control Running time: Depends on the user. © 2014 Elsevier B.V. All rights reserved.",Arduino - Catalogue identifiers - Control and monitor - Control capabilities - Distributed program - GNU general public license - Python - Third party application (Apps),"Koenka, Israel Joel(1); Sáiz, Jorge(2); Hauser, Peter C.(1)",2014.0,Journal,Computer Physics Communications,10.1016/j.cpc.2014.06.007,"(1) Department of Chemistry, University of Basel, Spitalstrasse 51, 4056 Basel, Switzerland; (2) Department of Analytical Chemistry, Physical Chemistry and Chemical Engineering, University of Alcalá, Ctra. Madrid-Barcelona Km 33.6, Alcalá de Henares 28871, Madrid, Spain",Elsevier B.V.,English,00104655,
Compendex,PyCSP - Communicating sequential processes for python,"The Python programming language is effective for rapidly specifying programs and experimenting with them. It is increasingly being used in computational sciences, and in teaching computer science. CSP is effective for describing concurrency. It has become especially relevant with the emergence of commodity multi-core architectures. We are interested in exploring how a combination of Python and CSP can benefit both the computational sciences and the hands-on teaching of distributed and parallel computing in computer science. To make this possible, we have developed PyCSP, a CSP library for Python. PyCSP presently supports the core CSP abstractions. We introduce the PyCSP library, its implementation, a few performance benchmarks, and show example code using PyCSP. An early prototype of PyCSP has been used in this year's Extreme Multiprogramming Class at the CS department, university of Copenhagen with promising results. © 2007 The authors and IOS Press. All rights reserved.",Computational sciences - EScience - Extreme Multiprogramming Class - Python programming languages,"Bjørndalen, John Markus(1,3); Vinter, Brian(2); Anshus, Otto(1)",2007.0,Conference,Concurrent Systems Engineering Series,,"(1) Department of Computer Science, University of Tromsø; (2) Department of Computer Science, University of Copenhagen; (3) Department of Computer Science, University of Tromsø, N-9037 Tromsø, Norway","IOS Press, Nieuwe Hemweg 6B, Amsterdam, 1013 BG, Netherlands",English,13837575,
Compendex,Online python tutor: Embeddable web-based program visualization for cs education,"This paper presents Online Python Tutor, a web-based program visualization tool for Python, which is becoming a popular language for teaching introductory CS courses. Using this tool, teachers and students can write Python programs directly in the web browser (without installing any plugins), step forwards and backwards through execution to view the run-time state of data structures, and share their program visualizations on the web. In the past three years, over 200,000 people have used Online Python Tutor to visualize their programs. In addition, instructors in a dozen universities such as UC Berkeley, MIT, the University of Washington, and the University of Waterloo have used it in their CS1 courses. Finally, Online Python Tutor visualizations have been embedded within three webbased digital Python textbook projects, which collectively attract around 16,000 viewers per month and are being used in at least 25 universities. Online Python Tutor is free and open source software, available at pythontutor.com. Copyright © 2013 ACM.",CS education - Free and open source softwares - Program visualization - Python - Run-time state - University of Washington - University of Waterloo - Web-based programs,"Guo, Philip J.(1)",2013.0,Conference,SIGCSE 2013 - Proceedings of the 44th ACM Technical Symposium on Computer Science Education,,"(1) Google, Inc., Mountain View, CA, United States",Association for Computing Machinery,English,,
Compendex,Symbolic python,"Symbolic is a important part of math. Nowadays for solving symbolic math there is many software applications, but many of them is not used or unknowed. In our work, we focus on how the SymPy program works?, how python tool is solving symbolic mathematical problems. Step by step proposed work give answer for this questions. Here you can see how SymPy solve Derivatieves, Integrals, Series Expansion, Limits, Trigonometric Simplification, Equation Systems, Vector and Matrices, Differential Equations. © 2014 IEEE.",Equation systems - Equations - Integrals - Limits - Mathematical problems - Series expansion - Software applications - Symbolic Python.SymPy,"Ari, Niyazi(1,2); Mamatnazarova, Nurayim(1,2)",2014.0,Conference,"Proceedings of the 11th International Conference on Electronics, Computer and Computation, ICECCO 2014",10.1109/ICECCO.2014.6997580,"(1) Nigerian Turkish Nile University, Abuja, Nigeria; (2) International Ataturk Alatoo University, Bishkek, Kazakhstan",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,DEVSimPy: A collaborative python software for modeling and simulation of DEVS systems,The Modeling and Simulation (M&S) of complex systems leans on the collaboration between different actors coming from specific domains. These actors have to communicate through an efficient way in order to improve the M&S process. We therefore propose in this article a collaborative M&S software framework called DEVSimPy. We point out the use of DEVSimPy through a concrete case study: hydraulic network management. © 2011 IEEE.,Collaborative softwares - Hydraulic system - Model and simulation - S-process - Simulation - Software frameworks - Software libraries,"Capocchi, L.(1); Santucci, J.F.(1); Poggi, B.(1); Nicolai, C.(1)",2011.0,Conference,"Proceedings of the 2011 20th IEEE International Workshops on Enabling Technologies: Infrastructure for Collaborative Enterprises, WETICE 2011",10.1109/WETICE.2011.31,"(1) University of Corsica, UMR CNRS 6134 SPE, Corte, France",IEEE Computer Society,English,,
Compendex,A python tool for multi-gage calibration of SWAT models using the NSGA-II algorithm,"Calibration of large watershed models requires multi-gage calibration, however there are limited tools available for performing these calibrations of SWAT models. Non-Dominated Sorting Genetic Algorithm II (NSGA-II) has been shown to be an effective and efficient multi-objective calibration algorithm in various disciplines. Although NSGA-II has been used with SWAT before, there is no publically available software tool for easily applying the calibration approach for SWAT models. Therefore, the objective of this study was to create an open source tool for multi-gage calibration of SWAT models using the Python programming language. This tool is demonstrated through an application for the Upper Neuse Watershed in North Carolina, USA. The objective functions used for the calibration were Nash-Sutcliffe (E) and Percent Bias (PB), and the objective sites were the Flat, Little, and Eno watershed outlets. Results from the chosen parameter set in the Pareto front were E values ranging between 0.65 and 0.75 and PB values ranging between 0.02 and 0.08 for the objective sites. Similar to previous studies, the results show that the use of multi-objective calibration algorithms for SWAT calibration improved model performance.","Multi-objective calibration - Non dominated sorting genetic algorithm ii (NSGA II) - North Carolina , USA - NSGA-II - NSGA-II algorithm - Objective functions - Python programming language - SWAT","Ercan, Mehmet B.(1); Goodall, Jonathan L.(1,2)",2014.0,Conference,"Proceedings - 7th International Congress on Environmental Modelling and Software: Bold Visions for Environmental Modeling, iEMSs 2014",,"(1) University of South Carolina, Department of Civil and Environmental Engineering, 300 Main St., Columbia; SC; 29208, United States; (2) University of Virginia, Department of Civil and Environmental Engineering, 351 McCormick Road, Charlottesville; VA; 22904-4742, United States",International Environmental Modelling and Software Society,English,,
Compendex,A python toolbox for computing solutions to canonical problems in electromagnetics,"One of the most important steps in the development of any numerical code is the validation of the implementation by comparison of the results obtained for a set of test cases to the exact solution. In the context of codes developed for high-frequency electromagnetics, this usually means comparing computed results to analytical solutions. Obtaining these analytical solutions can be a nontrivial problem, although fortunately it need only be implemented once, and can then be used repeatedly to validate any new code. This paper concentrates on finding the analyUcal solution to eigenvalue problems for a range of standard geometries, as well as the near-field solution for plane-wave scattedng from a PEC sphere. The solutions are implemented using the Python programming language and the SciPy library of scientific functions.",Python programming language - SciPy numerical library - Software validation - Software verification,"Swartz, Julian P.(1)",2006.0,Journal,IEEE Antennas and Propagation Magazine,10.1109/MAP.2006.1703411,"(1) Department of Electrical and Electronic Engineering, University of Stellenbosch, Stellenbosch 7600, South Africa",Institute of Electrical and Electronics Engineers Computer Society,English,10459243,
Compendex,Dem generation from close-range photogrammetry using extended python photogrammetry toolbox,"Digital elevation models (DEMs) are widely used raster data for different applications concerning terrain, such as for flood modelling, viewshed analysis, mining, land development, engineering design projects, to name a few. DEMs can be obtained through various methods, including topographic survey, LiDAR or photogrammetry, and internet sources. Terrestrial close-range photogrammetry is one of the alternative methods to produce DEMs through the processing of images using photogrammetry software. There are already powerful photogrammetry software that are commercially-available and can produce high-accuracy DEMs. However, this entails corresponding cost. Although, some of these software have free or demo trials, these trials have limits in their usable features and usage time. One alternative is the use of free and open-source software (FOSS), such as the Python Photogrammetry Toolbox (PPT), which provides an interface for performing photogrammetric processes implemented through python script. For relatively small areas such as in mining or construction excavation, a relatively inexpensive, fast and accurate method would be advantageous. In this study, PPT was used to generate 3D point cloud data from images of an open pit excavation. The PPT was extended to add an algorithm converting the generated point cloud data into a usable DEM. © Authors 2017.",Close range photogrammetry - Digital elevation model - Engineering design projects - Free and open source softwares - Free open source softwares - Python photogrammetry toolbox - Topographic surveys - Viewshed analysis,"Belmonte, A.A.(1); Biong, M.M.P.(1); Macatulad, E.G.(1)",2017.0,Conference,"International Archives of the Photogrammetry, Remote Sensing and Spatial Information Sciences - ISPRS Archives",10.5194/isprs-archives-XLII-4-W5-11-2017,"(1) Department of Geodetic Engineering, College of Engineering, University of the Philippines, Diliman, Quezon City, Philippines",International Society for Photogrammetry and Remote Sensing,English,16821750,
Compendex,Pyxel: A novel and multi-purpose Python-based framework for imaging detector simulation,"Pyxel is a novel, open-source and Python-based framework designed to host and pipeline any type of models simulating detector effects such as cosmic rays, detector PSF, various noise sources, Charge Transfer Inefficiency or persistence on images produced by CCD or CMOS-based imaging detectors. It is currently under development at the European Space Agency with the goal of release it to the broader detector scientist community. We present here the architecture of the framework, how to integrate new models in it and give a few examples of its current simulation capabilities. © 2018 SPIE.",Detector simulations - Open sources - persistence - Python - Pyxel - Simulation,"Lucsanyi, David(1); Prod'homme, Thibaut(1); Smit, Hans(1); Lemmel, Frederic(1); Crouzet, Pierre-Elie(1); Verhoeve, Peter(1); Shortt, Brian(1)",2018.0,Conference,Proceedings of SPIE - The International Society for Optical Engineering,10.1117/12.2314047,"(1) European Space Agency, ESTEC, Keplerlaan 1, Noordwijk; 2201 AZ, Netherlands",SPIE,English,0277786X,
Compendex,Parallel distributed computing using Python,"This work presents two software components aimed to relieve the costs of accessing high-performance parallel computing resources within a Python programming environment: MPI for Python and PETSc for Python. MPI for Python is a general-purpose Python package that provides bindings for the Message Passing Interface (MPI) standard using any back-end MPI implementation. Its facilities allow parallel Python programs to easily exploit multiple processors using the message passing paradigm. PETSc for Python provides access to the Portable, Extensible Toolkit for Scientific Computation (PETSc) libraries. Its facilities allow sequential and parallel Python applications to exploit state of the art algorithms and data structures readily available in PETSc for the solution of large-scale problems in science and engineering.MPI for Python and PETSc for Python are fully integrated to PETSc-FEM, an MPI and PETSc based parallel, multiphysics, finite elements code developed at CIMEC laboratory. This software infrastructure supports research activities related to simulation of fluid flows with applications ranging from the design of microfluidic devices for biochemical analysis to modeling of large-scale stream/aquifer interactions. © 2011 Elsevier Ltd.",High performance parallel computing - Message passing interface - Message passing paradigms - Parallel/distributed computing - PETSc - Python - Software infrastructure - State-of-the-art algorithms,"Dalcin, Lisandro D.(1); Paz, Rodrigo R.(1); Kler, Pablo A.(1); Cosimo, Alejandro(1)",2011.0,Journal,Advances in Water Resources,10.1016/j.advwatres.2011.04.013,"(1) Centro Internacional de Métodos Computacionales en Ingeniería (CIMEC), Instituto de Desarrollo Tecnológico para la Industria Química (INTEC), Consejo Nacional de Investigaciones Cientificas y Tecnicas, CONICET, Univ. Nacional del Litoral, UNL, S3000GLN Santa Fe, Argentina",Elsevier Ltd,English,03091708,
Compendex,Stella: A python-based domain-specific language for simulations,"We wish to make it easier and quicker to write well-performing scientific simulations that (1) have single-thread performance competitive with low-level languages, (2) use object-oriented programming to properly structure the code, and (3) are very easy to develop. Instead of prototyping in a high-level language and then rewriting in a lower-level language, we created a DSL embedded in Python that is transparently usable, retains some OOP features, compiles to machine code, and executes at speed similar to C. © 2016 ACM.",At-speed - Domain specific languages - Lower level language - Machine codes - Python - Scientific simulations - Single-thread performance,"Mohr, David(1); Stefanovic, Darko(1)",2016.0,Conference,Proceedings of the ACM Symposium on Applied Computing,10.1145/2851613.2851749,"(1) Department of Computer Science, University of New Mexico, United States",Association for Computing Machinery,English,,
Compendex,An empirical analysis of the transition from Python 2 to Python 3,"Python is one of the most popular and widely adopted programming languages in use today. In 2008 the Python developers introduced a new version of the language, Python 3.0, that was not backward compatible with Python 2, initiating a transitional phase for Python software developers. In this paper, we describe a study that investigates the degree to which Python software developers are making the transition from Python 2 to Python 3. We have developed a Python compliance analyser, PyComply, and have analysed a previously studied corpus of Python applications called Qualitas. We use PyComply to measure and quantify the degree to which Python 3 features are being used, as well as the rate and context of their adoption in the Qualitas corpus. Our results indicate that Python software developers are not exploiting the new features and advantages of Python 3, but rather are choosing to retain backward compatibility with Python 2. Moreover, Python developers are confining themselves to a language subset, governed by the diminishing intersection of Python 2, which is not under development, and Python 3, which is under development with new features being introduced as the language continues to evolve. © 2018, Springer Science+Business Media, LLC, part of Springer Nature.",Backward compatibility - Backward compatible - Compliance - Empirical analysis - Python programming - Software developer - Transitional phase,"Malloy, Brian A.(1); Power, James F.(2)",2019.0,Journal,Empirical Software Engineering,10.1007/s10664-018-9637-2,"(1) Computer Science Department, Clemson University, Clemson; SC, United States; (2) Computer Science Department, Maynooth University, Co. Kildare, Ireland",Springer New York LLC,English,13823256,
Compendex,Lindu Software: An Open Source Seismological Data Processing Using Python Framework to Relocate Hypocenter (Preliminary Software),"Recorded seismogram of an earthquake data contains the earth structure information. Researchers developed the method to extract the information and derives it into the program codes. However, generally, the program codes developed only for specific function and work on only specific scale. Almost the existing programs have a limitation, for example, they work on command-line based and less user-friendly. Lindu software is developed to solve these problems. In this paper, we show the preliminary results of Lindu software, a GUI - based software which is open source and developed in python platform. This software integrates the common procedure of routine data processing in earthquake seismology and works in local and regional scale. It is designed to read multi-component data on multi-station. To identify events automatically, we employ SL Kurt's method and use the results as guided auto-picking. However, the picked time also can be changed manually. Furthermore, we employ Joint Hypocenter Determination (JHD) algorithm to locate the hypocenter of earthquake events and update the 1D velocity model simultaneously. Then the events can be relocated by employing the double-difference method. The software was tested on the available data from IRIS and BMKG and shows the acceptable and reliable results. © 2019 IOP Publishing Ltd. All rights reserved.",Double differences - Earth structures - Earthquake data - Earthquake events - Multi-stations - Multicomponents - Reliable results - Seismological data,"Pradnya Andika, Putu(1); Styawan, Yudha(1); Suhendi, Cahli(1); Firdaus, Ruhul(1)",2019.0,Conference,IOP Conference Series: Earth and Environmental Science,10.1088/1755-1315/318/1/012021,"(1) Geophysical Engineering, Department of Industrial Engineering, Institut Teknologi Sumatera, Lampung, Indonesia",Institute of Physics Publishing,English,17551307,
Compendex,NURBS-Python: An open-source object-oriented NURBS modeling framework in Python,"We introduce NURBS-Python, an object-oriented, open-source, Pure Python NURBS evaluation library with no external dependencies. The library is capable of evaluating single or multiple NURBS curves and surfaces, provides a customizable visualization interface, and enables importing and exporting data using popular CAD file formats. The library and the implemented algorithms are designed to be portable and extensible via their abstract base interfaces. The design principles used in NURBS-Python allows users to access, use, and extend the library without any tedious software compilation steps or licensing concerns. © 2019 The Authors",Curve and surface - Design Principles - Model framework - Non-uniform rational B-splines - Nurbs curves and surfaces - Object oriented - Python - Software compilation,"Bingol, Onur Rauf(1); Krishnamurthy, Adarsh(1)",2019.0,Journal,SoftwareX,10.1016/j.softx.2018.12.005,"(1) Department of Mechanical Engineering, Iowa State University, United States",Elsevier B.V.,English,,
Compendex,"Share, but be Aware: Security Smells in Python Gists","Github Gist is a service provided by Github which is used by developers to share code snippets. While sharing, developers may inadvertently introduce security smells in code snippets as well, such as hard-coded passwords. Security smells are recurrent coding patterns that are indicative of security weaknesses, which could potentially lead to security breaches. The goal of this paper is to help software practitioners avoid insecure coding practices through an empirical study of security smells in publicly-available GitHub Gists. Through static analysis, we found 13 types of security smells with 4,403 occurrences in 5,822 publicly-available Python Gists. 1,817 of those Gists, which is around 31%, have at least one security smell including 689 instances of hard-coded secrets. We also found no significance relation between the presence of these security smells and the reputation of the Gist author. Based on our findings, we advocate for increased awareness and rigorous code review efforts related to software security for Github Gists so that propagation of insecure coding practices are mitigated. © 2019 IEEE.",Gist - GitHub - Python - Security - Security Smell - Software security,"Rahman, Md Rayhanur(1); Rahman, Akond(2); Williams, Laurie(1)",2019.0,Conference,"Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019",10.1109/ICSME.2019.00087,"(1) North Carolina State University, United States; (2) Tennessee Tech. University, United States",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Measuring polymorphism in python programs,"Following the increased popularity of dynamic languages and their increased use in critical software, there have been many proposals to retrofit static type system to these languages to improve possibilities to catch bugs and improve performance. A key question for any type system is whether the types should be structural, for more expressiveness, or nominal, to carry more meaning for the programmer. For retrofitted type systems, it seems the current trend is using structural types. This paper attempts to answer the question to what extent this extra expressiveness is needed, and how the possible polymorphism in dynamic code is used in practise. We study polymorphism in 36 real-world open source Python programs and approximate to what extent nominal and structural types could be used to type these programs. The study is based on collecting traces from multiple runs of the programs and analysing the polymorphic degrees of targets at more than 7 million call-sites. Our results show that while polymorphism is used in all programs, the programs are to a great extent monomorphic. The polymorphism found is evenly distributed across libraries and program-specific code and occur both during program start-up and normal execution. Most programs contain a few ""megamorphic"" call-sites where receiver types vary widely. The non-monomorphic parts of the programs can to some extent be typed with nominal or structural types, but none of the approaches can type entire programs. © 2015 ACM.",Critical software - Dynamic languages - Improve performance - Open sources - Python - Static type systems - Structural type - Trace-based analysis,"Åkerblom, Beatrice(1); Wrigstad, Tobias(2)",2015.0,Conference,DLS 2015 - Proceedings of the 11th Symposium on Dynamic Languages,10.1145/2816707.2816717,"(1) Stockholm University, Sweden; (2) Uppsala University, Sweden","Association for Computing Machinery, Inc",English,,
Compendex,Quantifying the Transition from Python 2 to 3: An Empirical Study of Python Applications,"Background: Python is one of the most popular modern programming languages. In 2008 its authors introduced a new version of the language, Python 3.0, that was not backward compatible with Python 2, initiating a transitional phase for Python software developers. Aims: The study described in this paper investigates the degree to which Python software developers are making the transition from Python 2 to Python 3. Method: We have developed a Python compliance analyser, PyComply, and have assembled a large corpus of Python applications. We use PyComply to measure and quantify the degree to which Python 3 features are being used, as well as the rate and context of their adoption. Results: In fact, Python software developers are not exploiting the new features and advantages of Python 3, but rather are choosing to retain backward compatibility with Python 2. Conclusions: Python developers are confining themselves to a language subset, governed by the diminishing intersection of Python 2, which is not under development, and Python 3, which is under development with new features being introduced as the language continues to evolve. © 2017 IEEE.",Backward compatibility - Backward compatible - Empirical studies - Language features - Large corpora - Python - Software developer - Transitional phase,"Malloy, Brian A.(1); Power, James F.(2)",2017.0,Conference,International Symposium on Empirical Software Engineering and Measurement,10.1109/ESEM.2017.45,"(1) Computer Science Department, Clemson University, Clemson; SC, United States; (2) Computer Science Department, Maynooth University, Kildare, Ireland",IEEE Computer Society,English,19493770,
Compendex,Pyleecan: An Open-Source Python Object-Oriented Software for the Multiphysic Design Optimization of Electrical Machines,"This paper presents the first open-source development project for the electromagnetic design optimization of electrical machines and drives named Pyleecan - PYthon Library for Electrical Engineering Computational ANalysis. This paper first details the objectives of Pyleecan open-source development project, and the object-oriented architecture of the software that has been developed and released. Then it reviews and compares the available free and open-source software used during the multiphysic design of electrical machines including electromagnetics, heat transfer and vibro-acoustic analysis. © 2018 IEEE.",Design optimization - Electrical machine - Multi-physics - Open sources - Simulation software,"Bonneel, P.(1); Le Besnerais, J.(1); Pile, R.(1); Devillers, E.(1)",2018.0,Conference,"Proceedings - 2018 23rd International Conference on Electrical Machines, ICEM 2018",10.1109/ICELMACH.2018.8506884,"(1) EOMYS ENGINEERING, 121 rue de Chanzy, Lille-Hellemmes, France",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Pyteomics - A python framework for exploratory data analysis and rapid software prototyping in proteomics,"Pyteomics is a cross-platform, open-source Python library providing a rich set of tools for MS-based proteomics. It provides modules for reading LC-MS/MS data, search engine output, protein sequence databases, theoretical prediction of retention times, electrochemical properties of polypeptides, mass and m/z calculations, and sequence parsing. Pyteomics is available under Apache license; release versions are available at the Python Package Index http://pypi.python. org/pyteomics, the source code repository at http://hg.theorchromo.ru/pyteomics, documentation at http://packages.python.org/pyteomics. Pyteomics.biolccc documentation is available at http://packages.python.org/pyteomics.biolccc/. Questions on installation and usage can be addressed to pyteomics mailing list: pyteomics@googlegroups.com [Figure not available: see fulltext.] © 2013 American Society for Mass Spectrometry.",Cross-platform - Exploratory data analysis - Mailing lists - Open sources - Protein sequence database - Proteomics - Retention time - Source code repositories,"Goloborodko, Anton A.(1,2,3); Levitsky, Lev I.(2,3); Ivanov, Mark V.(2,3); Gorshkov, Mikhail V.(2,3)",2013.0,Journal,Journal of the American Society for Mass Spectrometry,10.1007/s13361-012-0516-6,"(1) Department of Physics, Massachusetts Institute of Technology, Boston, MA 02139, United States; (2) Institute for Energy Problems of Chemical Physics, Russian Academy of Sciences, Moscow, 119334, Russia; (3) Moscow Institute of Physics and Technology (State University), Dolgoprudny Moscow region 141700, Russia",Springer New York LLC,English,10440305,
Compendex,MPI and PETSC for python,"This work reports our attempts to facilitate the access to high-performance parallel computing resources within a Python programming environment. The outcome of this effort are two open source and public domain packages, MPI for Python (known in short as mpi4py) and PETSc for Python (known in short as petsc4py). MPI for Python [1, 2, 3], is an open-source software project that provides bindings of the Message Passing Interface (MPI) standard for the Python programming language and targets the development of parallel application codes in Python. Its facilities allow parallel Python programs to easily exploit multiple processors. MPI for Python employs any back-end MPI implementation, thus being immediately available on any parallel environment providing access to any MPI library. PETSc for Python [4] is an open-source software project that provides access to the Portable, Extensible Toolkit for Scientific Computation (PETSc) libraries within the Python programming language. Its facilities allow sequential and parallel Python applications to exploit state of the art algorithms and data structures readily available in PETSc. © 2010 Nova Science Publishers, Inc. All rights reserved.",High performance parallel computing - Message passing interface - Open source software projects - Parallel application - Parallel environment - Python programming language - Scientific computation - State-of-the-art algorithms,"Dalcín, Lisandro D.(1); Kler, Pablo A.(1); Storti, Mario A.(1); Paz, Rodrigo R.(1)",2010.0,Book Chapter,Computational Mechanics Research Trends,,"(1) Centro Internacional de Métodos, Computacionales en Ingeniería (CIMEC), CONICET-INTEC-UNL, Parque Tecnológico del Litoral Centro, (3000) Santa Fe, Argentina","Nova Science Publishers, Inc.",English,,
Compendex,Software/hardware framework for generating parallel gaussian random numbers based on the monty python method,"We present a hardware architecture for efficient implementation of a Gaussian random number generator (GRNG), using the Monty Python method. To maximize the performance/complexity efficiency, an efficient word-length optimization model is proposed to find out both the optimal integer and fractional word-lengths for signals. Experimental results show that our optimized Fixed-Point design achieves a throughput of almost 1 sample-per-cycle and runs as fast as 375.9 MHz on a Xilinx XC6VLX240T FPGA device. This performance is 23.4-fold faster than a dedicated software version running on a 2.67-GHz Intel core i5 processor. It takes 1976 LUTs, 1785 Flip-Flops, 12 BRAMs and 35 DSPs, which is only about 1% of the device as well as a great reduction compared to its corresponding Floating-Point implementations. Furthermore, we develop a framework that is capable of partitioning the Gaussian distribution stream into an arbitrary number of parallel sub-streams. With support from software, this framework can obtain speedup roughly linearly with the number of parallel cores. The quality of the variables produced by our design are verified via the standard Gaussian statistical test suit, the chi-square (X2) test. © 2012 IEEE.",Arbitrary number - Efficient implementation - Floating point implementation - Hardware architecture - Random number generators - Software versions - Software/hardware - Word-length optimizations,"Li, Yuan(1); Chow, Paul(2); Jiang, Jiang(3); Zhang, Minxuan(1); Wei, Shaojun(4)",2012.0,Conference,FPT 2012 - 2012 International Conference on Field-Programmable Technology,10.1109/FPT.2012.6412133,"(1) School of Computer, National University of Defense Technology, Changsha, Hunan, 410073, China; (2) Department of Electrical and Computer Engineering, University of Toronto, Toronto, ON, Canada; (3) School of Microelectronics, Shanghai Jiao Tong University, Shanghai, China; (4) Institute of Microelectronics, Tsinghua University, Beijing, China",IEEE Computer Society,English,,
Compendex,"Simulating nonlinear circuits with python power electronics: An open-source simulator, based on python™","This book provides readers with an in-depth discussion of circuit simulation, combining basic electrical engineering circuit theory with Python programming. It fills an information gap by describing the development of Python Power Electronics, an open-source software for simulating circuits, and demonstrating its use in a sample circuit. Unlike typical books on circuit theory that describe how circuits can be solved mathematically, followed by examples of simulating circuits using specific, commercial software, this book has a different approach and focus. The author begins by describing every aspect of the open-source software, in the context of non-linear power electronic circuits, as a foundation for aspiring or practicing engineers to embark on further development of open source software for different purposes. By demonstrating explicitly the operation of the software through algorithms, this book brings together the fields of electrical engineering and software technology. © Springer International Publishing AG, part of Springer Nature 2018. All rights reserved.",Commercial software - Information gap - Non linear - Nonlinear circuit - Open sources - Practicing engineers - Python programming - Software technology,"Iyer, Shivkumar V.(1)",2018.0,Book,"Simulating Nonlinear Circuits with Python Power Electronics: An Open-Source Simulator, Based on Python™",10.1007/978-3-319-73984-7,"(1) Ontario, Canada",Springer International Publishing,English,,
Compendex,Design by contract for Python,"The idea of design by contract (DBC), realized in the statically typed object-oriented programming language Eiffel, can be viewed as a systematic approach to specifying and implementing object-oriented software systems. We believe that a statically typed programming language is not suitable in the analysis and design phase of a prototyping-oriented software life cycle. For this purpose, dynamically typed interpreted programming languages are better suited. Unfortunately, dynamically typed programming languages usually do not support the concept of DBC. Therefore we integrated DBC into the programming language Python by using a metaprogramming approach, i.e., without changing the language or the run-time system. We adopted the DBC concept by adding mechanisms for dynamic type checking for method parameters and instance variables. The proposed combination of a more formal approach with a slim programming language provides a good basis for elicitation and documentation tasks in the analysis and design phase, especially in cases of a prototyping-oriented software development approach. Although the approach presented provides basic tool support for the analysis and design phase, further tool support, especially for browsing assertions, is desirable.",Design by contract (DBC) - Metaprogramming method - Python programming language,"Plosch, Reinhold(1)",1997.0,Conference,"Proceedings of the Asia-Pacific Software Engineering Conference and International Computer Science Conference, APSEC and ICSC",,"(1) Johannes Kepler Univ of Linz, Linz, Austria","IEEE Comp Soc, Los Alamitos, CA, United States",English,,
Compendex,A Python-Based Simulation Software for Monitoring the Operability State of Critical Infrastructures under Emergency Conditions,"Due to the increasing number of cyber attacks and blackouts at critical infrastructures, the topic of critical infrastructure security and safety did not only reach a high media presence within the last years, but also gained attention within security research. The first step to increase the resilience and preparedness of critical infrastructures is to understand the impact of external stimulation on its operability. Therefore, we successfully build a Python-based simulation software based on the cyber-physical system model from Koch et al. (IEEE EIT 2017 [1]), which is able to predict the operating conditions in cases of blackouts, power shortages or cyber attacks. The software is dynamically verified by building and simulating the time-dependent operability state of a small network in cases of varying load conditions and a cyber attack event. With its easy understandable graphical user interface the software will be able to support the future planning of critical infrastructures and testing its performance under emergency conditions. © 2018 IEEE.",Critical infrastructure securities - Cyber physical systems (CPSs) - Emergency conditions - External stimulation - Operating condition - Power system controls - Security research - Simulation software,"Koch, Tobias(1); Moller, Dietmar P. F.(2); Deutschmann, Andreas(1)",2018.0,Conference,IEEE International Conference on Electro Information Technology,10.1109/EIT.2018.8500219,"(1) Institute of Air Transport and Airport Research, German Aerospace Center, Airport Research, Lilienthalplatz 7, Braunschweig; 38108, Germany; (2) Institute of Applied Stochastics and Operations Research, TU Clausthal, Erzstraße 1, Clausthal-Zellerfeld; 38678, Germany",IEEE Computer Society,English,21540357,
Compendex,PyReload: Dynamic Updating of Python Programs by Reloading,"Dynamic Software Updating (DSU) is a promising technique for updating running software systems without incurring downtime. It is particularly useful to those systems which need to provide 24x7 services. Many efforts have been made to dynamic updating of the programs developed in mainstreaming languages such as C and Java. With the popularity of Python, many software servers are developed using Python and therefore they are desired to be dynamically updatable. However, there are few studies on dynamic updating of Python. To our knowledge, there exists only one updating approach for Python programs. The approach requires a dedicated Python interpreter in order to manipulate threads for updating, and consequently, it cannot be directly applied to mainstreaming Python interpreters. In this paper, we propose a novel dynamic updating approach to Python based on the built-in reloading mechanism that is supported by most of Python interpreters. Our approach is generic in that it is applicable to ordinary Python interpreters without any change to them. We implement a prototype called PyReload based on the proposed approach. PyReload is compatible with several mainstreaming Python interpreters such as CPython, Pypy and Jython. A case study is conducted to show the usage of PyReload. For performance, experimental results show that PyReload needs a shorter time for updating than the existing approach does. © 2018 IEEE.",Dynamic software updating - Dynamic updating - ON dynamics - Python - Software servers - Software systems - Updating approaches,"Tang, Wei(1); Zhang, Min(1)",2018.0,Conference,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC",10.1109/APSEC.2018.00037,"(1) Shanghai Key Laboratory of Trustworthy Computing, East China Normal University, Shanghai, China",IEEE Computer Society,English,15301362,
Compendex,A cross-validation package driving Netica with python,"Bayesian networks (BNs) are powerful tools for probabilistically simulating natural systems and emulating process models. Cross validation is a technique to avoid overfitting resulting from overly complex BNs. Overfitting reduces predictive skill. Cross-validation for BNs is known but rarely implemented due partly to a lack of software tools designed to work with available BN packages. CVNetica is open-source, written in Python, and extends the Netica software package to perform cross-validation and read, rebuild, and learn BNs from data. Insights gained from cross-validation and implications on prediction versus description are illustrated with: a data-driven oceanographic application; and a model-emulation application. These examples show that overfitting occurs when BNs become more complex than allowed by supporting data and overfitting incurs computational costs as well as causing a reduction in prediction skill. CVNetica evaluates overfitting using several complexity metrics (we used level of discretization) and its impact on performance metrics (we used skill). © 2014.",Bayesian Networks (bns) - Complexity metrics - Computational costs - Cross validation - Netica - Performance metrics - Python - Uncertainty,"Fienen, Michael N.(1); Plant, Nathaniel G.(2)",2015.0,Journal,Environmental Modelling and Software,10.1016/j.envsoft.2014.09.007,"(1) US Geological Survey, Wisconsin Water Science Center, 8505 Research Way, Middleton; WI; 53562, United States; (2) US Geological Survey, St. Petersburg Coastal and Marine Science Center, 600 Fourth Street South, St. Petersburg; FL; 33701, United States",Elsevier Ltd,English,13648152,
Compendex,WatchMan project-A Python CASE framework for High Energy Physics data analysis in the LHC era,"The world's largest particle collider LHC is taking data at CERN, in Geneva, providing a huge amount of data to be looked at, of the order of several Petabytes per year. Nowadays, Data Analysis in High Energy Physics (HEP) means handling billions of experimental data in custom software frameworks. Physicists have to access and select data interacting with the experiment using dedicated tools; they also have to apply filter functions and analysis algorithms to test hypotheses about the physics underlain. Modern HEP experiments rely on complex software frameworks, hence writing the analysis code is not always an easy task, and the learning curve is usually quite steep. Moreover each hypothesis requires a dedicated analysis, in order to have a better control on it and to be able to validate the results among different groups of researchers. And the writing of so many analyses can be error prone and time consuming.In order to ease the writing of such data analysis code, we built a software-generator: the idea is that the user inserts the settings of the physics analyses, and the final analysis code is automatically and dynamically generated, ready to be run on data. Python helped us to build such a package. Its high-level and dynamic nature, together with its flexibility and prototyping speed are the key features which made our choice.So we conceived and developed WatchMan, a Python CASE (Computer-Aided Software Engineering) framework to automatically generate reliable, easy to maintain and easy to validate HEP data analysis code. © 2012 Elsevier B.V.",Analysis algorithms - Complex software - Large Hadron Collider - Learning curves - Physics analysis - Python - Software frameworks - Software generators,"Bianchi, Riccardo Maria(1); Brunelière, Renaud(2)",2013.0,Journal,Journal of Computational Science,10.1016/j.jocs.2012.04.005,"(1) CERN, European Organization for Nuclear Research, CH-1211 Geneva, Switzerland; (2) Physikalisches Institut, Albert Ludwigs Universität, Freiburg, Germany",Elsevier B.V.,English,18777503,
Compendex,Python software tools for GNSS interferometric reflectometry (GNSS-IR),"Global Navigation Satellite System (GNSS) interferometric reflectometry, also known as the GNSS-IR, uses data from geodetic-quality GNSS antennas to extract information about the environment surrounding the antenna. Soil moisture monitoring is one of the most important applications of the GNSS-IR technique. This manuscript presents the main ideas and implementation decisions needed to write the Python code for software tools that transform RINEX format observation and navigation files into an appropriate format for GNSS-IR (which includes the SNR observations and the azimuth and elevation of the satellites) and to determine the reflection height and the adjusted phase and amplitude values of the interferometric wave for each individual satellite track. The main goal of the manuscript is to share the software with the scientific community to introduce new users to the GNSS-IR technique. © 2020, Springer-Verlag GmbH Germany, part of Springer Nature.",Extract informations - Global Navigation Satellite Systems - GNSS antennas - IR techniques - Reflectometry - Satellite tracks - Scientific community - Soil moisture monitoring,"Martín, Angel(1); Luján, Raquel(1); Anquela, Ana Belén(1)",2020.0,Journal,GPS Solutions,10.1007/s10291-020-01010-0,"(1) Department of Cartographic Engineering, Geodesy and Photogrammetry, Universitat Politècnica de València, Camino de Vera s/n, Valencia; 46022, Spain",Springer,English,10805370,
Compendex,Python predictive analysis for bug detection,"Python is a popular dynamic language that allows quick software development. However, Python program analy-sis engines are largely lacking. In this paper, we present a Python predictive analysis. It first collects the trace of an execution, and then encodes the trace and unexecuted branches to symbolic constraints. Symbolic variables are in-troduced to denote input values, their dynamic types, and attribute sets, to reason about their variations. Solving the constraints identifies bugs and their triggering inputs. Our evaluation shows that the technique is highly effective in an-alyzing real-world complex programs with a lot of dynamic features and external library calls, due to its sophisticated encoding design based on traces. It identifies 46 bugs from 11 real-world projects, with 16 new bugs. All reported bugs are true positives. © 2016 ACM.",Attribute sets - Bug detection - Complex programs - Dynamic features - Dynamic languages - Python - Real world projects - True positive,"Xu, Zhaogui(1); Liu, Peng(2); Zhang, Xiangyu(2); Xu, Baowen(1)",2016.0,Conference,Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering,10.1145/2950290.2950357,"(1) State Key Laboratory of Novel Software Technology, Nanjing University, China; (2) Department of Computer Science, Purdue University, United States",Association for Computing Machinery,English,,
Compendex,Enrico: A Python package to simplify Fermi-LAT analysis,"With the advent of the Large Array Telescope (LAT) on board the Fermi satellite, a new window on the Universe has been opened. Publicly available, the Fermi-LAT data come together with an analysis software named ScienceTools (ST, http://fermi.gsfc.nasa.gov/ssc/data/analysis/software/) which can be run through a Python interface. Nevertheless, for the user, the ST can be hard to run and imply several steps. Users already contributed with scripts for a specific task but no tool allowing a complete analysis is currently available. We present a Python package called Enrico, designed to facilitate the data analysis. Using only configuration files and front end tools from the command line, the user can easily perform/reproduce an entire Fermi analysis and make plots for publications. It also include new features like debug plots, pipeline execution on one or several CPUs, downloading of the Fermi data or the generation of a sky model from the Fermi catalogue. Enrico is an open-source project currently available for download at https://github.com/gammapy/enrico. © 2013 Sociedade Brasileira de Fisica. All Rights Reserved.",Analysis softwares - Analysis tools - Configuration files - Fermi - Front-end tools - Open source projects - Pipeline execution - Python interfaces,"Sanchez, D.A.(1); Deil, C.(2)",2013.0,Conference,"Proceedings of the 33rd International Cosmic Rays Conference, ICRC 2013",,"(1) Laboratoire d’Annecy-le-Vieux de Physique des Particules, Université de Savoie, CNRS/IN2P3, Annecy-le-Vieux; F-74941, France; (2) Max-Planck-Institut für Kernphysik, P.O. Box 103980, Heidelberg; D 69029, Germany",Sociedade Brasileira de Fisica,English,,
Compendex,Note: Tormenta: An open source Python-powered control software for camera based optical microscopy,"Until recently, PC control and synchronization of scientific instruments was only possible through closed-source expensive frameworks like National Instruments' LabVIEW. Nowadays, efficient cost-free alternatives are available in the context of a continuously growing community of open-source software developers. Here, we report on Tormenta, a modular open-source software for the control of camera-based optical microscopes. Tormenta is built on Python, works on multiple operating systems, and includes some key features for fluorescence nanoscopy based on single molecule localization. © 2016 Author(s).",Closed source - Control software - Efficient costs - Multiple operating systems - National Instruments - Optical microscopes - Scientific instrument - Single-molecule localizations,"Barabas, Federico M.(1,2); Masullo, Luciano A.(1,2); Stefani, Fernando D.(1,2)",2016.0,Journal,Review of Scientific Instruments,10.1063/1.4972392,"(1) Centro de Investigaciones en Bionanociencas (CIBION), Consejo Nacional de Investigaciones Científicas y Técnicas (CONICET), Godoy Cruz 2390, Buenos Aires; C1425FQD, Argentina; (2) Departamento de Física, Facultad de Ciencias Exactas y Naturales, Universidad de Buenos Aires, Ciudad Universitaria, Pabellón 1, Buenos Aires; C1428EHA, Argentina",American Institute of Physics Inc.,English,00346748,
Compendex,"PyMTL3: A Python Framework for Open-Source Hardware Modeling, Generation, Simulation, and Verification","In this article, we present PyMTL3, a Python framework for open-source hardware modeling, generation, simulation, and verification. In addition to compelling benefits from using the Python language, PyMTL3 is designed to provide flexible, modular, and extensible workflows for both hardware designers and computer architects. PyMTL3 supports a seamless multilevel modeling environment and carefully designed modular software architecture using a sophisticated in-memory intermediate representation and a collection of passes that analyze, instrument, and transform PyMTL3 hardware models. We believe PyMTL3 can play an important role in jump-starting the open-source hardware ecosystem. © 1981-2012 IEEE.",Computer architects - Hardware designers - Hardware models - Intermediate representations - Modular software architectures - Multilevel model - Open-source hardwares - PYTHON language,"Jiang, Shunning(1); Pan, Peitian(1); Ou, Yanghui(1); Batten, Christopher(1)",2020.0,Journal,IEEE Micro,10.1109/MM.2020.2997638,"(1) Cornell University, United States",IEEE Computer Society,English,02721732,
Compendex,Data science and statistics with python,"With Data Science as the recent trend, the tools for efficient manipulation and analysis of data have become important for (training of) professionals in data analysis and statistics. The Python programming language starts to be one of the most popular tools for data analysis, in many cases replacing well-established statistical software packages. We report on a short case study on elementary statistical evaluation of a real-world data on air quality, using Python. © 2018 Slovak University of Technology in Bratislava. All rights reserved.",Analysis of data - Data analysis and statistics - Python - Python programming language - Real-world - Recent trends - Statistical evaluation - Statistical software packages,"Kaspíková, Nikola(1)",2018.0,Conference,"17th Conference on Applied Mathematics, APLIMAT 2018 - Proceedings",,"(1) University of Economics in Prague, Department of Mathematics, Nám. W. Churchilla 4, Praha; 130 67, Czech Republic",Slovak University of Technology in Bratislava,English,,
Compendex,HOOMD-blue: A Python package for high-performance molecular dynamics and hard particle Monte Carlo simulations,"HOOMD-blue is a particle simulation engine designed for nano- and colloidal-scale molecular dynamics and hard particle Monte Carlo simulations. It has been actively developed since March 2007 and available open source since August 2008. HOOMD-blue is a Python package with a high performance C++/CUDA backend that we built from the ground up for GPU acceleration. The Python interface allows users to combine HOOMD-blue with other packages in the Python ecosystem to create simulation and analysis workflows. We employ software engineering practices to develop, test, maintain, and expand the code. © 2019",CUDA - GPU accelerations - Hard particles - Molecular simulations - Python - Python interfaces - Simulation and analysis - Software engineering practices,"Anderson, Joshua A.(1); Glaser, Jens(1); Glotzer, Sharon C.(1,2,3)",2020.0,Journal,Computational Materials Science,10.1016/j.commatsci.2019.109363,"(1) Department of Chemical Engineering, University of Michigan, Ann Arbor; MI; 48109, United States; (2) Department of Materials Science and Engineering, University of Michigan, Ann Arbor; MI; 48109, United States; (3) Biointerfaces Institute, University of Michigan, Ann Arbor; MI; 48109, United States",Elsevier B.V.,English,09270256,
Compendex,WavePy: A Python package for wave optics,"Phase screen-based wave optics simulations are a fundamental tool used by researchers seeking to understand the effect of atmospheric turbulence on laser beam propagation and imaging. Most wave optics packages are either themselves proprietary or rely on expensive, proprietary software packages. We have developed WavePy, a wave optics package based in the open-source Python programming environment. Using WavePy we have been able to produce turbulence-corrupted imagery similar to those observed by ground-based telescopes imaging space objects. We have also simulated plane wave and spherical wave propagation through uniform turbulence volumes. In both cases, we found the execution time between the WavePy and MATLAB versions to be similar under certain circumstances. © 2016 SPIE.",Anisoplanatism - Fundamental tools - Ground-based telescopes - Horizontal imaging - Imaging through turbulences - Proprietary software - Python programming - Wave optics simulation,"Beck, Jeffrey(1); Bekins, Celina(2); Bos, Jeremy P.(1)",2016.0,Conference,Proceedings of SPIE - The International Society for Optical Engineering,10.1117/12.2225769,"(1) Department of Electrical and Computer Engineering, Michigan Technological University, Houghton; MI, United States; (2) Franklin W. Olin College of Engineering, Needham; MA, United States",SPIE,English,0277786X,
Compendex,jMetalPy: A Python framework for multi-objective optimization with metaheuristics,"This paper describes jMetalPy, an object-oriented Python-based framework for multi-objective optimization with metaheuristic techniques. Building upon our experiences with the well-known jMetal framework, we have developed a new multi-objective optimization software platform aiming not only at replicating the former one in a different programming language, but also at taking advantage of the full feature set of Python, including its facilities for fast prototyping and the large amount of available libraries for data processing, data analysis, data visualization, and high-performance computing. As a result, jMetalPy provides an environment for solving multi-objective optimization problems focused not only on traditional metaheuristics, but also on techniques supporting preference articulation, constrained and dynamic problems, along with a rich set of features related to the automatic generation of statistical data from the results generated, as well as the real-time and interactive visualization of the Pareto front approximations produced by the algorithms. jMetalPy offers additionally support for parallel computing in multicore and cluster systems. We include some use cases to explore the main features of jMetalPy and to illustrate how to work with it. © 2019 Elsevier B.V.",Automatic Generation - High performance computing - Interactive visualizations - Meta heuristics - Meta-heuristic techniques - Multi-objective optimization problem - Python - Software frameworks,"Benítez-Hidalgo, Antonio(1); Nebro, Antonio J.(1); García-Nieto, José(1); Oregi, Izaskun(2); Del Ser, Javier(2,3,4)",2019.0,Journal,Swarm and Evolutionary Computation,10.1016/j.swevo.2019.100598,"(1) Departamento de Lenguajes y Ciencias de la Computación, Ada Byron Research Building, University of Málaga, Málaga; 29071, Spain; (2) TECNALIA, Derio; 48160, Spain; (3) University of the Basque Country (UPV/EHU), Bilbao; 48013, Spain; (4) Basque Center for Applied Mathematics (BCAM), Bilbao; 48009, Spain",Elsevier B.V.,English,22106502,
Compendex,Python in ChIP-Seq data analysis,"Python is an interpreted programming language that is simple, clear and powerful. To many scientists in life sciences, Python has become their favorite choice to perform routine work, such as text processing, image plotting, basic statistics, GUI programming and even prototype development. In order to introduce Python to more scientists, here, we present some Python experiences and examples in Illumina ChIP-Seq data analysis. Five in-house Python scripts were written to illustrate the simplicity and clarity of Python usages in data analysis and results presentation: Illumina Q30 analysis, reads distribution around TSS, reads intensity plot, reads distribution along chromosomes and sequence retrieval from genome FASTA files. Finally, we show three programs written in Python for ChIP-Seq data analysis: MACS, SICER and CEAS.",Chip-seq - Illumina - Intensity plot - Interpreted programming language - Life-sciences - Prototype development - Python - Results presentation,"Zhang, Li(1); Hu, Yuansen(1); Wang, Jinshui(1); Zhang, Guangle(1)",2014.0,Journal,Journal of Chemical and Pharmaceutical Research,,"(1) College of Biological Engineering, Henan University of Technology, Zhengzhou, Henan, China","Journal of Chemical and Pharmaceutical Research, 3/668 Malviya Nagar, Jaipur, Rajasthan, India",English,,
Compendex,A water resource simulator in Python,"A new generalised water resource network modelling Python library, Pywr, is presented. Given hydrological inflows, Pywr simulates customisable water allocation and operation rules throughout complex multi-purpose managed water systems at each user-defined time-step. The model uses a low-level interface to existing linear programming solvers for fast priority-based optimisation-driven simulation. The library uses an object based system for users to provide input data and record simulation outputs. A novel multi-scenario simulation method provides an almost 4-fold improvement in model run-times and supports calculating robustness metrics across scenarios. A flexible interface to specify multi-objective optimisation formulations as part of a model's input file is included. These features enable analysts to apply advanced water planning approaches, such as robust decision making and robust optimisation, to real systems. The library is available under the GPLv3 open source licence, includes several examples and a regression test suite. © 2020 The Authors",Deep uncertainties - Multi reservoir - Network optimisation - Open sources - Python - Water resource simulation,"Tomlinson, J.E.(1); Arnott, J.H.(1); Harou, J.J.(1)",2020.0,Journal,Environmental Modelling and Software,10.1016/j.envsoft.2020.104635,"(1) Department of Mechanical, Aerospace and Civil Engineering, The University of Manchester, Manchester; M13 9PL, United Kingdom",Elsevier Ltd,English,13648152,
Compendex,Visualization of the CMS python configuration system,"The job configuration system of the CMS experiment is based on the Python programming language. Software modules and their order of execution are both represented by Python objects. In order to investigate and verify configuration parameters and dependencies naturally appearing in modular software, CMS employs a graphical tool. This tool visualizes the configuration objects, their dependencies, and the information flow. Furthermore it can be used for documentation purposes. The underlying software concepts as well as the visualization are presented. © 2010 IOP Publishing Ltd.",Configuration parameters - Configuration system - Graphical tools - Information flows - Modular softwares - Python programming language - Software modules,"Erdmann, M.(1); Fischer, R.(1); Hegner, B.(2); Hinzmann, A.(1); Klimkovich, T.(1); Müller, G.(1); Steggemann, J.(1)",2010.0,Conference,Journal of Physics: Conference Series,10.1088/1742-6596/219/4/042008,"(1) RWTH Aachen University, Physikalisches Institut 3A, 52062 Aachen, Germany; (2) CERN, CH-1211 Geneva 23, Switzerland",Institute of Physics Publishing,English,17426588,
Compendex,Advanced PANIC quick-look tool using Python,"PANIC, the Panoramic Near Infrared Camera, is an instrument for the Calar Alto Observatory currently being integrated in laboratory and whose first light is foreseen for end 2012 or early 2013. We present here how the PANIC Quick-Look tool (PQL) and pipeline (PAPI) are being implemented, using existing rapid programming Python technologies and packages, together with well-known astronomical software suites (Astromatic, IRAF) and parallel processing techniques. We will briefly describe the structure of the PQL tool, whose main characteristics are the use of the SQLite database and PyQt, a Python binding of the GUI toolkit Qt. © 2012 SPIE.",Astronomical software - GUI toolkits - Near Infrared Cameras - Parallel processing - Python - Quick-look,"Ibáñez, José-Miguel(1); García Segura, Antonio J.(1); Storz, Clemens(2); Fried, Josef W.(2); Fernández, Matilde(1); Rodríguez Gómez, Julio F.(1); Terrón, V.(1); Cárdenas, M.C.(1)",2012.0,Conference,Proceedings of SPIE - The International Society for Optical Engineering,10.1117/12.924165,"(1) Instituto de Astrofísica de Andalucía (CSIC), Glorieta de la Astronomía 3, E-18008 Granada, Spain; (2) Max-Planck-Institut für Astronomie, Königstuhl 17, D-69117 Heidelberg, Germany",SPIE,English,0277786X,
Compendex,Grammar engineering for multiple front-ends for Python,"In this paper, we describe our experience in grammar engineering to construct multiple parsers and front ends for the Python language. We present a metrics-based study of the evolution of the Python grammars through the multiple versions of the language in an effort to distinguish and measure grammar evolution and to provide a basis of comparison with related research in grammar engineering. To conduct this research, we have built a toolkit, pygrat, which builds on tools developed in other research. We use pygrat to build a system that automates much of the process needed to translate the Python grammars from EBNF to a formalism acceptable to the bison parser generator. We exploit the suite of Python test cases, used by the Python developers, to validate our parser generation. Finally, we describe our use of the menhir parser generator to facilitate the parser and front-end construction, eliminating some of the transformations and providing practical support for grammar modularisation. © 2018 John Wiley & Sons, Ltd.",Front end - Grammar engineering - grammarware - parser - Python,"Malloy, Brian A.(1); Power, James F.(2)",2019.0,Journal,Software - Practice and Experience,10.1002/spe.2665,"(1) Computer Science Division, School of Computing, Clemson University, Clemson; SC, United States; (2) Department of Computer Science, Maynooth University, Co. Kildare, Ireland","John Wiley and Sons Ltd, Southern Gate, Chichester, West Sussex, PO19 8SQ, United Kingdom",English,00380644,
Compendex,Recognizing Potential Runtime Types from Python Docstrings,"Docstring plays an important role in software development and maintanance as it is used in source code to document a specific segment of code. In dynamic language programming, docstring is usually used to annotate types of parameters and return values. Docstrings can help developers remind the expected types of a parameter, without process of comprehending the context which is time-consuming. In this study, we propose an automatic approach to recognize potential types of a parameter from its description. In our approach, we utilize feature selection to select useful features for classifier training. Then we adopt four different kinds of classifiers to recognize potential types and evaluate their performances using seven metrics. We collect a dataset of 314 type descriptions from ten prevalent Python projects. Our experimental results show that, Decision Tree classifier has the best performances among four studied classifiers, whose precision, recall, F1-score, jaccard index, hamming loss, accuracy and MRR achieve 0.681, 0.548, 0.582, 0.542, 1.234, 0.432 and 0.778 respectively. Multi-layer perceptron has the weakest performances. Futher more, we discover that the performances of four classifiers achieve their best performances when select top 20% or 40% features with the highest$$\chi ^2$$ statistic. This study archive a dataset of type descriptions and propose a framework of automatically recognizing potential types of a parameter from its description. © 2018, Springer Nature Switzerland AG.",Automatic approaches - Classifier training - Decision tree classifiers - Docstring - Dynamic languages - Multi layer perceptron - Python - Random forests,"Luo, Yang(1); Ma, Wanwangying(1); Li, Yanhui(1); Chen, Zhifei(1); Chen, Lin(1)",2018.0,Conference,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),10.1007/978-3-030-04272-1_5,"(1) State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China",Springer Verlag,English,03029743,
Compendex,A python framework for multi-agent simulation of networked resource systems,"Modelling managed resource systems can involve the integration of multiple software modules into a single codebase. These modules are often written by non-software specialists, using heterogeneous terminologies and modelling approaches. One approach to model integration is to use a central structure to which each external module connects. This common interface acts as an agreed mode of communication for all contributors. We propose the Python Network Simulation (Pynsim) Framework, an open-source library for building simulation models of networked systems. Pynsim's central structure is a network, but it also supports non-physical entities like organisational hierarchies. We present two case studies using Pynsim which demonstrate how its use can lead to flexible and maintainable simulation models. First is a multi-agent model simulating the hydrologic and human components of Jordan's water system. The second uses a multi-objective evolutionary algorithm to identify the best locations for new run-of-river power plants in Switzerland. © 2018",Building simulation model - Modelling framework - Multi agent simulation - Multi objective evolutionary algorithms - Open sources - Open-source libraries - Python - Simulation,"Knox, Stephen(1); Meier, Philipp(2); Yoon, Jim(3); Harou, Julien J.(1)",2018.0,Journal,Environmental Modelling and Software,10.1016/j.envsoft.2018.01.019,"(1) University of Manchester, Manchester, United Kingdom; (2) Eawag, Department of Surface Waters - Research and Management, Kastanienbaum, Switzerland; (3) Stanford University, Palo Alto; CA, United States",Elsevier Ltd,English,13648152,
Compendex,"PLACE: An Open-Source Python Package for Laboratory Automation, Control, and Experimentation","In modern laboratories, software can drive the full experimental process from data acquisition to storage, processing, and analysis. The automation of laboratory data acquisition is an important consideration for every laboratory. When implementing a laboratory automation scheme, important parameters include its reliability, time to implement, adaptability, and compatibility with software used at other stages of experimentation. In this article, we present an open-source, flexible, and extensible Python package for Laboratory Automation, Control, and Experimentation (PLACE). The package uses modular organization and clear design principles; therefore, it can be easily customized or expanded to meet the needs of diverse laboratories. We discuss the organization of PLACE, data-handling considerations, and then present an example using PLACE for laser-ultrasound experiments. Finally, we demonstrate the seamless transition to post-processing and analysis with Python through the development of an analysis module for data produced by PLACE automation. © 2014 Society for Laboratory Automation and Screening.",Design Principles - Laboratory automation - Laser ultrasound - Modular organizations - Open sources - Post processing - Python - Seamless transition,"Johnson, Jami L.(1); tom Wörden, Henrik(2); van Wijk, Kasper(1)",2015.0,Journal,Journal of Laboratory Automation,10.1177/2211068214553022,"(1) Department of Physics, University of Auckland, Auckland, New Zealand; (2) Institute for Nonlinear Dynamics, Georg-August-Universität, Göttingen, Germany",SAGE Publications Inc.,English,22110682,
Compendex,PyTOPS: A Python based tool for TOPSIS,"The Technique for Order Preference by Similarity to Ideal Solution (TOPSIS) method determines the best solution from a set of alternatives with certain attributes. The best alternative is chosen based on its Euclidean distance from the ideal solution. TOPSIS is widely used in various multi-attribute decision making problems such as supply chain logistics, marketing management, environmental management or chemical engineering. Despite the extensive use of this method, there is no free and open-source software (FOSS) for TOPSIS with comprehensive post-analysis extensions. Therefore, this paper describes a Python-3 based tool PyTOPS for TOPSIS with the Berkeley Software Distribution (BSD)-3-Clause license. © 2019 The Authors",Free and open source softwares - Marketing management - Multi attribute decision making - Python - Software distributions - Supply chain logistics - Technique for order preference by similarity to ideal solutions - TOPSIS,"Yadav, Vinay(1); Karmakar, Subhankar(1,2,3); Kalbar, Pradip P.(2,3); Dikshit, A.K.(1,3)",2019.0,Journal,SoftwareX,10.1016/j.softx.2019.02.004,"(1) Centre for Environmental Science and Engineering, Indian Institute of Technology Bombay, Mumbai; 400076, India; (2) Inter Disciplinary Program on Climate Change, Indian Institute of Technology Bombay, Mumbai; 400076, India; (3) Centre for Urban Science and Engineering, Indian Institute of Technology Bombay, Mumbai; 400076, India",Elsevier B.V.,English,,
Compendex,Pyomo: Modeling and solving mathematical programs in Python,"We describe Pyomo, an open source software package for modeling and solving mathematical programs in Python. Pyomo can be used to define abstract and concrete problems, create problem instances, and solve these instances with standard open-source and commercial solvers. Pyomo provides a capability that is commonly associated with algebraic modeling languages such as AMPL, AIMMS, and GAMS. In contrast, Pyomo's modeling objects are embedded within a full-featured highlevel programming language with a rich set of supporting libraries. Pyomo leverages the capabilities of the Coopr software library, which together with Pyomo is part of IBM's COIN-OR open-source initiative for operations research software. Coopr integrates Python packages for defining optimizers, modeling optimization applications, and managing computational experiments. Numerous examples illustrating advanced scripting applications are provided. © Springer and Mathematical Optimization Society 2011.",Algebraic modeling - Computational experiment - High-level programming language - Mathematical program - Open source initiatives - Open sources - Python - Software libraries,"Hart, William E.(1); Watson, Jean-Paul(2); Woodruff, David L.(3)",2011.0,Journal,Mathematical Programming Computation,10.1007/s12532-011-0026-8,"(1) Data Analysis and Informatics Department, Sandia National Laboratories, PO Box 5800, MS 1318, Albuquerque, NM 87185, United States; (2) Discrete Math and Complex Systems Department, Sandia National Laboratories, PO Box 5800, MS 1318, Albuquerque, NM 87185, United States; (3) Graduate School of Management, University of California Davis, Davis, CA 95616-8609, United States",Springer Verlag,English,18672949,
Compendex,OOF: A Python engine for automating regional and coastal ocean forecasts,"Coastal and regional ocean forecasts can be currently performed on a daily basis due to the advances in numerical techniques and in computational resources. Maintenance of routine forecasts is a demanding task from the point of view of software engineering since it involves a number of new additional tasks difficult to code efficiently in the compiled languages in which ocean models are written. In this contribution, we present a set of free, open-source, portable and fast modules named OOFe{open} - Operational Ocean Forecast Python Engine that provide a way to cope with the demanding requirements of routine execution of a regional ocean model written in a compiled language (namely the Regional Ocean Modelling System, ROMS, developed in Fortran) and that make the forecast process possible and fully automatic and robust. © 2010 Elsevier Ltd.",Coastal ocean - Compiled languages - Computational resources - Numerical techniques - Ocean forecasts - Ocean modelling - Python - Regional ocean modeling,"Marta-Almeida Martinho, M.(1); Ruiz-Villarreal, Manuel(2); Otero, Pablo(2); Cobas, Marcos(2); Peliz, Alvaro(3); Nolasco, Rita(1); Cirano, Mauro(4); Pereira, Janini(4)",2011.0,Journal,Environmental Modelling and Software,10.1016/j.envsoft.2010.11.015,"(1) Centro de Estudos do Ambiente e do Mar, Universidade de Aveiro, Campus de Santiago, 3810-193 Aveiro, Portugal; (2) Instituto Español de Oceanografía, IEO, Centro Oceanográfico A Coruña, Muelle de Animas s/n, 15001 A Coruña, Galicia, Spain; (3) Instituto de Oceanografia, Universidade de Lisboa, 1749-016 Lisboa, Portugal; (4) Departamento de Física da Terra e do Meio Ambiente, Universidade Federal da Bahia, 40170-280 Salvador, Bahia, Brazil",Elsevier Ltd,English,13648152,
Compendex,How do python programs use inheritance? A replication study,"In this work we present an empirical study on the use of inheritance in a curated corpus of Python systems. Replicating a study preformed on Java, we analyzed a collection of 51 software systems written in Python, and investigated how inheritance is effectively used by Python developers in practice through a convenient set of inheritance metrics. Our results suggest that on average fewer classes inherit from other classes than in Java, but more classes are inherited from. We also see a sort of symmetry relating the number of ancestors and the number of descendants in each system. © 2015 IEEE.",Empirical studies - Inheritance - Metrics - Python - Replication study - Software systems,"Orru, Matteo(1); Tempero, Ewan(2); Marchesi, Michele(1); Tonelli, Roberto(1)",2015.0,Conference,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC",10.1109/APSEC.2015.51,"(1) Dept. of Electrical and Electronic Engineering (DIEE), University of Cagliari, Via Marengo, Cagliari; 09123, Italy; (2) Department of Computer Science, University of Auckland, 38 Princes Street, Auckland, New Zealand",IEEE Computer Society,English,15301362,
Compendex,Collective intelligence for smarter API recommendations in python,"Software developers use Application Programming Interfaces (APIs) of libraries and frameworks extensively while writing programs. In this context, the recommendations provided in code completion pop-ups help developers choose the desired methods. The candidate lists recommended by these tools, however, tend to be large, ordered alphabetically and sometimes even incomplete. A fair amount of work has been done recently to improve the relevance of these code completion results, especially for statically typed languages like Java. However, these proposed techniques rely on the static type of the object and are therefore inapplicable for a dynamically typed language like Python. In this paper, we present PyReco, an intelligent code completion system for Python which uses the mined API usages from open source repositories to order the results based on relevance rather than the conventional alphabetic order. To recommend suggestions that are relevant for a working context, a nearest neighbor classifier is used to identify the best matching usage among all the extracted usage patterns. To evaluate the effectiveness of our system, the code completion queries are automatically extracted from projects and tested quantitatively using a ten-fold cross validation technique. The evaluation shows that our approach outperforms the alphabetically ordered API recommendation systems in recommending APIs for standard, as well as, third-party libraries. © 2016 IEEE.",API Recommendations - Code completions - Code recommenders - Dynamic languages - Program analysis - Python - Usage mining,"Dsouza, Andrea Renika(1); Yang, Di(1); Lopes, Cristina V.(1)",2016.0,Conference,"Proceedings - 2016 IEEE 16th International Working Conference on Source Code Analysis and Manipulation, SCAM 2016",10.1109/SCAM.2016.22,"(1) Department of Informatics, University of California, Irvine, United States",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Implementation of Graphic Plugin Loading Platform Based on Python,"With the scripting language getting more and more mature, individual developers can also develop script programs according to their own needs based on the existing software library. In order to help individual developers to quickly and simply complete the software graphical problems, a graphical plugin loading platform is developed based on Python language. Through the specified plugin class standard, developers can quickly convert existing scripts or develop scripts according to plugin class, and easily realize the software graphical. © 2020 Published under licence by IOP Publishing Ltd.",Loading platforms - Plug-ins - PYTHON language - Scripting languages - Software libraries,"Liu, Yu(1); Su, Youhui(1)",2020.0,Conference,Journal of Physics: Conference Series,10.1088/1742-6596/1533/3/032071,"(1) School of Mathematics and Physics, Xuzhou Univesity of Technology, Xuzhou Jiangsu, China",Institute of Physics Publishing,English,17426588,
Compendex,ExoData: A Python package to handle large exoplanet catalogue data,"Exoplanet science often involves using the system parameters of real exoplanets for tasks such as simulations, fitting routines, and target selection for proposals. Several exoplanet catalogues are already well established but often lack a version history and code friendly interfaces. Software that bridges the barrier between the catalogues and code enables users to improve the specific repeatability of results by facilitating the retrieval of exact system parameters used in articles results along with unifying the equations and software used. As exoplanet science moves towards large data, gone are the days where researchers can recall the current population from memory. An interface able to query the population now becomes invaluable for target selection and population analysis. ExoData is a Python interface and exploratory analysis tool for the Open Exoplanet Catalogue. It allows the loading of exoplanet systems into Python as objects (Planet, Star, Binary, etc.) from which common orbital and system equations can be calculated and measured parameters retrieved. This allows researchers to use tested code of the common equations they require (with units) and provides a large science input catalogue of planets for easy plotting and use in research. Advanced querying of targets is possible using the database and Python programming language. ExoData is also able to parse spectral types and fill in missing parameters according to programmable specifications and equations. Examples of use cases are integration of equations into data reduction pipelines, selecting planets for observing proposals and as an input catalogue to large scale simulation and analysis of planets. ExoData is a Python package available freely on GitHub.1It's open source and community contributions are encouraged. The package can be easily installed using pip install exodata, detailed setup information is provided within. Program summary Program title: ExoData Catalogue identifier: AFAL_v1_0 Program summary URL:http://cpc.cs.qub.ac.uk/summaries/AFAL_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU General Public License, version 3 No. of lines in distributed program, including test data, etc.: 21884 No. of bytes in distributed program, including test data, etc.: 608434 Distribution format: tar.gz Programming language: Python 2.7, 3.4, 3.5. Computer: Any. Operating system: Any. RAM: Less than 200MB Classification: 1.7. External routines: numpy, quantities, matplotlib, requests, astropy, seaborn, pandas, six Nature of problem: Being able to use exoplanet catalogue values in code including where there may be incomplete and incorrectly formatted values. Also being able to use the whole catalogue data at once, both for user querying, visualisation and in large simulation programs. Solution method: An interface to access the catalogue including filling in missing values and parsing of the catalogue data. Creating an API useable by both humans and other code, implementation of commonly used exoplanet equations, a plotting library. Running time: A few seconds depending on task © 2016 The Author(s)",Catalogue identifiers - Catalogues - Exo-planets - Exploratory analysis - GNU general public license - Large scale simulations - Python programming language - Repeatability of results,"Varley, Ryan(1)",2016.0,Journal,Computer Physics Communications,10.1016/j.cpc.2016.05.009,"(1) Department of Physics & Astronomy, University College London, 132 Hampstead Road, London; NW1 2PS, United Kingdom",Elsevier B.V.,English,00104655,
Compendex,Multimode control of wheeled bot using python and virtual network computing,"In this paper the design and development of multiple control interfaces of a mobile wheeled bot is presented. The controller is a Raspberry Pi Zero and the software platform is developed using Python. The bot has been programmed using Python and Virtual Network Computing(VNC) viewer. The multiple control interfaces include keyboard, Graphical User Interface (GUI) in desktop computer and VNC in mobile phone. The communication between the bot and the controller is wireless communication through a local network. One of the multiple control interfaces can pass the commands to move the robot. Experimental setup included five different paths in which the robot is made to move using each of the control methods. The response timings measured are noted and evaluated. © 2018 IEEE.",Control interfaces - Design and Development - Graphical user interfaces (GUI) - Multimode control - Python - Software platforms - Virtual network computing - Wireless communications,"Megalingam, Rajesh Kannan(1); Tantravahi, Santosh(1); Kumar, Hemanth Sai Surya(1); Thokala, Nagasai(1); Rahul, Hari Sudarshan(1)",2018.0,Conference,"2018 4th International Conference on Computing Communication and Automation, ICCCA 2018",10.1109/CCAA.2018.8777597,"(1) Department of Electronics and Communication Engineering, Amrita Vishwa Vidyapeetham, Amritapuri Campus, Kollam, India",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Detecting code smells in python programs,"As a traditional dynamic language, Python is increasingly used in various software engineering tasks. However, due to its flexibility and dynamism, Python is a particularly challenging language to write code in and maintain. Consequently, Python programs contain code smells which indicate potential comprehension and maintenance problems. With the aim of supporting refactoring strategies to enhance maintainability, this paper describes how to detect code smells in Python programs. We introduce 11 Python smells and describe the detection strategy. We also implement a smell detection tool named Pysmell and use it to identify code smells in five real world Python systems. The results show that Pysmell can detect 285 code smell instances in total with the average precision of 97.7%. It reveals that Large Class and Large Method are most prevalent. Our experiment also implies Python programs may be suffering code smells further. © 2016 IEEE.",Code smell - Detection tools - Dynamic languages - Maintenance Problem - Program maintenances - Python - Real-world - Refactorings,"Chen, Zhifei(1); Chen, Lin(1); Ma, Wanwangying(1); Xu, Baowen(1)",2016.0,Conference,"Proceedings - 2016 International Conference on Software Analysis, Testing and Evolution, SATE 2016",10.1109/SATE.2016.10,"(1) State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,"Python for rapid science operations analysis, prototyping and planning for BepiColombo","The Python programming language is fast becoming the go-to language among scientists and engineers, across many disciplines, for a broad range of tasks, from on-the-fly data analysis and problem solving through quick and light solution prototyping to large scale system development. Python’s relatively shallow learning curve coupled with the seemingly endless quantities of online learning materials has allowed the language to make a considerable dent in the number of new and old users of languages such as Matlab, IDL, R, Perl and others. While Python may run slower than compiled languages like Java, C or C++, more often than not it requires less time to develop with up to 3 to 5 times less code. This, together with the fact that it does not require a paid license, has contributed heavily to its broad adoption. In addition to Python’s extensive built-in library, the language’s extensibility is evident by the large and growing number of freely available communitydeveloped packages, which provide added-functionality across a broad range of disciplines. As part of the long-term science operations analysis and planning for the ESA/JAXA BepiColombo mission to Mercury, the Science Ground Segment has embraced the power and flexibility of Python for, among other things, the preparation of inputs to and processing of outputs from in-house simulation software; this software is centrally and generically developed for several ESA missions and as such does not lend itself to the rapid and flexible addition of experimental-functionality; python, often called a ""glue"" language, provides a quick and robust means to prototype required functionalities external to large legacy software. Python has allowed, in a short time and succinct manner, many labor-intensive workflows to be reduced to the execution of single scripts. Repetitively manual operations analysis and reporting tasks have been superseded with easily shared, browser-based analysis notebooks that combine analysis, reporting and knowledge management into a single user interface. Data models and web-based interfaces for science observation definition and specification have been prototyped using intuitive yet powerful objectrelational- mapping and micro-web frameworks. Command scripts for instrument functional tests have been processed into different required formats using Python’s powerful regular expression functionalities and libraries for reading and writing commonly used data exchange formats such as Microsoft Word and Excel. This paper presents several specific use-cases for Python in Science Operations Analysis, Prototyping and Planning, demonstrates a number of examples, and outlines the gains experienced to-date through the employment of Python in the BepiColombo Science Ground Segment. © 2016 by ESA.",Bepicolombo mission - Data exchange format - Object-relational mapping - Python programming language - Required functionalities - Scientists and engineers - Simulation software - Web-based interface,"McAuliffe, Jonathan P.(1); Lanaspa, Pablo(1)",2016.0,Conference,SpaceOps 2016 Conference,10.2514/6.2016-2438,"(1) European Space Astronomy Centre (ESAC), Science Operations Dept., ESAC, Villanueva de la Cañada; Madrid; 28691, Spain","American Institute of Aeronautics and Astronautics Inc, AIAA",English,,
Compendex,pysimm: A python package for simulation of molecular systems,"In this work, we present pysimm, a python package designed to facilitate structure generation, simulation, and modification of molecular systems. pysimm provides a collection of simulation tools and smooth integration with highly optimized third party software. Abstraction layers enable a standardized methodology to assign various force field models to molecular systems and perform simple simulations. These features have allowed pysimm to aid the rapid development of new applications specifically in the area of amorphous polymer simulations. © 2016 The Authors",Abstraction layer - Amorphous polymers - Force field models - Molecular simulations - Molecular systems - Python - Structure generation - Third party software,"Fortunato, Michael E.(1); Colina, Coray M.(1,2)",2017.0,Journal,SoftwareX,10.1016/j.softx.2016.12.002,"(1) Department of Chemistry, University of Florida, Gainesville; FL; 32611, United States; (2) Department of Materials Science and Engineering and Nuclear Engineering, University of Florida, Gainesville; FL; 32611, United States",Elsevier B.V.,English,,
Compendex,Investigating developers' email discussions during decision-making in Python language evolution,"Context: Open Source Software (OSS) developers use mailing lists as their main forum for discussing the evolution of a project. However, the use of mailing lists by developers for decision-making has not received much research attention. Objective: We have explored this issue by studying developers' email discussions around Python Enhancement Proposals (PEPs). Method: Our dataset comprised 42,672 emails from six different mailing lists pertaining to PEP development. We performed multiple forms of analysis on these emails, involving both quantitative measures (e.g., frequency) and deeper analysis of specific PEP discussions (i.e., outlier analysis). Results: Out of three PEP types (Informational, Process and Standard Track), Standard Track PEPs attract a large amount of discussion (both in volume and average number of messages per proposal). Our study also identified specific PEP states and topics that generated a disproportionate amount of discussion. Conclusion: Our outcomes point to several opportunities for improving the management of an OSS team based on the knowledge generated from discussions. We have also identified several interesting avenues for future work such as identifying individuals or groups that present persuasive arguments during decision-making. © 2017 Copyright is held by the owner/author(s).",Average numbers - Large amounts - Mailing lists - Outlier analysis - Python development - PYTHON language - Quantitative measures,"Sharma, Pankajeshwara(1); Savarimuthu, Bastin Tony Roy(1); Stanger, Nigel(1); Licorish, Sherlock A.(1); Rainer, Austen(2)",2017.0,Conference,ACM International Conference Proceeding Series,10.1145/3084226.3084271,"(1) Department of Information Science, University of Otago, Dunedin, New Zealand; (2) Department of Computer Science and Software Engineering, University of Canterbury, Christchurch, New Zealand",Association for Computing Machinery,English,,
Compendex,An Empirical Study of Dynamic Types for Python Projects,"Python is a well-known dynamically-typed programming language. Due to its dynamic type, Python is flexible to solve complex situations. However, the use of dynamic type may cause many problems on correctness, security and performance. In this paper, we make an empirical study on the dynamic type of Python. First, we collect a dataset with 81 categories from the project list of Awesome Python. Then all Python files in this dataset are analyzed by Pysonar2. Type information is collected and saved for each identifier. Next, we proposed to recognize the dynamic type by comparing the analysis results from Pysonar2. After that, two research questions are put up to investigate the popularity of Python dynamic type in actual programming and the patterns of dynamic type for Python variables. The results show that 6.9% of identifiers in this dataset involve dynamic type and 79.7% of identifiers do not involve dynamic type. Besides, the patterns of dynamic type mainly appear among Transfer assignment methods. Finally, our results give implications such as optimization of naming space to improve the design of Python type system. © 2018, Springer Nature Switzerland AG.",Dynamic patterns - Dynamic type - Empirical studies - Python program - Research questions - Security and performance - Type information - Type systems,"Xia, Xinmeng(1,2); He, Xincheng(1,2); Yan, Yanyan(3); Xu, Lei(1,2); Xu, Baowen(1,2)",2018.0,Conference,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),10.1007/978-3-030-04272-1_6,"(1) State Key Laboratory for Novel Software Technology, Nanjing, China; (2) Department of Computer Science, Nanjing University, Nanjing, China; (3) School of Software, Nanjing University, Nanjing, China",Springer Verlag,English,03029743,
Compendex,Static slicing for python first-class objects,"Program slicing is an important program analysis technique and now has been used in many fields of software engineering. However, most existing program slicing methods focus on static programming languages such as C/C++ and Java, and methods on dynamic languages like Python are rarely seen. Python, a typical dynamic object-oriented language, has been more and more widely used now. In Python, everything is a first-class object, including functions, classes, methods, and modules. Existing slicing methods cannot handle the issue of these first-class objects. Therefore, this paper proposes a static slicing method for Python first-class objects. By adding all the definitions of first-class objects into the dependence model and uniformly constructing the program dependence graphs for all the functions, classes, methods, and modules, this method can effectively solve the slicing problems caused by arbitrary definitions and uses of first-class objects in Python. © 2013 IEEE.",Dependence analysis - Dependence model - Dynamic languages - Program analysis - Program dependence graph - Program slicing - Python - Slicing problem,"Xu, Zhaogui(1); Qian, Ju(2); Chen, Lin(1); Chen, Zhifei(1); Xu, Baowen(1)",2013.0,Conference,"Proceedings of the International Symposium on the Physical and Failure Analysis of Integrated Circuits, IPFA",10.1109/QSIC.2013.50,"(1) State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing 210046, China; (2) College of Computer Science and Technology, Nanjing University of Aeronautics and Astronautic, Nanjing 210016, China",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Study of defects in a program code in python,"In the paper, defects in a program code in Python are considered. It is shown that these defects are different from those in a code in C/C++; hence, there is a need in study of defects in large-scale projects with an open source code. A classification of the defects found, which is based on whether type inference is required for finding an error, is presented. It is shown that there exists a small portion of ""simple"" defects; however, the determination of the majority of the defects requires type inference. The question of what con-structs of the Python language are to be supported in type inference for finding real defects is discussed. © Pleiades Publishing, Ltd., 2013.",Large-scale projects - Open-source code - Program code - PYTHON language - Real defects - Type inferences,"Bronshteyn, I.E.(1)",2013.0,Journal,Programming and Computer Software,10.1134/S0361768813060017,"(1) Institute of System Programming, Russian Academy of Sciences, ul. Solzhenitsyna 25, Moscow, 109004, Russia",Maik Nauka Publishing / Springer SBM,English,03617688,
Compendex,CUPyDO - An integrated Python environment for coupled fluid-structure simulations,"CUPyDO, a fluid-structure interaction (FSI) tool that couples existing independent fluid and solid solvers into a single synchronization and communication framework based on the Python language is presented. Each coupled solver has to be wrapped in a Python layer in order to embed their functionalities (usually written in a compiled language) into a Python object, that is called and used by the coupler. Thus a staggered strong coupling can be achieved for time-dependent FSI problems such as aeroelastic flutter, vortex-induced vibrations (VIV) or conjugate heat transfer (CHT). The synchronization between the solvers is performed with the predictive block-Gauss-Seidel algorithm with dynamic under-relaxation. The tool is capable of treating non-matching meshes between the fluid and structure domains and is optimized to work in parallel using Message Passing Interface (MPI). The implementation of CUPyDO is described and its capabilities are demonstrated on typical validation cases. The open-source code SU2 is used to solve the fluid equations while the solid equations are solved either by a simple rigid body integrator or by in-house linear/nonlinear Finite Element codes (GetDP/Metafor). First, the modularity of the coupling as well as its ease of use is highlighted and then the accuracy of the results is demonstrated. © 2018 Elsevier Ltd",Computational aero elasticity - Coupling environments - CUPyDO - Partitioned couplings - Python wrapper,"Thomas, D.(1); Cerquaglia, M.L.(1); Boman, R.(1); Economon, T.D.(2); Alonso, J.J.(2); Dimitriadis, G.(1); Terrapon, V.E.(1)",2019.0,Journal,Advances in Engineering Software,10.1016/j.advengsoft.2018.05.007,"(1) Department of Aerospace and Mechanical Engineering, University of Liège, Liège; 4000, Belgium; (2) Department of Aeronautics and Astronautics, Stanford University, Stanford; CA; 94305, United States",Elsevier Ltd,English,09659978,
Compendex,Extraction and visualization of wind speed in a GIS environment from a weather research and forecasting (WRF) output using python,"Wind is one of the rapidly developing sources of renewable energy in the Philippines. However, determining wind speed and wind pattern poses a tough challenge to developers and researchers. The Weather Research and Forecasting (WRF) model is an open source Numerical Weather Prediction (NWP) system used for determining meteorological data like wind speed in a specific area. The default format of each WRF output is in netCDF which can be viewed in a GIS environment. Even though GIS can handle large files, it will take long processing time. An alternative is to convert the netCDF file into a format that is readable by the Grid Analysis and Display System (GrADS), which is an open source post-processing tool used to access, manipulate and visualize earth science data. However, creating a script for GrADS is very complex. Thus, this study developed a Python-based GUI software for extraction of wind speed using the PyGrADS library, a Python interface for GrADS. After extraction, these can be interpolated in a GIS environment to produce a raster file. The extracted and averaged wind speed data are from 2008 (La Niña), 2010 (El Niño) and 2014 of Quezon City WRF output with a domain of 1km by 1km resolution. Given the amount and number of data points, using python script in extracting and averaging wind speed is faster than doing it manually. A GIS environment can now project the extracted output because it has a smaller file compared to the raw netCDF file. It was also able to show that the output visualized in the GIS environment has a similar trend with the output of the previous NREL study. It can be concluded that this study has shown that extracting and averaging wind speed using Python is more flexible than other post-processing softwares.",Meteorological data - NetCDF - Numerical weather prediction - Post processing software - Python - Renewable energies - Weather research and forecasting - Weather research and forecasting models,"Tolentino, Jerome T.(1); Rejuso, Ma. Victoria(1); Villanueva, Jara Kaye(1); Inocencio, Loureal Camille(1); Ang, Ma. Rosario Concepcion(1)",2015.0,Conference,"ACRS 2015 - 36th Asian Conference on Remote Sensing: Fostering Resilient Growth in Asia, Proceedings",,"(1) Phil-LiDAR 2 REMap: Philippine Renewable Energy Resource Mapping from LiDAR Surveys, UP Training Center for Applied Geodesy and Photogrammetry (UP TCAGP), University of the Philippines, Diliman, Quezon City, Metro Manila; 1101, Philippines",Asian Association on Remote Sensing,English,,
Compendex,Python facilitates the rapid prototyping and hw/sw verification of processor centric SoCs for FPGAs,"System Python (SysPy) is a public domain design tool using Python to facilitate all prototyping phases of processor-centric SoCs for FPGAs. In previous work we used Python as a high-level description mechanism to design hardware modules and connect them to embedded processors. In this paper we show how SysPy can also facilitate high-level functional verification of a SoC when used as an Architectural Description Language (ADL), helping a designer make decisions about key architectural features early in the design phase. To the best of our knowledge our tool is unique in supporting algorithmic joint modeling of hardware and software elements of a SoC (processing and control logic) using popular Python libraries such as SciPy and NumPy following a Matlab-like syntax. The tool also supports C software development and hw/sw co-verification as it automatically compiles and executes the user's C application code for the processor core. Other important features are the generation of Value Change Dump (VCD) files for visualizing signal waveforms using popular simulation tools, and of IP-XACT metadata models for presenting hardware blocks using alternative views (Python simulation models, RTL descriptions, IP-XACT models). © 2016 IEEE.",Architectural description languages - Architectural features - Embedded processors - Functional verification - Hardware and software - High level description - HW/SW Codesign - Python,"Logaras, Evangelos(1,3); Koutsouradis, Evangelos(1); Manolakos, Elias S.(1,2)",2016.0,Conference,Proceedings - IEEE International Symposium on Circuits and Systems,10.1109/ISCAS.2016.7527465,"(1) Department of Informatics and Telecommunications, National and Kapodistrian University of Athens, Greece; (2) Wyss Institute for Biologically Inspired Engineering, Harvard University, Cambridge; MA, United States; (3) NXP Semiconductors, BU Automotive, PL Secure Car Access, Gratkorn, Austria",Institute of Electrical and Electronics Engineers Inc.,English,02714310,
Compendex,"Python for rapid science operations analysis, prototyping and planning for BepiColombo","The Python programming language is fast becoming the go-to language among scientists and engineers, across many disciplines, for a broad range of tasks, from on-the-fly data analysis and problem solving through quick and light solution prototyping to large scale system development. Python’s relatively shallow learning curve coupled with the seemingly endless quantities of online learning materials has allowed the language to make a considerable dent in the number of new and old users of languages such as Matlab, IDL, R, Perl and others. While Python may run slower than compiled languages like Java, C or C++, more often than not it requires less time to develop with up to 3 to 5 times less code. This, together with the fact that it does not require a paid license, has contributed heavily to its broad adoption. In addition to Python’s extensive built-in library, the language’s extensibility is evident by the large and growing number of freely available communitydeveloped packages, which provide added-functionality across a broad range of disciplines. As part of the long-term science operations analysis and planning for the ESA/JAXA BepiColombo mission to Mercury, the Science Ground Segment has embraced the power and flexibility of Python for, among other things, the preparation of inputs to and processing of outputs from in-house simulation software; this software is centrally and generically developed for several ESA missions and as such does not lend itself to the rapid and flexible addition of experimental-functionality; python, often called a ""glue"" language, provides a quick and robust means to prototype required functionalities external to large legacy software. Python has allowed, in a short time and succinct manner, many labor-intensive workflows to be reduced to the execution of single scripts. Repetitively manual operations analysis and reporting tasks have been superseded with easily shared, browser-based analysis notebooks that combine analysis, reporting and knowledge management into a single user interface. Data models and web-based interfaces for science observation definition and specification have been prototyped using intuitive yet powerful objectrelational- mapping and micro-web frameworks. Command scripts for instrument functional tests have been processed into different required formats using Python’s powerful regular expression functionalities and libraries for reading and writing commonly used data exchange formats such as Microsoft Word and Excel. This paper presents several specific use-cases for Python in Science Operations Analysis, Prototyping and Planning, demonstrates a number of examples, and outlines the gains experienced to-date through the employment of Python in the BepiColombo Science Ground Segment. © 2016, American Institute of Aeronautics and Astronautics Inc, AIAA. All rights reserved.",Bepicolombo mission - Data exchange format - Object-relational mapping - Python programming language - Required functionalities - Scientists and engineers - Simulation software - Web-based interface,"McAuliffe, Jonathan P.(1); Lanaspa, Pablo(1)",2016.0,Conference,"14th International Conference on Space Operations, 2016",,"(1) Science Operations Dept., European Space Astronomy Centre (ESAC), Villanueva de la Cañada, Madrid; 28691, Spain","American Institute of Aeronautics and Astronautics Inc, AIAA",English,,
Compendex,Snakes in Paradise?: Insecure python-related coding practices in stack overflow,"Despite being the most popular question and answer website for software developers, answers posted on Stack Overflow (SO) are susceptible to contain Python-related insecure coding practices. A systematic analysis on how frequently insecure coding practices appear in SO answers can help the SO community assess the prevalence of insecure Python code blocks in SO. An insecure coding practice is recurrent use of insecure coding patterns in Python. We conduct an empirical study using 529,054 code blocks collected from Python-related 44,966 answers posted on SO. We observe 7.1% of the 44,966 Python-related answers to include at least one insecure coding practice. The most frequently occurring insecure coding practice is code injection. We observe 9.8% of the 7,444 accepted answers to include at least one insecure code block. We also find user reputation not to relate with the presence of insecure code blocks, suggesting that both high and low-reputed users are likely to introduce insecure code blocks. © 2019 IEEE.",Coding - Practices - Python - Reputation - Security - Stack overflow,"Rahman, Akond(1); Farhana, Effat(1); Imtiaz, Nasif(1)",2019.0,Conference,IEEE International Working Conference on Mining Software Repositories,10.1109/MSR.2019.00040,"(1) North Carolina State University, Raleigh; NC, United States",IEEE Computer Society,English,21601852,
Compendex,PyModPDE: A python software for modified equation analysis,"The modified equation is a useful tool in the analysis of numerical methods for partial differential equations (PDEs). It gives insight into the stability, diffusion, and dispersion properties of a given numerical scheme. Its derivation, however, is rather tedious and error-prone due to the enormous amount of algebra involved. PyModPDE is a python software that uses a novel approach to generate the modified equation. It takes a discrete PDE as its input and outputs the modified equation in LaTeX format. We discuss the novel approach on which PyModPDE is based and then validate the software using one and two-dimensional PDEs. PyModPDE serves as an essential tool for computational scientists and engineers for both educational and research purposes. © 2020 The Authors",Computational scientists - Dispersion properties - Input and outputs - Modified equation - Modified equation analysis - Numerical scheme - Partial Differential Equations (PDEs) - Research purpose,"Karam, Mokbel(1); Sutherland, James C.(1); Saad, Tony(1)",2020.0,Journal,SoftwareX,10.1016/j.softx.2020.100541,"(1) Department of Chemical Engineering, University of Utah, Salt Lake City, Utah, United States",Elsevier B.V.,English,,
Compendex,Development of python based software tool in predicting antigenicity of proteins,"Peptide based vaccine designing and immunodiagnosis is the most important field in the diagnosis and therapy of various infectious and noninfectious diseases. It does critically require identification of regions in the pathogen native protein sequences, which are recognized by either B-cell or T-cell receptors. The antigenic regions of protein recognized by the binding sites of immunoglobulin molecules are called B-cell epitopes. The experimental identification of epitopes binding specifically to anti-peptide antibodies requires the binding assay of each peptide in an antigenic protein sequence which are very laborious and time consuming. A bioinformatics approach to predict linear B cell epitope in a protein sequence can be the best alternative to reduce the number of peptides to be synthesized for wet lab experimentation. The aim of this study is to develop a Python based software with graphical user interface for predicting the antigenic properties of protein. Hence the tool was named as Analysis of protein sequence and antigenicity prediction (ASAP). ASAP predicts the antigenicity of the protein sequence from its amino acid sequence, based on Chou Fasman turns and Antigenic index.",Amino acid sequence - Anti-peptide antibodies - Antigenicity - Bioinformatic tools - Experimental identification - Immunoglobulin molecules - Protein sequences - T-cell receptors,"Ramesh Babu, Polani B.(1); Krishnamoorthy, P.(1); Krishna, Vamsi(1)",2012.0,Journal,Journal of Chemical and Pharmaceutical Research,,"(1) Department of Bioinformatics, School of Bioengineering, Bharath University, Chennai, Tamil Nadu, India","Journal of Chemical and Pharmaceutical Research, 3/668 Malviya Nagar, Jaipur, Rajasthan, India",English,,
Compendex,A Python framework for programming autonomous robots using a declarative approach,"This paper describes PROFETA (standing for Python RObotic Framework for dEsigning sTrAtegies), a framework for the programming of autonomous robots based on the Belief-Desire-Intention (BDI) software model. PROFETA is inspired by AgentSpeak(L), a formal language for the creation of BDI software agents. The framework is implemented in Python, and utilizes the metaprogramming capabilities offered by this language to implement the operational semantics of AgentSpeak(L). PROFETA provides a flexible environment offering both traditional object-oriented imperative constructs and declarative constructs, enabling the definition of a robot's high-level behavior in a simple, natural way. The contributions of this paper, in the area of software design and development, are: (i) a methodology, equipped with suitable technical solutions, to extend the Python programming language with AgentSpeak(L) declarative constructs; and (ii) a unified environment enabling software components for robots to be developed using a single language (Python) within a single runtime environment (the Python virtual machine). A comparison between PROFETA and other similar frameworks is provided, illustrating common aspects and key differences. © 2017 Elsevier B.V.",AgentSpeak - BDI model - Belief-desire-intentions - Metaprogramming capabilities - Operator overloading - Python - Python programming language - Software design and development,"Fichera, Loris(1); Messina, Fabrizio(1); Pappalardo, Giuseppe(1); Santoro, Corrado(1)",2017.0,Journal,Science of Computer Programming,10.1016/j.scico.2017.01.003,"(1) Department of Mathematics and Computer Science, University of Catania, Italy",Elsevier B.V.,English,01676423,
Compendex,Formal in the informal: A multi-level analysis of core python developers' tweets,"Context: Contributors to Open Source Software (OSS) development projects use social media to discuss personal and work-related issues. While there has been some interest in studying social media posts of developers, the investigation of the use of this medium by core contributors has not received much attention. Such an investigation could be useful given the technical and social insights such members bring to their team's development. Objective: To bridge this gap, we have investigated Python core developers' posts on Twitter. Method: We systematically collected 27,805 tweets from 80 core developers' Twitter accounts of which 3,282 (11.8%) were relevant to Python development. We performed multiple forms of analyses on these tweets, involving bottom-up thematic analysis on three levels (topics, questions and answers, and decision-making). We also conducted social network analysis of the topics of interest of core developers. Results: Core developers' Python-related tweets fall under 23 different topics (in 5 higher-level topic categories). The top two categories were software-related and community-related tweets. Core developers also used Twitter as a medium to discuss technical issues related to Python software development in the form of questions and answers (Q&As) to a large extent (45% of the tweets). Moreover, this informal medium is also used for decision-making 2% of the time, supplementing the formal channels of decision-making (i.e., mailing lists). Additionally, we have identified five different groups of core developers based on their topic interests. Conclusion: Although informal in nature, social media platforms provide another window, beyond formal project repositories, for understanding OSS ecosystems. Consequently, informal sources must be integrated with formal sources to obtain a comprehensive view of OSS development activities. © 2018 IEEE.",Core developers - Development activity - Multi-level analysis - Python - Social media - Social media platforms - Thematic analysis - Tweet Analysis,"Yasir, Muhammad(1); Michael, Kevin(1); Savarimuthu, Bastin Tony Roy(1); Licorish, Sherlock A.(1)",2018.0,Conference,"Proceedings - 25th Australasian Software Engineering Conference, ASWEC 2018",10.1109/ASWEC.2018.00028,"(1) Dept. of Information Science, University of Otago, Dunedin, New Zealand",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,"Open source, agent-based energy market simulation with python","Increasingly, the electric energy transmitted and distributed by national power systems is traded competitively in free markets. Long-term decisions must be made by authorities as to the structure of energy markets and the regulations that govern interactions between participants. It is not practical to experiment with real energy markets and in order to establish the potential effects of making these decisions there are few options but to simulate the markets computationally. This paper proposes that the complexity of power systems and the associated energy markets necessitates an open approach in their modelling and simulation. It presents an open source software package for simulating electric energy markets using the Python programming language. Power systems and their associated constraints are modelled using traditional steady-state analysis techniques. While market participants are represented by reactive agents that learn through reinforcement. The software and all of its dependencies are open and freely available to the scientific community.",Ac optimal power flows - Agent based simulation - Electric energy markets - Energy markets - Modelling and simulations - National power systems - Python programming language - Steady-state simulations,"Lincoln, Richard W.(1); Galloway, Stuart(1); Burt, Graeme(1)",2009.0,Conference,"2009 6th International Conference on the European Energy Market, EEM 2009",10.1109/EEM.2009.5207125,"(1) Department of Electronic and Electrical Engineering, University of Strathclyde, Glasgow, G1 1XW, United Kingdom",IEEE Computer Society,English,,
Compendex,DockerizeMe: Automatic Inference of Environment Dependencies for Python Code Snippets,"Platforms like Stack Overflow and GitHub's gist system promote the sharing of ideas and programming techniques via the distribution of code snippets designed to illustrate particular tasks. Python, a popular and fast-growing programming language, sees heavy use on both sites, with nearly one million questions asked on Stack Overflow and 400 thousand public gists on GitHub. Unfortunately, around 75% of the Python example code shared through these sites cannot be directly executed. When run in a clean environment, over 50% of public Python gists fail due to an import error for a missing library. We present DockerizeMe, a technique for inferring the dependencies needed to execute a Python code snippet without import error. DockerizeMe starts with offline knowledge acquisition of the resources and dependencies for popular Python packages from the Python Package Index (PyPI). It then builds Docker specifications using a graph-based inference procedure. Our inference procedure resolves import errors in 892 out of nearly 3,000 gists from the Gistable dataset for which Gistable's baseline approach could not find and install all dependencies. © 2019 IEEE.",Configuration management - Dependencies - Docker - Environment Inference - Python,"Horton, Eric(1); Parnin, Chris(1)",2019.0,Conference,Proceedings - International Conference on Software Engineering,10.1109/ICSE.2019.00047,"(1) North Carolina State University, United States",IEEE Computer Society,English,02705257,
Compendex,Application of python language and arcgis software in RS data management,"It is very common to use the RS data for the work of researchers. Facing a mass of RS data, This paper use the scripting language python language and arcgis software,organize the corresponding program and make tools, integrated into arcgistoolbox, and consequently to simplify data management. The python and arcgis software are very useful to promote the data management speed and precision to the work.there we take Gorges Reservoir Area RS data as an example. © 2011 IEEE.",Arcgis - Arcgistoolbox - Python - Reservoir area - RS data,"Zhang, Jing(1); Luo, Hongxia(1); Zhang, Xueqing(2)",2011.0,Conference,"2011 International Conference on Remote Sensing, Environment and Transportation Engineering, RSETE 2011 - Proceedings",10.1109/RSETE.2011.5964225,"(1) School of Geographical Sciences, Southwest University, Chongqing, China; (2) School of Geographical Sciences, Chongqing Normal University, Chongqing, China",IEEE Computer Society,English,,
Compendex,A python software platform for cooperatively tracking multiple GPS receivers,"Existing software platforms are not well suited to the task of processing data from a network of GNSS receivers. Because data are expected to be shared amongst networked receivers, not only must new algorithms be designed, but new software platforms upon which these algorithms can be tested must also be built. In this work a software platform for simultaneously processing data from many GNSS receivers is designed and implemented. An object oriented design philosophy is used so that objects such as receivers, networks of receivers, and constellations of satellites are all defined as separate blocks of code with the capacity to store relevant data and perform object-specific functions. Under this coding design and with this software platform, experiments on cooperative positioning that leverage shared data between receivers in a network can be quickly implemented. Therefore the fast prototyping of ideas in cooperative GNSS can be realized. As an example of this, a real-world experiment involving data from two SiGe Samplers was performed at Lake Titicaca in Peru in which both receivers shared tracking data to help prevent loss-of- lock during scalar tracking. Acquisition, cooperative scalar tracking, and navigation were all performed using the software platform developed in this work. For the example experiment of this project, two receivers on a moving boat maintained a fixed baseline and thus shared code phase information to prevent loss-of-lock situations due to signal loss at either receiver. Experimental results show that indeed loss-of-lock is prevented. In addition, example usages from this experiment highlight the benefits of using the Python Software Receiver over traditional software receivers. Copyright © (2014) by the Institute of Navigation All rights reserved.",Fast prototyping - GNSS receivers - GPS receivers - Object oriented design - Real world experiment - Software platforms - Software receivers - Tracking data,"Wycoff, Eliot(1); Gao, Grace Xingxin(1)",2014.0,Conference,"27th International Technical Meeting of the Satellite Division of the Institute of Navigation, ION GNSS 2014",,"(1) University of Illinois at Urbana-Champaign, United States",Institute of Navigation,English,,
Compendex,PyMaxEnt: A Python software for maximum entropy moment reconstruction,"PyMaxEnt is a software that implements the principle of maximum entropy to reconstruct functional distributions given a finite number of known moments. The software supports both continuous and discrete reconstructions, and is very easy to use through a single function call. In this article, we set out to verify and validate the software against several tests ranging from the reconstruction of discrete probability distributions for biased dice all the way to multimodal Gaussian and beta distributions. Written in Python, PyMaxEnt provides a robust and easy-to-use implementation for the community. © 2019 The Authors",Beta distributions - Discrete probability distribution - Discrete reconstruction - Finite number - Function calls - Moment problems - Principle of Maximum Entropy - Software support,"Saad, Tony(1); Ruai, Giovanna(1)",2019.0,Journal,SoftwareX,10.1016/j.softx.2019.100353,"(1) Department of Chemical Engineering, University of Utah Salt Lake City, UT; 84102, United States",Elsevier B.V.,English,,
Compendex,Software review: DEAP (Distributed Evolutionary Algorithm in Python) library,"We give a critical assessment of the DEAP (Distributed Evolutionary Algorithm in Python) open-source library and highly recommend it to both beginners and experts alike. DEAP supports a range of evolutionary algorithms including both strongly and loosely typed Genetic Programming, Genetic Algorithm, and Multi-Objective Evolutionary Algorithms such as NSGA-II and SPEA2. It contains most of the basic functions required by evolutionary computation, so that its users can easily construct various flavours of both single and multi-objective evolutionary algorithms and execute them using multiple processors. It is ideal for fast prototyping and can be used with an abundance of other Python libraries for data processing as well as other machine learning techniques. © 2018, Springer Science+Business Media, LLC, part of Springer Nature.",Critical assessment - Distributed evolutionary algorithms - Fast prototyping - Machine learning techniques - Multi objective evolutionary algorithms - Multiple processors - Open-source libraries - Software reviews,"Kim, Jinhan(1); Yoo, Shin(1)",2019.0,Journal,Genetic Programming and Evolvable Machines,10.1007/s10710-018-9341-4,"(1) School of Computing, KAIST, 291 Daehak Ro, Yuseong Gu, Daejeon; 34141, Korea, Republic of",Springer New York LLC,English,13892576,
Compendex,Using software metrics for predicting vulnerable code-components: A study on java and python open source projects,"Software vulnerabilities often remain hidden until an attacker exploits the weak/insecure code. Therefore, testing the software from a vulnerability discovery perspective becomes challenging for developers if they do not inspect their code thoroughly (which is time-consuming). We propose that vulnerability prediction using certain software metrics can support the testing process by identifying vulnerable code-components (e.g., functions, classes, etc.). Once a code-component is predicted as vulnerable, the developers can focus their testing efforts on it, thereby avoiding the time/effort required for testing the entire application. The current paper presents a study that compares how software metrics perform as vulnerability predictors for software projects developed in two different languages (Java vs Python). The goal of this research is to analyze the vulnerability prediction performance of software metrics for different programming languages. We designed and conducted experiments on security vulnerabilities reported for three Java projects (Apache Tomcat 6, Tomcat 7, Apache CXF) and two Python projects (Django and Keystone). In this paper, we focus on a specific type of code component: Functions. We apply Machine Learning models for predicting vulnerable functions. Overall results show that software metrics-based vulnerability prediction is more useful for Java projects than Python projects (i.e., software metrics when used as features were able to predict Java vulnerable functions with a higher recall and precision compared to Python vulnerable functions prediction). © 2019 IEEE.",Machine learning models - Open source projects - Prediction performance - Security vulnerabilities - Software metrics - Software security - Software vulnerabilities - Vulnerability discovery,"Chong, Tai-Yin(1); Anu, Vaibhav(1); Sultana, Kazi Zakia(1)",2019.0,Conference,"Proceedings - 22nd IEEE International Conference on Computational Science and Engineering and 17th IEEE International Conference on Embedded and Ubiquitous Computing, CSE/EUC 2019",10.1109/CSE/EUC.2019.00028,"(1) Department of Computer Science, Montclair State University, United States",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,"Comparation between free software (Python) and proprietary software (Matlab) for digital image processing, processing speed measurement and peripheral board control, applied to the monitoring of pyroclastic flows in eruptive processes","The digital image processing has its strength in the autonomy and robustness of a system to perform multitasks, as detect areas of interest or locate variables inside images and for that, there are different types of free software based on C ++ or private software, which offer different characteristics like programming times, execution times, processing speed of frames and number of features recognized in that processing, having advantages and limitations of one over other. These are the main reasons to develop a study that let to determine clearly which are the differences that exist between proprietary and privative software for the processing of images and control of outputs based on the analysis of pyroclastic flows of volcanic eruptions.",Eruptive process - Free software - Processing speed - Proprietary software - Pyroclastic flows - Python - Volcanic eruptions,"Ulloa, Christyan Mario Cruz(1); Vargas, Francisco Xavier Viteri(1); Llanga, Kevin Iván Barrera(1); Chipantasi, Darío José Mendoza(1)",2017.0,Conference,"XII Jornadas Iberoamericanas de Ingenieria de Software e Ingenieria del Conocimiento 2017, JIISIC 2017 - Held Jointly with the Ecuadorian Conference on Software Engineering, CEIS 2017 and the Conference on Software Engineering Applied to Control and Automation Systems, ISASCA 2017",,"(1) Universidad de Las Fuerzas Armadas ESPE, Sangolquí; 171-5-231B, Ecuador",Escuela Superior Politecnica de Chimborazo,Spanish,,
Compendex,Towards studying the evolution of technical debt in the Python projects from the apache software ecosystem,The topic of technical debt has gained significant attention from researchers in recent years since its management has significant impact of software development. Several studies that analyze technical debt evolution from different perspectives; however since most of these studies are done for Java very little is known about the evolution of technical debt in software ecosystems consisting of projects written in other languages. In this paper we run a study across nine Python open-source software projects belonging to the Apache Software Foundation to investigate the amount of technical debt that is paid back. To measure technical debt we use one of the standard tools in industry: SonarQube. We investigate the impact of using the 28 default rules of SonarQube for Python versus using an extended set of 208 rules to detect instances of technical debt. © 2018 CEUR-WS. All rights reserved.,Apache software foundations - Default rule - Open source software projects - Software ecosystems - Standard tools - Technical debts,"Tan, Jie(1); Lungu, Mircea(2); Avgeriou, Paris(1)",2018.0,Conference,CEUR Workshop Proceedings,,"(1) University of Groningen, Groningen, Netherlands; (2) IT University of Copenhagen, Copenhagen, Denmark",CEUR-WS,English,16130073,
Compendex,A standard python environment for software applications at the Robert C. Byrd Green Bank Telescope (GBT),"Since 2003, the monitor and control software systems for the Robert C. Byrd Green Bank Telescope (GBT) have been substantially redesigned to make the telescope easier to use. The result is the release of the Astronomer's Integrated Desktop (Astrid), an observation management platform used to create and submit scheduling blocks, monitor their progress on the telescope, and provide a real time, quick look data display. Using Astrid, the astronomer launches one application and has access to all of the software, documentation, and feedback facilities that are required to conduct an interactive observing session. These systems together provide a common look and feel for GBT software applications, enable offline observation preparation, and facilitate dynamic scheduling and remote observing.",Framework - Plotting - Python - Quick look - Quick look pipelines - Scheduling blocks,"Radziwill, Nicole M.(1); Shelton, Amy L.(1)",2006.0,Conference,Proceedings of SPIE - The International Society for Optical Engineering,10.1117/12.670476,"(1) National Radio Astronomy Observatory, P.O. Box 2, Green Bank, WV 24944, United States",SPIE,English,0277786X,0819463396
Compendex,Matplotlib in python,Python and one of plotting module matplotlib was explained briefly. Existing softwares may be enough to solve and display the results of scientific problems. But matplotlib also stepping with its Pythonic programming style to this area of the software technology. The use of matplotlib is illustrated with specific practical applications. The applied illustrations code and results have been suggested. © 2014 IEEE.,matplotlib - numpy - Programming styles - PyLab - Python - Software technology,"Ari, Niyazi(1); Ustazhanov, Makhamadsulton(1)",2014.0,Conference,"Proceedings of the 11th International Conference on Electronics, Computer and Computation, ICECCO 2014",10.1109/ICECCO.2014.6997585,"(1) Nigerian Turkish Nile University, Abuja, Nigeria",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,PyXhon: Dynamic detection of security vulnerabilities in Python extensions,"Python programming language supports third-party software extensions which are important for software prototype development. This paper presents a security enhancement plug-in PyXhon, that detects the security vulnerabilities and privacy leaks from third-party extensions. We propose the Function Oriented Analysis, which developers use to monitor all function-call procedures; dynamic Byte Instruction Trace Analysis, which infers the behaviors of importing modules and accessing private DLL; and security policies, which provides strategies to accept or reject extensions. These security mechanisms do not require Python language features so as to be completely transparent to Python applications. PyXhon could generate a violation report, which helps developers quickly locate and analyze suspect code of extensions. To demonstrate the usefulness of PyXhon, we have analyzed more than 30 popular Python third-party extensions. Our experiments show that, with the violations of some extensions, most third-party code respect the resources privilege. © 2012 IEEE.",Dynamic detection - Function oriented analysis - Prototype development - Python programming language - Security enhancements - Security mechanism - Security vulnerabilities - Third party software,"Sun, Ming(1); Gu, Dawu(1); Li, Juanru(1); Li, Bailan(1)",2012.0,Conference,"Proceedings of 2012 IEEE International Conference on Information Science and Technology, ICIST 2012",10.1109/ICIST.2012.6221690,"(1) Department of Computer Science and Engineering, Shanghai Jiao Tong University, Shanghai, China",IEEE Computer Society,English,,
Compendex,Performance of python CS1 students in mid-level non-python CS courses,"If you change the CS1 language to Python, what is the impact on the rest of the curriculum? In earlier work we examined the impact of changing CS1 from C++ to Python while leaving CS2 in C++. We found that Python-prepared CS1 students fared no differently in CS2 than students whose CS1 course was in C++, even though CS2 was taught in C++ and covered the same topics as in previous years. Was that an anomaly? What happens in the next tier of courses? When our CS1 was first changed to Python there were many students who had taken CS1 in C++ still in the system. The result is that there is a cadre of students with either CS1 in Python or CS1 in C++ moving together through our curriculum. This one-time occurrence is an opportunity to study the students with many variables fixed. Our next tier of courses is a C-based computer organization course, a C++ based object-oriented software design course, and a data structures course. We found that the students who started with Python fared as well as the CS1 C++ students. As before, the best predictor of performance was their college GPA. Python versus C++ CS1 preparation was not a predictor of performance in any course. We conclude again that in our C++ based curriculum changing CS1 to Python had no negative impact on student performance and did not require any significant change in those subsequent courses. Copyright 2010 ACM.",Computer organization - Introduction to programming - Object-oriented software designs - One-time - Previous year - Python - Student performance,"Enbody, Richard J.(1); Punch, William F.(1)",2010.0,Conference,SIGCSE'10 - Proceedings of the 41st ACM Technical Symposium on Computer Science Education,10.1145/1734263.1734437,"(1) Department of Computer Science and Engineering, Michigan State University, East Lansing, MI, United States",Association for Computing Machinery (ACM),English,,
Compendex,PhasorToolBox-A Python Package for Synchrophasor Application Prototyping,"Despite the rapid expansion of open source computer software applications, the development of synchrophasor applications has not kept pace. This paper presents a development package for quick prototyping of synchrophasor applications using Python programming language, specifically for the retrieval of data from any device that adopts the IEEE C37.118.2-2011 standard. The package provides a high-level interface for developers to quick prototyping for the rapid development of advanced synchrophasor applications. The asynchronous design pattern makes the packet robust to handle a high volume of I/O without compromising real-Time performance. © 2018 IEEE.",C37.118 - High level interface - Phasor data concentrators - power system - python - Python programming language - Real time performance - Software applications,"Zhong, Xingsi(1); Arunagirinathan, Paranietharan(1); Jayawardene, Iroshani(1); Venayagamoorthy, Ganesh Kumar(1,2); Brooks, Richard(1)",2018.0,Conference,"Clemson University Power Systems Conference, PSC 2018",10.1109/PSC.2018.8664020,"(1) Real-Time Power and Intelligent Systems Laboratory, Clemson University, Clemson; SC; 29634, United States; (2) School of Engineering, University of Kwazulu-Natal, Durban; 4041, South Africa",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Making music with computers: Creative programming in python,"Teach Your Students How to Use Computing to Explore Powerful and Creative Ideas In the twenty-first century, computers have become indispensable in music making, distribution, performance, and consumption. Making Music with Computers: Creative Programming in Python introduces important concepts and skills necessary to generate music with computers. It interweaves computing pedagogy with musical concepts and creative activities, showing students how to integrate the creativity and design of the arts with the mathematical rigor and formality of computer science. The book provides an introduction to creative software development in the Python programming language. It uses innovative music-creation activities to illustrate introductory computer programming concepts, including data types, algorithms, operators, iteration, lists, functions, and classes. The authors also cover GUIs, event-driven programming, big data, sonification, MIDI programming, client-server programming, recursion, fractals, and complex system dynamics. Requiring minimal musical or programming experience, the text is designed for courses in introductory computer science and computing in the arts. It helps students learn computer programming in a creative context and understand how to build computer music applications. Also suitable for self-study, the book shows musicians and digital music enthusiasts how to write music software and create algorithmic music compositions. Web Resource A supplementary website (http://jythonMusic.org) provides a music library and other software resources used in the text. The music library is an extension of the jMusic library and incorporates other cross-platform programming tools. The website also offers example course and associated media resources. © 2014 by Taylor & Francis Group, LLC.",Algorithmic music compositions - Complex system dynamics - Event-driven programming - Introductory computer programming - Introductory computer science - Programming experience - Python programming language - Software resources,"Manaris, Bill(1); Brown, Andrew R.(2)",2014.0,Book,Making Music with Computers: Creative Programming in Python,10.1201/b15104,"(1) College of Charleston, SC, United States; (2) Queensland University of Technology, Keperra, Australia",CRC Press,English,,
Compendex,SPYSE: A semantic search engine for python packages and modules,"Code reuse is a common practice among software developers, whether novices or experts. Developers often rely on online resources in order to find code to reuse. For Python, the Python Package Index (PyPI) contains all packages developed for the community and is the largest catalog of reusable, open source packages developers can consult. While a valuable resource, the state of the art PyPI search has very limited capabilities, making it hard for developers to find useful, high quality Python code to use for their task at hand. We introduce SPYSE (Semantic PYthon Search Engine), a web-based search engine that overcomes the limitations of the state of the art, making it easier for developers to find useful code. The power of SPYSE lays in the combination of three different aspects meant to provide developers with relevant, and at the same time high quality code: code semantics, popularity, and code quality. SPYSE also allows searching for modules, in addition to packages, which opens new reuse opportunities for developers, currently not supported. TOOL URL: https://pypi.compgeom.com VIDEO URL: https://youtu.be/Praglw-vS50 © 2016 ACM.",Code reuse - Code semantics - Online resources - Open source package - Python - Semantic search engines - Software developer - State of the art,"Imminni, Shiva Krishna(1); Hasan, Mir Anamul(1); Duckett, Michael(1); Sachdeva, Puneet(1); Karmakar, Sudipta(1); Kumar, Piyush(1); Haiduc, Sonia(1)",2016.0,Conference,Proceedings - International Conference on Software Engineering,10.1145/2889160.2889174,"(1) Florida State University, Tallahassee; FL; 32303, United States",IEEE Computer Society,English,02705257,
Compendex,A statistical comparison of Java and python software metric properties,"This paper presents a statistical analysis of 20 opens ource object-oriented systems with the purpose of detecting differences in metrics distribution between Java and Python projects. We selected ten Java projects from the Java Qual itas Corpus and ten projects written in Python. For each system, we considered 10 class-level software metrics. We performed a best fit procedure on the empirical distributions through the log-normal distribution and the double Pareto distribution to identify differences between the two languages. Even though the statistical distributions for projects written in Java and Python may appear the same for lower values of the metric, performing the procedure with the double Pareto distribution for the Number of Local Methods metric reveals that major differences can be noticed along the queue of the distributions. On the contrary, the same analysis performed with the Number of Statements metric reveals that only the initial portion of the double Pareto distribution shows differences between the two languages. In addition, the dispersion parameter associated to the log-normal distribution fit for the total Number Of Methods can be used for distinguishing Java projects from Python projects. © 2016 ACM.",Dispersion parameters - Double Pareto distribution - Empirical distributions - Log-normal distribution - Object-oriented system - Software metrices - Statistical comparisons - Statistical distribution,"Destefanis, Giuseppe(1); Ortu, Marco(2); Porru, Simone(2); Swift, Stephen(1); Marchesi, Michele(2)",2016.0,Conference,"Proceedings - 7th International Workshop on Emerging Trends in Software Metrics, WETSoM 2016",10.1145/2897695.2897697,"(1) Brunel University London, Uxbridge, United Kingdom; (2) DIEE, University of Cagliari, Italy","Association for Computing Machinery, Inc",English,,
Compendex,MTpy: A Python toolbox for magnetotellurics,"We present the software package MTpy that allows handling, processing, and imaging of magnetotelluric (MT) data sets. Written in Python, the code is open source, containing sub-packages and modules for various tasks within the standard MT data processing and handling scheme. Besides the independent definition of classes and functions, MTpy provides wrappers and convenience scripts to call standard external data processing and modelling software. In its current state, modules and functions of MTpy work on raw and pre-processed MT data. However, opposite to providing a static compilation of software, we prefer to introduce MTpy as a flexible software toolbox, whose contents can be combined and utilised according to the respective needs of the user. Just as the overall functionality of a mechanical toolbox can be extended by adding new tools, MTpy is a flexible framework, which will be dynamically extended in the future. Furthermore, it can help to unify and extend existing codes and algorithms within the (academic) MT community. In this paper, we introduce the structure and concept of MTpy. Additionally, we show some examples from an everyday work-flow of MT data processing: the generation of standard EDI data files from raw electric ( E-) and magnetic flux density ( B-) field time series as input, the conversion into MiniSEED data format, as well as the generation of a graphical data representation in the form of a Phase Tensor pseudosection. © 2014 Elsevier Ltd.",Flexible framework - Graphical data - Modelling softwares - Open sources - Pseudosection - Python toolbox - Software toolbox - Static compilation,"Krieger, Lars(1); Peacock, Jared R.(2)",2014.0,Journal,Computers and Geosciences,10.1016/j.cageo.2014.07.013,"(1) School of Earth and Environmental Sciences - University of Adelaide, North Terrace Adelaide; 5005, Australia; (2) U.S. Geological Survey, 345 Middlefield Road, Menlo Park; CA, United States",Elsevier Ltd,English,00983004,
Compendex,Model checking python programs with MSVL,"To verify the correctness of Python programs, a novel approach for model checking Python programs with MSVL (Modeling, Simulation and Verification Language) is advocated. To this end, the rules for decoding the object-oriented semantics of Python with the process-oriented semantics of MSVL are defined, and the technique for automatically rewriting a Python program into its equivalent MSVL program is formalized, which in turn can be verified with the model checking tool MSV. In addition, an example is given to illustrate how the approach works. The approach fully utilizes the powerful expressiveness of MSVL to verify Python programs in a direct way, and helps to improve the quality of the software system. © Springer Nature Switzerland AG 2020.",Model checking tools - MSVL - Object oriented - Process-oriented - Program Verification - Python - Software systems - Verification language,"Shu, Xinfeng(1); Gao, Fengyun(1); Gao, Weiran(1); Zhang, Lili(1); Wang, Xiaobing(2); Zhao, Liang(2)",2020.0,Conference,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),10.1007/978-3-030-41418-4_15,"(1) School of Computer Science and Technology, Xi’an University of Posts and Telecommunications, Xi’an; 710061, China; (2) Institute of Computing Theory and Technology and ISN Laboratory, Xidian University, Xi’an; 710071, China",Springer,English,03029743,
Compendex,Estimating complexity of programs in python language,"In this paper, a complexity metric for Python language is formulated. Since Python is an object oriented language, the present metric is capable to evaluate any object-oriented language.We validate our metric with case study, comparative study and empirical validation. The case study is in Python, Java andC++ and the results prove that Python is better than other object-oriented languages. Later, we validate the metric empirically with a real project, which is developed in Python.",Comparative studies - Complexity metric - Empirical validation - Object oriented - Python - PYTHON language - Software complexity,"Misra, Sanjay(1); Cafer, Ferid(1)",2011.0,Journal,Tehnicki Vjesnik,,"(1) Chairman of Department of Computer Engineering, School of Information Communication Technology, Federal University of Technology, Minna, Nigeria",Strojarski Facultet,Croatian,13303651,
Compendex,Code2Graph: Automatic generation of static call graphs for python source code,"A static call graph is an imperative prerequisite used in most interprocedural analyses and software comprehension tools. However, there is a lack of software tools that can automatically analyze the Python source-code and construct its static call graph. In this paper, we introduce a prototype Python tool, named code2graph, which automates the tasks of (1) analyzing the Python source-code and extracting its structure, (2) constructing static call graphs from the source code, and (3) generating a similarity matrix of all possible execution paths in the system. Our goal is twofold: First, assist the developers in understanding the overall structure of the system. Second, provide a stepping stone for further research that can utilize the tool in software searching and similarity detection applications. For example, clustering the execution paths into a logical workflow of the system would be applied to automate specific software tasks. Code2graph has been successfully used to generate static call graphs and similarity matrices of the paths for three popular open-source Deep Learning projects (TensorFlow, Keras, PyTorch). A tool demo is available at https://youtu.be/ecctePpcAKU. © 2018 Association for Computing Machinery.",Automatic Generation - Call graph construction - Inter-procedural analysis - Learning projects - Python - Similarity detection - Software comprehension - Static code analysis,"Gharibi, Gharib(1); Tripathi, Rashmi(1); Lee, Yugyung(1)",2018.0,Conference,ASE 2018 - Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering,10.1145/3238147.3240484,"(1) School of Computing and Engineering, University of Missouri-Kansas City, Kansas City; MO, United States","Association for Computing Machinery, Inc",English,,
Compendex,An empirical study on the characteristics of python fine-grained source code change types,"Software has been changing during its whole life cycle. Therefore, identification of source code changes becomes a key issue in software evolution analysis. However, few current change analysis research focus on dynamic language software. In this paper, we pay attention to the fine-grained source code changes of Python software. We implement an automatic tool named PyCT to extract 77 kinds of fine-grained source code change types from commit history information. We conduct an empirical study on ten popular Python projects from five domains, with 132294 commits, to investigate the characteristics of dynamic software source code changes. Analyzing the source code changes in four aspects, we distill 11 findings, which are summarized into two insights on software evolution: change prediction and fault code fix. In addition, we provide direct evidence on how developers use and change dynamic features. Our results provide useful guidance and insights for improving the understanding of source code evolution of dynamic language software. © 2016 IEEE.",Characteristics of dynamics - Fine-grained changes - Fine-grained source code changes - Identification of sources - Python - Software Evolution - Software evolution analysis - Source code changes,"Lin, Wei(1); Chen, Zhifei(1); Ma, Wanwangying(1); Chen, Lin(1); Xu, Lei(1); Xu, Baowen(1)",2016.0,Conference,"Proceedings - 2016 IEEE International Conference on Software Maintenance and Evolution, ICSME 2016",10.1109/ICSME.2016.25,"(1) State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,A python software module for automated identification of systems modeled with the transfer matrix method,"This paper presents a software module for intelligently automating system identification, especially for dynamic systems modeled with the transfer matrix method (TMM). The TMM is a modeling approach that represents the elements of a dynamic system with matrices that transfer a vector of states from one end of the element to the other. A system model is formed by multiplying element transfer matrices together to form a system transfer matrix. The TMM is capable of modeling continuous elements without discretization. Existing system identification packages cannot handle continuous models of distributed-parameter systems and therefore cannot be used to identify TMM models. This paper presents a Python software module for TMM modeling that includes integrated system identification capabilities. This software module intelligently automates the system identification process, significantly reducing the time and effort required for system identification and eliminating errors stemming from low-level details. Copyright © 2007 by ASME.",Element transfer - Software modules - Transfer matrix,"Krauss, Ryan W.(1); Book, Wayne J.(2)",2008.0,Conference,"ASME International Mechanical Engineering Congress and Exposition, Proceedings",10.1115/IMECE2007-42319,"(1) Department of Mechanical and Industrial Engineering, Southern Illinois University Edwardsville, Edwardsville, IL 62026; (2) Fluid Power and Motion Control Center, George W. Woodruff School of Mechanical Engineering, Georgia Institute of Technology, Atlanta, GA 30332","American Society of Mechanical Engineers, 3 Park Avenue, New York, NY 10016-5990, United States",English,,0791843033
Compendex,ScrumPy: Metabolic modelling with Python,"ScrumPy is a software package used for the definition and analysis of metabolic models. It is written using the Python programming language that is also used as a user interface. ScrumPy has features for both kinetic and structural modelling, but the emphasis is on structural modelling and those features of most relevance to analysis of large (genome-scale) models. The aim is at describing ScrumPy's functionality to readers with some knowledge of metabolic modelling, but implementation, programming and other computational details are omitted. ScrumPy is released under the Gnu Public Licence, and available for download from http://mudshark.brookes.ac.uk/ScrumPy. © The Institution of Engineering and Technology 2006.",Metabolic modelling - Python programming language - Software package Scrumpy - Structural modelling,"Poolman, M.G.(1)",2006.0,Journal,IEE Proceedings: Systems Biology,10.1049/ip-syb:20060010,"(1) School of Molecular and Biological Sciences, Oxford Brooks University, Oxford, United Kingdom",Institution of Electrical Engineers,English,17412471,
Compendex,The preliminary results of Lindu software: A free seismological data processing using python framework,"LINDU software is developed to solve integrated earthquake data processing. It is GUI based software that fulfil the needed for user friendly type of software. The Python framework is used for computation and visualization and integrates the common programs for earthquake data processing, such as GAD.exe, JHD.exe, and HypoDD.exe. It is also integrates the common procedure of routine data processing in earthquake seismology and works in local and regional scale. In this paper, we shows the preliminary results of LINDU software for several functions. To identify arrival time of P-wave we employ Akaike Information Criterion (AIC), MER (Modified Energy Ratio) and S/L Kurt's method. The results of these method will be considered as guided - auto picking. However, the results also can be treated as reference for picking manually with Seisgram2k.jar. Geiger's method is employed to locate the event location. The events can be relocated and 1D velocity can be updated by employing Joint Hypocenter Determination (JHD). The next method to relocate the event location is Double Difference (DD) algorithm. The precision result of Lindu software has been tested using IRIS and real data available which run seamlessly. © Published under licence by IOP Publishing Ltd.",Akaike information criterion - Common projects - Double differences - Earthquake data - Event location - Regional scale - Seismological data - User friendly,"Styawan, Yudha(1); Andika, Putu Pradnya(1); Suhendi, Cahli(1); Firdaus, Ruhul(1); Sudibyo, Maria R.P.(1); Erlangga, I.F.(1); Ry, Rexha Verdhora(2)",2019.0,Conference,IOP Conference Series: Earth and Environmental Science,10.1088/1755-1315/311/1/012078,"(1) Geophysical Engineering, Institut Teknologi Sumatera, Jalan Terusan Ryacudu, Way Hui Jati Agung, Way Huwi, Jati Agung, Lampung Selatan; 35365, Indonesia; (2) Geophysical Engineering, Institut Teknologi Bandung, Jalan Ganesha 10, Bandung; 40132, Indonesia",Institute of Physics Publishing,English,17551307,
Compendex,TextX: A Python tool for Domain-Specific Languages implementation,"TextX is a meta-language and a tool for building Domain-Specific Languages in Python. It's built on top of the Arpeggio PEG parser and takes away the burden of converting parse trees to abstract representations from language designers. From a single grammar description, textX constructs Arpeggio parser and a meta-model in run-time. The meta-model contains all the information about the language and a set of Python classes inferred from grammar rules. The parser will parse programs/models written in the new language and construct Python object graph a.k.a. the model conforming to the meta-model. The textX tool has support for error reporting, debugging, and meta-model and model visualization. It is used in industrial environments and teaching Domain-Specific Languages course at the Faculty of Technical Sciences in Novi Sad. It is a free and open-source software available at GitHub under the MIT license. © 2016",Domain specific languages - Meta model - Model-Driven Software Development - Parser - Python,"Dejanovi, I.(1); Vaderna, R.(1); Milosavljevi, G.(1); Vukovi, .(1)",2017.0,Journal,Knowledge-Based Systems,10.1016/j.knosys.2016.10.023,"(1) Faculty of Technical Sciences, University of Novi Sad, Trg Dositeja Obradovica 6, 21000 Novi Sad, Vojvodina, Serbia",Elsevier B.V.,English,09507051,
Compendex,A python software module for automated identification of systems modeled with the transfer matrix method,"This paper presents a software module for intelligently automating system identification, especially for dynamic systems modeled with the transfer matrix method (TMM). The TMM is a modeling approach that represents the elements of a dynamic system with matrices that transfer a vector of states from one end of the element to the other. A system model is formed by multiplying element transfer matrices together to form a system transfer matrix. The TMM is capable of modeling continuous elements without discretization. Existing system identification packages cannot handle continuous models of distributed-parameter systems and therefore cannot be used to identify TMM models. This paper presents a Python software module for TMM modeling that includes integrated system identification capabilities. This software module intelligently automates the system identification process, significantly reducing the time and effort required for system identification and eliminating errors stemming from low-level details. Copyright © 2007 by ASME.",Automated identification - Continuous models - Discretizations - Distributed parameter systems - Element transfer - Existing systems - Integrated systems - Software modules,"Krauss, Ryan W.(1); Book, Wayne J.(2)",2007.0,Conference,"ASME International Mechanical Engineering Congress and Exposition, Proceedings (IMECE)",10.1115/IMECE2007-42319,"(1) Department of Mechanical and Industrial Engineering, Southern Illinois University Edwardsville, Edwardsville; IL; 62026, United States; (2) Fluid Power and Motion Control Center, George W. Woodruff School of Mechanical Engineering, Georgia Institute of Technology, Atlanta; GA; 30332, United States",American Society of Mechanical Engineers (ASME),English,,0791843033
Compendex,An Interactive and Comprehensive Working Environment for High-Energy Physics Software with Python and Jupyter Notebooks,"Today's analyses for high-energy physics (HEP) experiments involve processing a large amount of data with highly specialized algorithms. The contemporary workflow from recorded data to final results is based on the execution of small scripts - often written in Python or ROOT macros which call complex compiled algorithms in the background - to perform fitting procedures and generate plots. During recent years interactive programming environments, such as Jupyter, became popular. Jupyter allows to develop Python-based applications, so-called notebooks, which bundle code, documentation and results, e.g. plots. Advantages over classical script-based approaches is the feature to recompute only parts of the analysis code, which allows for fast and iterative development, and a web-based user frontend, which can be hosted centrally and only requires a browser on the user side. In our novel approach, Python and Jupyter are tightly integrated into the Belle II Analysis Software Framework (basf2), currently being developed for the Belle II experiment in Japan. This allows to develop code in Jupyter notebooks for every aspect of the event simulation, reconstruction and analysis chain. These interactive notebooks can be hosted as a centralized web service via jupyterhub with docker and used by all scientists of the Belle II Collaboration. Because of its generality and encapsulation, the setup can easily be scaled to large installations. © Published under licence by IOP Publishing Ltd.",Analysis softwares - Event simulation - Fitting procedure - High energy physics experiments (HEP) - High energy physics software - Iterative development - Programming environment - Working environment,"Braun, N.(1); Hauth, T.(1); Pulvermacher, C.(2); Ritter, M.(3)",2017.0,Conference,Journal of Physics: Conference Series,10.1088/1742-6596/898/7/072020,"(1) Karlsruhe Institute of Technology, Institut für Experimentelle Kernphysik, Wolfgang-Gaede-Str. 1, Karlsruhe; 76131, Germany; (2) High Energy Accelerator Research Organization (KEK), 1-1 Oho, Tsukuba, Ibaraki; 305-0801, Japan; (3) Ludwig-Maximilians University Munich, Excellence Cluster Universe, Boltzmannstr. 2, Garching; 85748, Germany",Institute of Physics Publishing,English,17426588,
Compendex,Boa meets python: A boa dataset of data science software in python language,"The popularity of Python programming language has surged in recent years due to its increasing usage in Data Science. The availability of Python repositories in Github presents an opportunity for mining software repository research, e.g., suggesting the best practices in developing Data Science applications, identifying bug-patterns, recommending code enhancements, etc. To enable this research, we have created a new dataset that includes 1,558 mature Github projects that develop Python software for Data Science tasks. By analyzing the metadata and code, we have included the projects in our dataset which use a diverse set of machine learning libraries and managed by a variety of users and organizations. The dataset is made publicly available through Boa infrastructure both as a collection of raw projects as well as in a processed form that could be used for performing large scale analysis using Boa language. We also present two initial applications to demonstrate the potential of the dataset that could be leveraged by the community. © 2019 IEEE.",Code enhancements - Large-scale analysis - Mining software repositories - Open source repositories - Program analysis - PYTHON language - Python programming language - Science applications,"Biswas, Sumon(1); Islam, Md Johirul(1); Huang, Yijia(1); Rajan, Hridesh(1)",2019.0,Conference,IEEE International Working Conference on Mining Software Repositories,10.1109/MSR.2019.00086,"(1) Department of Computer Science, Iowa State University, 226 Atanasoff Hall, Ames; IA, United States",IEEE Computer Society,English,21601852,
Compendex,Understanding metric-based detectable smells in Python software: A comparative study,"Context Code smells are supposed to cause potential comprehension and maintenance problems in software development. Although code smells are studied in many languages, e.g. Java and C#, there is a lack of technique or tool support addressing code smells in Python. Objective Due to the great differences between Python and static languages, the goal of this study is to define and detect code smells in Python programs and to explore the effects of Python smells on software maintainability. Method In this paper, we introduced ten code smells and established a metric-based detection method with three different filtering strategies to specify metric thresholds (Experience-Based Strategy, Statistics-Based Strategy, and Tuning Machine Strategy). Then, we performed a comparative study to investigate how three detection strategies perform in detecting Python smells and how these smells affect software maintainability with different detection strategies. This study utilized a corpus of 106 Python projects with most stars on GitHub. Results The results showed that: (1) the metric-based detection approach performs well in detecting Python smells and Tuning Machine Strategy achieves the best accuracy; (2) the three detection strategies discover some different smell occurrences, and Long Parameter List and Long Method are more prevalent than other smells; (3) several kinds of code smells are more significantly related to changes or faults in Python modules. Conclusion These findings reveal the key features of Python smells and also provide a guideline for the choice of detection strategy in detecting and analyzing Python smells. © 2017 Elsevier B.V.",Code smell - Comparative studies - Detection approach - Detection methods - Filtering strategies - Maintenance Problem - Python - Software maintainability,"Chen, Zhifei(1); Chen, Lin(1); Ma, Wanwangying(1); Zhou, Xiaoyu(2); Zhou, Yuming(1); Xu, Baowen(1)",2018.0,Journal,Information and Software Technology,10.1016/j.infsof.2017.09.011,"(1) State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing; 210093, China; (2) School of Computer Science and Engineering, Southeast University, Nanjing; 210096, China",Elsevier B.V.,English,09505849,
Compendex,A software metric for Python language,"There are many metrics for evaluating the quality of codes written in different programming languages. However, no efforts have been done to propose metrics for Python, which is an important and useful language especially for the software development for the embedded systems. In this present work, we are trying to investigate all the factors, which are responsible for increasing the complexity of code written in Python language. Accordingly, we have proposed a unified metric for this language. Practical applicability of the metric is demonstrated on a case study. © 2010 Springer-Verlag Berlin Heidelberg.",Complexity metrics - Python - PYTHON language - Software complexity - Software metrices,"Misra, Sanjay(1); Cafer, Ferid(2)",2010.0,Conference,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),10.1007/978-3-642-12165-4-24,"(1) Department of Computer Engineering, School of Information and Communication Technology, Federal University of Technology, Minna, Nigeria; (2) Department of Software Engineering, Atilim University, Ankara, Turkey",Springer Verlag,English,03029743,3642121640
Compendex,Optimization of cost to calculate the release time in software reliability using python,"As the competition among softwares have been increasing day by day, it made the IT sector to grow at different level. Whenever a software product comes into the market, a list of factors begin to originate and demand for changes. Hence there can arise defects in the software and so defects needed to be repaired. Also sales and demands of softwares are increasing day by day. So it becomes difficult to decide which software will be appropriate for the customer. As competitors are adding features and functions everyday to evolve technology that requires new upgrades to support latest versions of software. In order to maintain these new features, to win over prospects , testing is required to be done. Testing can be seen for technical case, business case, and economical case and especially for the reliability estimation.The prediction of faults in the software is another term in case of determining the outcome of the software product and the certain number of testing will be needed. Software reliability models techniques are employed for the perfect optimization on its release time. This research gives the idea of using both original release time and predicted release time to be executed and hence to obtain an optimized cost for release time. This will help to decide the effective cost of reliability of the software. Further going, this will help the customer to have the better selection on choosing the effective software. Thus through the python we have optimized the cost and found the release time of software to decide that this software will give the better output. © 2019 IEEE.",Business case - Pyomo - Python - Release time - Software products - Software reliability models,"Prashant, Prashant(1); Tickoo, Anshul(1); Sharma, Seema(1); Jamil, Jehanat(1)",2019.0,Conference,"Proceedings of the 9th International Conference On Cloud Computing, Data Science and Engineering, Confluence 2019",10.1109/CONFLUENCE.2019.8776620,"(1) Department of Computer Science and Engineering, Amity School of Engineering and Technology, Amity University, Noida, Uttar Pradesh, India",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Process compliance in open source software development - A study of Python Enhancement Proposals (PEPS),"Decision-making processes in proprietary software development are often well-captured. In contrast, stakeholders participating in open source software development (OSSD) projects often do not understand the decision-making processes at work, as these are either captured poorly or remain hidden. Using Python as the case study of an OSS project where the processes are well-documented, this work 'mined' the decision-making processes used to develop Python Enhancement Proposals (PEPs), to study whether the extracted process complied with the publicly advertised process for decision-making (i.e., the prescribed process). In doing so we investigate whether the previously observed normative-descriptive dichotomy in proprietary software development, between the two theories - normative decision theory (i.e., what is expected) and descriptive decision theory (i.e., what is done) applies to the domain of OSSD. We also investigate whether the decision-making processes are provided at the right level of granularity (fine vs. coarse) for different stakeholders. Our findings confirm the lack of process compliance in Python, thus confirming dichotomy. Thus, it validates the relevance of using decision-theory to study decision-making processes in OSSD. Additionally, it confirms the inadequacy of the granularity-level of the available process. We also discuss the implication for decision-making practice and processes in the Python community.",Decision making process - Decision-making practices - Granularity levels - Proprietary software - Python - Python Enhancement Proposals (PEPs),"Savarimuthu, Bastin Tony Roy(1); Dam, Hoa Khanh(2); Licorish, Sherlock A.(1); Keertipati, Smitha(1); Avery, Daniel(2); Ghose, Aditya(2)",2016.0,Conference,"24th European Conference on Information Systems, ECIS 2016",,"(1) University of Otago, Dunedin, New Zealand; (2) University of Wollongong, Wollongong, Australia",Association for Information Systems,English,,
Compendex,A cost efficient software defined radio receiver for demonstrating concepts in communication and signal processing using Python and RTL-SDR,"Communication and signal processing courses are the cornerstone of electrical engineering studies and other related fields. Due to the nature of the subjects, most of the concepts are modeled with mathematical equations. Experimentation is one of the important components that helps students gain more understanding in the practical applications of those concepts and get motivated. Software defined radio makes it possible to experiment and demonstrate concepts in communication and signal processing with real radio signals. However, software defined radio systems are usually expensive; providing software defined radio experimental sets that are accessible to every student can cost a considerable amount of budget. Therefore this work proposes a way to minimize the cost of using software defined radio as an educational tool by combining an ordinary digital TV tuner with a special software framework written in Python into an affordable software defined radio experimental kit. The way this experimental kit works is, a radio signal will be received into the computer via the digital TV tuner that operated with the custom driver called RTL-SDR, and then the received signal will be processed with a Python signal processing script. With the aid of the created software framework, writing a signal processing script can be much easier than using only the Python standard libraries. With this combination of inexpensive hardware and the provided software framework, the kit enables many possibilities for utilizing real world signals in classroom demonstrations and experiments. An example of using the kit for demonstrating the concept of narrowband FM demodulation is presented in this paper to show the overall workflow and how this work might be integrated into a curriculum. © 2014 IEEE.",Affordable - Cost-efficient - Python - RTL-SDR - Software-defined radios,"Uengtrakul, Boonyarit(1); Bunnjaweht, Dahmmaet(1)",2014.0,Conference,"2014 4th International Conference on Digital Information and Communication Technology and Its Applications, DICTAP 2014",10.1109/DICTAP.2014.6821718,"(1) Dept. of Electrical and Computer Engineering, Thammasat University, Pathumthani 12120, Thailand",IEEE Computer Society,English,,
Compendex,Python: Characteristics identification of a free open source software ecosystem,"Analysing a free open source software ecosystem can be beneficial and can help stakeholders in numerous ways. The analysis can help developers, investors, and contributors, to decide which software ecosystem to invest in and where to invest. Another reason for making an analysis is to assist ecosystem coordinators in governing their ecosystem. The paper provides an insight on the free open source software ecosystem of Python. It presents an analysis of the software ecosystem itself and the different characteristics it has. Based upon the conducted analysis with the available dataset, the research concludes that the free open source software ecosystem of Python contains three ecosystem roles that define its ecosystem. Next to that, it has grown exponentially from 31 active developers in 2005 to 5,212 December 2012. These results can help set up a strategy for the future of the Python ecosystem. At this point in time, it is necessary to make arrangements for the ongoing growth of the Python ecosystem. Failing to do so can lead to a growing number of unusable features, and eventually advance to an unhealthy ecosystem. © 2013 IEEE.",Characteristics - Exploratory case studies - Open-source softwares - Python - Roles - Software ecosystems,"Hoving, Rick(1); Slot, Gabriel(1); Jansen, Slinger(1)",2013.0,Conference,IEEE International Conference on Digital Ecosystems and Technologies,10.1109/DEST.2013.6611322,"(1) Utrecht University, Department of Information and Computing Sciences, Princetonplein 5, 3584CC, Utrecht, Netherlands","IEEE Computer Society, 2001 L Street N.W., Suite 700, Washington, DC 20036-4928, United States",English,21504938,
Compendex,A curated benchmark collection of python systems for empirical studies on software engineering,"The aim of this paper is to present a dataset of metrics as- sociated to the first release of a curated collection of Python software systems. We describe the dataset along with the adopted criteria and the issues we faced while building such corpus. This dataset can enhance the reliability of empirical studies, enabling their reproducibility, reducing their cost, and it can foster further research on Python software. © 2015 ACM.",Code collection - Empirical studies - Python - Reproducibilities - Software systems,"Orrú, Matteo(1); Tempero, Ewan(2); Marchesi, Michele(1); Tonelli, Roberto(1); Destefanis, Giuseppe(3)",2015.0,Conference,ACM International Conference Proceeding Series,10.1145/2810146.2810148,"(1) DIEE, University of Cagliari, Italy; (2) University of Auckland, New Zealand; (3) CRIM, Computer Research Institute of Montreal, Canada",Association for Computing Machinery,English,,
Compendex,PyDriller: Python framework for mining software repositories,"Software repositories contain historical and valuable information about the overall development of software systems. Mining software repositories (MSR) is nowadays considered one of the most interesting growing fields within software engineering. MSR focuses on extracting and analyzing data available in software repositories to uncover interesting, useful, and actionable information about the system. Even though MSR plays an important role in software engineering research, few tools have been created and made public to support developers in extracting information from Git repository. In this paper, we present Pydriller, a Python Framework that eases the process of mining Git. We compare our tool against the state-of-the-art Python Framework GitPython, demonstrating that Pydriller can achieve the same results with, on average, 50% less LOC and significantly lower complexity. © 2018 Association for Computing Machinery.",Extracting information - GitPython - Lower complexity - Mining software repositories - Mining software repository (MSR) - Python - Software repositories - State of the art,"Spadini, Davide(1); Aniche, Maurício(2); Bacchelli, Alberto(3)",2018.0,Conference,ESEC/FSE 2018 - Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,10.1145/3236024.3264598,"(1) Delft University of Technology, Software Improvement Group, Delft, Netherlands; (2) Delft University of Technology, Delft, Netherlands; (3) University of Zurich, Zurich, Switzerland","Association for Computing Machinery, Inc",English,,
Compendex,"Extraction Algorithm, Visualization and Structure Analysis of Python Software Networks","Software complexity brings software developers and learners a series of challenges to face. Automatically analyzing large-scale software systems with complex network provides a new insight into software analysis, design, evolution, reuse, and iterative developing. Nowadays, extracting network models derived from software systems and making it easily comprehensible remains challengeable for software engineers. This paper focus on Python software. We propose a series of algorithms to extract python software networks, and a concept of visual information entropy to visualize network to an optimal statue by D3.js. Then we analyze python software networks in different perspectives by Pajek. A series experiments illustrate that software network can disclose the internal hidden associations to facilitate programmer and learner to understand the software complex structure and business logic through the simplified complexity. Finally we create a synthetic software tool integrated by above three functions, which can assist programmers to understand software macro structure and the hidden backbone associations. © 2018, Springer Nature Switzerland AG.",Extraction algorithms - Large-scale software systems - Python - Software complexity - Software developer - Software network - Structure analysis - Visual information,"Shang, Ao(1); Li, Chunfang(1); Zheng, Hao(1); Shi, Minyong(1)",2018.0,Conference,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),10.1007/978-3-030-02934-0_33,"(1) Computer School, Communication University of China, Beijing; 10024, China",Springer Verlag,English,03029743,
Compendex,Tracking down dynamic feature code changes against python software evolution,"Python, a typical dynamic programming language, is increasingly used in many application domains. Dynamic features in Python allow developers to change the code at runtime. Some dynamic features such as dynamic type checking play an active part in maintenance activities, thus dynamic feature code is often changed to cater to software evolution. The aim of this paper is exploring and validating the characteristics of feature changes in Python. We collected change occurrences in 85 open-source projects and discovered the relationship between feature changes and bug-fix activities. Furthermore, we went into 358 change occurrences to explore the causes and behaviors of feature changes. The results show that: (1) dynamic features are increasingly used and the code is changeable; (2) most dynamic features may behave that feature code is more likely to be changed in bug-fix activities than non-bugfix activities; (3) dynamic feature code plays both positive and negative roles in maintenance activities. Our results provide useful guidance and insights for improving automatic program repair and refactoring tools. © 2016 IEEE.",Automatic programs - Code changes - Dynamic features - Maintenance activity - Open source projects - Python - Refactoring tools - Software Evolution,"Chen, Zhifei(1); Ma, Wanwangying(1); Lin, Wei(1); Chen, Lin(1); Xu, Baowen(1)",2016.0,Conference,"Proceedings - 2016 3rd International Conference on Trustworthy Systems and Their Applications, TSA 2016",10.1109/TSA.2016.19,"(1) State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,An approach to formal verification of python software transactional memory,"Although Python is one of the most widely used programming languages, and it is a foundation for a variety of parallel and distributed computing frameworks, it still lacks an applicable and reliable software transactional memory. In this paper, we present an approach to formal verification of a Python Software Transactional Memory (PSTM) solution using UPPAAL tool. The aims are (i) to apply a formal verification process to a real STM implementation in order to derive a faithful STM model based on a PSTM design and (ii) to use developed PSTM model for automated machine-checked formal verification of core system properties such as safety and liveness using a model checker tool. Firstly, an architecture of PSTM solution is introduced. Secondly, formalization and a PSTM system model are analyzed. Finally, core PSTM system's properties are verified, namely safety, liveness, and reachability. Utilizing a UPPAAL's model checker tool it is successfully verified that the PSTM system model satisfies each of the three formerly mentioned properties. © 2017 ACM.",Automated machines - Model-based OPC - Parallel and distributed computing - Python - Software transactional memory - System modeling - UPPAAL - Verification process,"Kordic, Branislav(1); Popovic, Miroslav(1); Ghilezan, Silvia(1); Basicevic, Ilija(1)",2017.0,Conference,ACM International Conference Proceeding Series,10.1145/3123779.3123788,"(1) Faculty of Technical Sciences, University of Novi Sad, Trg Dositeja Obradovica 6, Novi Sad, Serbia",Association for Computing Machinery,English,,
Compendex,Antp protocol suite software implementation architecture in python,"Due to the highly-dynamic nature of airborne telemetry networks, we have developed the ANTP protocol suite consisting of AeroTP, AeroRP, and AeroNP. Having verified these protocols through simulation and analysis, the next step towards deployment of the ANTP suite is developing a cross-platform implementation of the protocols. Towards this end we present a preliminary architecture for the protocol stack to be implemented in the Python programming language. Initial development and testing is being conducted in the PlanetLab testbed environment, with future trials to be conducted using embedded processors on radio-controlled aircraft and ground vehicles.",Cross-platform - Dynamic nature - Embedded processors - Initial development - Python programming language - Radio-controlled aircraft - Simulation and analysis - Software implementation,"Alenazi, Mohammed(1); Ajith Gogi, Santosh(1); Zhang, Dongsheng(1); Çetinkaya, Egemen K.(1); Rohrer, Justin P.(1); Sterbenz, James P.G.(1)",2011.0,Conference,Proceedings of the International Telemetering Conference,,"(1) Department of Electrical Engineering and Computer Science, The University of Kansas, Lawrence, KS 66045, United States",International Foundation for Telemetering,English,08845123,
Compendex,DPM-PSTM: Dual-port memory based python software transactional memory,"Recently, hardware transactional memories (TMs) became available in some commercial multicore processors but due to its immaturity they are still not considered as a common feature available in processors, which provides researchers a chance to continue their work in the field of software TMs (STMs). This paper presents a novel STM design for Python (PSTM) based on a dual-port memory mechanism. The novel STM aims to mitigate overheads introduced by a message transferring mechanism used in the first version of PSTM, which is based on Queue and Pipe abstractions. Both versions are experimentally evaluated on Simple Bank program and simple performance benchmark. The PSTM version based on a dual-port memory mechanism achieves better performance in a case of intensive transaction (re)execution while in a firsttake-successful transaction execution results of both PSTM versions are comparable. In the former case the PSTM version based on a dual-port memory mechanism achieves better results due to architecture advantages, i.e. reducing a message transfer overhead. © 2015 IEEE.",Concurency - Dual-port memory - Multi-cores - Parallel processing - Python - Software transactional memory,"Kordic, Branislav(1); Popovic, Miroslav(1); Basicevic, Ilija(1)",2015.0,Conference,"Proceedings - 4th Eastern European Regional Conference on the Engineering of Computer-Based Systems, ECBS-EERC 2015",10.1109/ECBS-EERC.2015.28,"(1) Faculty of Technical Science, Institute RT-RK, University of Novi Sad, Trg D. Obradovica 6, Novi Sad, Serbia",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Boundary Spanners in Open Source Software Development: A Study of Python Email Archives,"In many open source software development communities, a significant proportion of development is undertaken by a relatively small number of individuals, the 'core members'. The stability and longevity of this group of most active developers are crucial for the success of the project. While there has been prior work on identifying key individuals in open source development, little attention has been devoted to the identification of cross-cutting core individuals (boundary spanners) whose responsibilities span across different functional areas of open source development (e.g., who are involved both in development-centric activities and user-centric activities). To address this gap, we propose an approach to identify the core cross-cutting members and their roles within the community through analyzing email communication repositories. We use Social Network Analysis (SNA) tools to identify the most active core members in different forums (that have different focus such as Python-dev that focuses on language evolution and Python Lists that focus on user support), and their activities over time, thus identifying the core developers and their involvement in different community mailing lists. Based on the involvement of a core developer and the overall social structure of the network of core developers, we also present an approach for identifying a potential replacement for a community administrator that steps down. Using email repositories of six main Python forums as the case study domain, we computed several social network analysis metrics to characterize the core developers and their importance in the Python community. © 2017 IEEE.",Boundary spanners - Community development - Email communication - Language evolution - Open source development - Python - Social structure - Use social networks,"Sharma, Pankajeshwara N.(1); Savarimuthu, Bastin Tony Roy(1); Stanger, Nigel(1)",2017.0,Conference,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC",10.1109/APSEC.2017.37,"(1) Department of Information Science, University of Otago, Dunedin, New Zealand",IEEE Computer Society,English,15301362,
Compendex,Open-source Python software for analysis of 3D kinematics from quadrupedal animals,"Locomotion is key to survival, yet it can be disturbed by injuries, diseases, and aging. Therefore, it is important for researchers in biology, neuroscience, biomechanics, and further afield. Locomotion is frequently quantified using kinematic data, and quadrupeds including rodents are medical model animals used worldwide. Kinematics typically result from the tracking of some landmarks, often joint centers. Although commercially available systems and software exist for the analysis of these kinematic data, they are expensive, often restricted to use with a given apparatus, and may be inextensible. Therefore, there is a need for an open source tool to analyze kinematic data. We present a Python software to address this need. It uses 2D coordinates from four cameras and DLT coefficients from the calibrated volume to generates 3D coordinates [1]. A method is presented to modify the knee and elbow joint positions in 3D. Then, kinematic features are extracted, and they are sorted in a time series format to plot a summary of a study. In addition, we generate videos from the tracked points, 3D reconstruction of the points, showing joint angles for eight joints, the location of animal on the belt, and the animal's speed on the belt. The software has been evaluated by eight trials to show the importance of the work. The 3D reconstruction error, having an average of 7.36 pixels, was calculated for the markers. The presented program can be used in different fields. It will encourage the researchers to design the studies based on their needs because they can change the setup in any required conditions while they can extract the kinematic data. © 2019 Elsevier Ltd",2D coordinates - 3D reconstruction - Kinematic data - Medical modeling - Neuroscience - Open source tools - Python - Systems and software,"Maghsoudi, Omid Haji(1); Vahedipour, Annie(2); Hallowell, Thomas(1); Spence, Andrew(1)",2019.0,Journal,Biomedical Signal Processing and Control,10.1016/j.bspc.2019.02.024,"(1) Bioengineering, Temple University, Philadelphia; PA; 19122, United States; (2) Pediatric Neurology, Yale University, Connecticut; CT; 06520, United States",Elsevier Ltd,English,17468094,
Compendex,Formal verification of python software transactional memory serializability based on the push/pull semantic model,"The Push/Pull semantic model of transactions has appeared recently as a solution that unifies a wide range of transactional memory algorithms. It has been proved that the push/pull semantic model satisfies serializability, thus one may prove that a given STM satisfies serializability by constructing its push/pull model such that this model satisfies respective correctness criteria. In this paper, we prove that a Python STM implementation is serializable by constructing its Push/Pull model and by showing that the model satisfies the correctness criteria for the relevant push/pull semantic rules. We first identify that modeling Python STM requires only four, out of seven, push/pull operations, namely the operations pull, apply, push, and commit. Next, we introduce the detailed specification of the PSTM transactional algorithm. Then we map the steps of the PSTM transactional algorithm to the respective push/pull semantic rules. Finally, we prove that the PSTM algorithm satisfies the correctness criteria of the respective push/pull semantic rules. We have envisaged this paper to provide interested researchers with a better understanding of PSTM semantics, in order to construct push/pull models of their own STMs more easily. © 2019 Association for Computing Machinery.",Correctness criterion - Python - Semantic Model - Semantic rules - Serializability - Software transactional memory - Transactional memory,"Popovic, Miroslav(1); Popovic, Marko(1); Ghilezan, Silvia(1); Kordic, Branislav(1)",2019.0,Conference,ACM International Conference Proceeding Series,10.1145/3352700.3352706,"(1) University of Novi, Sad Faculty of Technical Sciences, Trg Dositeja Obradovica 6, Novi Sad, Serbia",Association for Computing Machinery,English,,
Compendex,Development of Word Cloud Generator Software Based on Python,"A word cloud is a kind of weighted list to visualize language or text data, which gains increasing attention and more application opportunities as the big data time approaches. Currently, there has been some online word cloud generators available for users with simple requests, such as repeating the exact phrase, or collecting the text data from a web page. Moreover, most current word cloud generators cannot support characters other than English, which are limited in English-speaking users. There are also packages for programming languages (such as Python and R) to generate word clouds, which requires coding and is not user-friendly. This paper is focusing on developing a graphical user interface (GUI) software to generate word cloud maps with easy operations. The Python programming language is involved and some details are discussed. Finally the software is released for further application.",Graphical user interfaces (GUI) - GUI software - Python - Python programming language - Text data - User friendly - Word clouds,"Jin, Yuping(1)",2017.0,Conference,Procedia Engineering,10.1016/j.proeng.2017.01.223,"(1) Department of Mathematics, Mudanjiang Normal University, Mudanjiang; 157001, China",Elsevier Ltd,English,,
Compendex,A python-based software tool for power system analysis,"This paper presents a power system analysis tool, called DOME, entirely based on Python scripting language as well as on public domain efficient C and Fortran libraries. The objects of the paper are twofold. First, the paper discusses the features that makes the Python language an adequate tool for research, massive numerical simulations and education. Then the paper describes the architecture of the developed software tool and provides a variety of examples to show the advanced features and the performance of the developed tool. © 2013 IEEE.",Eigenvalue analysis - Power flow analysis - PYTHON language - scripting - Time-domain integrations,"Milano, Federico",2013.0,Conference,IEEE Power and Energy Society General Meeting,10.1109/PESMG.2013.6672387,,IEEE Computer Society,English,19449925,
Compendex,Integration of Python-Based MDSPLUS Interface for ICRH DAC Software,"Ion cyclotron resonance heating (ICRH) data acquisition control system (DAC) system for 100 kW, 45.6 MHz has been designed for RF ICRH system. This system is used for control and monitoring for 2, 20, and 100 kW RF amplifier stages, respectively. ICRH system consists of different power supplies for each RF amplifier stages. PLC-based DAC has been used for various power supplies monitor, control, and interlocks. Acquired data has been stored in MDSPLUS tree in binary format with defined signal list. Python is an open source scripting language which has been used for core development of software system. Python is very popular programming language for embedded as well as high-level programming. MDSPLUS is an open source package used for data archival and visualization. It is data archival and analysis tools used in various fusion experiments for data logging and visualization with configuration. It has standard developed program interface available with most of the popular languages like Fortan, C++, Python, Java, MATLAB, and IDL for graphical display of data and browsing. The paper introduces the interface of Python-based API for integration of Python and MDSPLUS for ICRH DAC software. Module allows user to read/write data directly in binary tree of MDSPLUS hierarchy. Java-based jScope tool is a part of MDSPLUS database which is used for data visualization. © 2018, Springer Nature Singapore Pte Ltd.",Control and monitoring - Fusion experiments - Graphical displays - High-level programming - Ion cyclotron resonance heating - Open source package - Python - Scripting languages,"Joshi, Ramesh(1); Kulkarni, Swanand S.(2); Kulkarni, S.V.(1)",2018.0,Conference,Advances in Intelligent Systems and Computing,10.1007/978-981-10-6872-0_42,"(1) Institute for Plasma Research, Bhat Village Gandhinagar, Ahmedabad; 382428, India; (2) Gujarat Technological University, Ahmedabad; 382424, India",Springer Verlag,English,21945357,
Compendex,QuantCloud: A software with automated parallel python for Quantitative Finance applications,"Quantitative Finance is a field that replies on data analysis and big data enabling software to discover market signals. In this, a decisive factor is the speed that concerns execution speed and software development speed. So, an efficient software plays a key role in helping trading firms. Inspired by this, we present a novel software: QuantCloud to integrate a parallel Python system with a C++-coded Big Data system. C++ is used to implement this big data system and Python is used to code the user methods. The automated parallel execution of Python codes is built upon a coprocess-based parallel strategy. We test our software using two popular algorithms: moving-window and autoregressive moving-average (ARMA). We conduct an extensive comparative study between Intel Xeon E5 and Xeon Phi processors. The results show that our method achieved a nearly linear speedup for executing Python codes in parallel, prefect for today's multicore processors. © 2018 IEEE.",Autoregressive moving average - Comparative studies - Execution speed - Linear speed-up - Multi-core processor - Parallel executions - Parallel Python - Parallel strategies,"Zhang, Peng(1); Gao, Yuxiang(2); Shi, Xiang(3)",2018.0,Conference,"Proceedings - 2018 IEEE 18th International Conference on Software Quality, Reliability, and Security, QRS 2018",10.1109/QRS.2018.00052,"(1) Applied Mathematics Department, Stony Brook University, NY; 11794, United States; (2) Midea Emerging Technology Center, CA; 95134, United States; (3) Advanced Risk and Portfolio Management (ARPM), NY; 10023, United States",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,GPAW - Massively parallel electronic structure calculations with Python-based software,"Electronic structure calculations are a widely used tool in materials science and large consumer of supercomputing resources. Traditionally, the software packages for these kind of simulations have been implemented in compiled languages, where Fortran in its different versions has been the most popular choice. While dynamic, interpreted languages, such as Python, can increase the efficiency of programmer, they cannot compete directly with the raw performance of compiled languages. However, by using an interpreted language together with a compiled language, it is possible to have most of the productivity enhancing features together with a good numerical performance. We have used this approach in implementing an electronic structure simulation software GPAW using the combination of Python and C programming languages. While the chosen approach works well in standard workstations and Unix environments, massively parallel supercomputing systems can present some challenges in porting, debugging and profiling the software. In this paper we describe some details of the implementation and discuss the advantages and challenges of the combined Python/C approach. We show that despite the challenges it is possible to obtain good numerical performance and good parallel scalability with Python based software. © 2011 Published by Elsevier Ltd.",Electronic structure calculations - Interpreted languages - Massively parallel supercomputing - Numerical performance - Numpy - Parallel scalability - Python - Structure simulations,"Enkovaara, Jussi(1); Romero, Nichols A.(2); Shende, Sameer(3); Mortensen, Jens J.(4)",2011.0,Conference,Procedia Computer Science,10.1016/j.procs.2011.04.003,"(1) CSC - IT Center for Science Ltd., P.O. Box 405, FI-02101 Espoo, Finland; (2) Argonne National Laboratory, Leadership Computing Facility, Argonne, IL, United States; (3) Performance Research Laboratory, University of Oregon, Eugene, OR 97403, United States; (4) Department of Physics, Center for Atomic-scale Materials Design, Technical University of Denmark, DK-2800 Kgs. Lyngby, Denmark",Elsevier B.V.,English,,
Compendex,Parallelizing x-ray photon correlation spectroscopy software tools using python multiprocessing,"The third generation synchrotron facilities that are designed to deliver highly intense and bright X-ray beams along with the new area detectors capable of achieving high dynamic ratios and fast frame rates have enabled novel Coherent X-ray scattering experiments. X-ray Photon Correlation Spectroscopy is such a technique that measures nano- and mesoscale dynamics in materials. The scikit-beam Python analysis library developed at the National Synchrotron Light Source-II at Brookhaven National Laboratory contains a serial version of Xray Photon Correlation Spectroscopy software tools to perform streaming analysis of structural dynamics of materials, which can be time consuming given the anticipated fast data rates and high image resolutions at the National Synchrotron Light Source-II. Therefore, it is essential to parallelize these data analysis tools to achieve the best performance on the available workstations that contain multi-core processors. In this paper, we report the progress that we have made in using the Python multiprocessing module to parallelize the time-correlation functions in scikit-beam. We will compare the results from different multiprocessing approaches, and discuss pros and cons associated with each method. © 2017 IEEE.",Brookhaven national laboratory - Coherent X-ray scattering - Coherent X-rays - Multi-core processor - National Synchrotron light sources - Python Multiprocessing - Time correlation functions - X ray photon correlation spectroscopy,"Abeykoon, Sameera K.(1); Lin, Meifeng(1); Van Dam, Kerstin Kleese(1)",2017.0,Conference,"2017 New York Scientific Data Summit, NYSDS 2017 - Proceedings",10.1109/NYSDS.2017.8085042,"(1) Computational Science Initiative, Brookhaven National Laboratory, Upton; NY; 11973, United States",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Design of software-defined-satellite-based PID attitude control application in python,"Up to now, due to the inconvenience of updating the software of conventional satellite systems, we proposed a new satellite structure called software defined satellite system. Based on this system, we complete the design of a supported software application using Python language, in which the PID attitude controller meets the need to control the real time attitude described by Euler angles of satellite in orbit. The benefits along with the challenges of the new structure are proposed as well. © 2018 IEEE.",Attitude controller - Control applications - Design of softwares - Euler angles - Proportional integral differentials - Python - Satellite attitude control - Software applications,"Zhai, Yu-Jia(1); Lin, Zhe-Yuan(2)",2018.0,Conference,"Proceedings of 2018 IEEE 4th Information Technology and Mechatronics Engineering Conference, ITOEC 2018",10.1109/ITOEC.2018.8740724,"(1) Southwest Jiaotong University, School of Mechanism Engineering, Chengdu; 611756, China; (2) Xi'An Jiaotong University, School of Mechanism Engineering, Xi'an; 710049, China",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,Steady state analysis of autonomous wind energy conversion system for irrigation purpose employing induction machines using Python - A free and open source software,"Rapid rise in the demand of electricity has focused on utilization of renewable sources of energy. Wind energy being most widely used renewable source of energy, is utilized for irrigation purpose. This paper presents a simple analysis of wind electrical system driving water pump for irrigation employing induction machines. Admittance model of the system is used in carrying out the steady state analysis considering induction motor's core saturation. The resulting system is investigated for varying wind speeds and torque input to the Self Excited Induction Generator (SEIG) at constant terminal voltage. The system is thus best described by a set of complex numbered, nonlinear, simultaneous algebraic equations. The steady state analysis presents an overview of the variations in frequency, generator terminal voltage, generator currents, excitation capacitance and motor torques with respect to changes in wind velocity and generator torque. The results are obtained with the help of Python. It is a powerful, dynamic and a general purpose language which is free and platform independent open source software with extensive libraries. In this paper an attempt has been made to use Python for solving the type of equations aforementioned and present the graphical results of the analysis. © 2013 IEEE.",Excitation capacitance - Free and open source softwares - General purpose languages - Platform independent - Python - Self excited induction generators - Steady-state analysis - Wind energy conversion system,"Kanoj, B.(1); Sanu, M. Arjun(1); Raju, A.B.(1)",2013.0,Conference,"c2013 IEEE Global Humanitarian Technology Conference: South Asia Satellite, GHTC-SAS 2013",10.1109/GHTC-SAS.2013.6629933,"(1) Electrical and Electronics Engineering, B. V. B College of Engineering and Technology, Hubli-580 031, India",IEEE Computer Society,English,,
Compendex,A python extension to the ATLAS online software for the thin gap chamber trigger system,"A Python extension module for A Toroidal LHC Apparatus (ATLAS) Online Software has been developed for the Thin Gap Chamber (TGC) trigger system. Python is an interactive scripting language including built-in high-level libraries, and provides an easy way to build Web applications. These features are not included in the Online Software, and are important in developing test software for the TGC trigger system. The Python extension module is designed and implemented using a C++ library, ""Boost.Python."" We have developed a Web application using the extension module and Zope (a Python-based Web application server), which allows one to monitor the TGC trigger system from anywhere in the world. The functionalities of the Python extension module and its application for the TGC trigger system are presented.",Online software - Python extension - Thin Gap Chamber (TGC) - Trigger Systems,"Maeno, Tadashi(1); Kataoka, Yousuke(2); Komatsu, Satoru(3); Nakayoshi, Kazuo(4); Yasu, Yoshiji(5)",2004.0,Conference,IEEE Transactions on Nuclear Science,10.1109/TNS.2004.828505,"(1) Europ. Org. for Nuclear Research, CH-1211 Geneva 23, Switzerland; (2) University of Tokyo, Tokyo 113-0033, Japan; (3) Tokyo Metropolitan University, Tokyo 192-0397, Japan; (4) Inst. of Particle/Nuclear Studies, High Ener. Accel. Res. Organization, Ibaraki 305-0801, Japan; (5) KEK, Ibaraki 305-0801, Japan",Institute of Electrical and Electronics Engineers Inc.,English,00189499,
Compendex,Development of a power flow software for distribution system analysis based on rectangular voltage using python software package,This paper presents our work on developing a power flow software tool based on rectangular voltage coordinates using the Python scripting language. Rectangular coordinates show higher computational efficiency and better convergence properties than polar formulation. The proposed software tool benefits from Newton-Raphson method to solve the power flow problem. A graphical user interface is also developed and constitutes an initial step towards future development. Results of the proposed power flow software tool are compared to other open source software packages. The proposed work shows good convergence characteristic and proves to perform similarly to other available software tools. © 2014 IEEE.,Convergence characteristics - Convergence properties - Distribution system analysis - Distribution systems - Power flows - Python - Python scripting languages - Rectangular coordinates,"Hakim, Lukmanul(1); Wahidi, Muhamad(1); Handoko, Trisno(1); Gusmedi, Herri(1); Soedjarwanto, Noer(1); Milano, Federico(2)",2014.0,Conference,"Proceedings - 2014 6th International Conference on Information Technology and Electrical Engineering: Leveraging Research and Technology Through University-Industry Collaboration, ICITEE 2014",10.1109/ICITEED.2014.7007935,"(1) Jurusan Teknik Elektro Universitas Lampung, Bandar Lampung, Indonesia; (2) UCD School of Electrical, Electronic and Communication Engineering, University College Dublin, Belfield, Dublin 4, Ireland",Institute of Electrical and Electronics Engineers Inc.,English,,
Compendex,PyLUR: Efficient software for land use regression modeling the spatial distribution of air pollutants using GDAL/OGR library in Python,"Land use regression (LUR) models have been widely used in air pollution modeling. This regression-based approach estimates the ambient pollutant concentrations at un-sampled points of interest by considering the relationship between ambient concentrations and several predictor variables selected from the surrounding environment. Although conceptually quite simple, its successful implementation requires detailed knowledge of the area, expertise in GIS, statistics, and programming skills, which makes this modeling approach relatively inaccessible to novice users. In this contribution, we present a LUR modeling and pollution-mapping software named PyLUR. It uses GDAL/OGR libraries based on the Python platform and can build a LUR model and generate pollutant concentration maps efficiently. This self-developed software comprises four modules: a potential predictor variable generation module, a regression modeling module, a model validation module, and a prediction and mapping module. The performance of the newly developed PyLUR is compared to an existing LUR modeling software called RLUR (with similar functions implemented on R language platform) in terms of model accuracy, processing efficiency and software stability. The results show that PyLUR out-performs RLUR for modeling in the Bradford and Auckland case studies examined. Furthermore, PyLUR is much more efficient in data processing and it has a capability to handle detailed GIS input data. [Figure not available: see fulltext.]. © 2020, Higher Education Press and Springer-Verlag GmbH Germany, part of Springer Nature.",Air Pollution Modeling - Air pollution modelling - Ambient concentrations - GDAL/OGR Python - Land-use regression models - Pollutant concentration - Spatial analysis - Surrounding environment,"Ma, Xuying(1,2); Longley, Ian(2); Salmond, Jennifer(1); Gao, Jay(1)",2020.0,Journal,Frontiers of Environmental Science and Engineering,10.1007/s11783-020-1221-5,"(1) School of Environment, Faculty of Science, University of Auckland, Auckland; 1010, New Zealand; (2) National Institute of Water and Atmospheric Research, Auckland; 1010, New Zealand",Higher Education Press,English,20952201,
